<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<xsl:stylesheet xmlns:xs="http://www.w3.org/2001/XMLSchema"
                xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                xmlns:saxon="http://saxon.sf.net/"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:schold="http://www.ascc.net/xml/schematron"
                xmlns:iso="http://purl.oclc.org/dsdl/schematron"
                xmlns:xhtml="http://www.w3.org/1999/xhtml"
                xmlns:ali="http://www.niso.org/schemas/ali/1.0/"
                xmlns:xlink="http://www.w3.org/1999/xlink"
                xmlns:xi="http://www.w3.org/2001/XInclude"
                xmlns:mml="http://www.w3.org/1998/Math/MathML"
                xmlns:dc="http://purl.org/dc/terms/"
                xmlns:e="https://elifesciences.org/namespace"
                xmlns:file="java.io.File"
                xmlns:java="http://www.java.com/"
                version="2.0"><!--Implementers: please note that overriding process-prolog or process-root is 
    the preferred method for meta-stylesheets to use where possible. -->
   <xsl:param name="archiveDirParameter"/>
   <xsl:param name="archiveNameParameter"/>
   <xsl:param name="fileNameParameter"/>
   <xsl:param name="fileDirParameter"/>
   <xsl:variable name="document-uri">
      <xsl:value-of select="document-uri(/)"/>
   </xsl:variable>

   <!--PHASES-->


   <!--PROLOG-->
   <xsl:output xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
               method="xml"
               omit-xml-declaration="no"
               standalone="yes"
               indent="yes"/>

   <!--XSD TYPES FOR XSLT2-->


   <!--KEYS AND FUNCTIONS-->
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron"
                 name="e:titleCaseToken"
                 as="xs:string">
      <xsl:param name="s" as="xs:string"/>
      <xsl:choose>
         <xsl:when test="contains($s,'-')">
            <xsl:value-of select="concat(           upper-case(substring(substring-before($s,'-'), 1, 1)),           lower-case(substring(substring-before($s,'-'),2)),           '-',           upper-case(substring(substring-after($s,'-'), 1, 1)),           lower-case(substring(substring-after($s,'-'),2)))"/>
         </xsl:when>
         <xsl:when test="lower-case($s)=('and','or','the','an','of')">
            <xsl:value-of select="lower-case($s)"/>
         </xsl:when>
         <xsl:when test="lower-case($s)=('rna','dna')">
            <xsl:value-of select="upper-case($s)"/>
         </xsl:when>
         <xsl:when test="matches(lower-case($s),'[1-4]d')">
            <xsl:value-of select="upper-case($s)"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="concat(upper-case(substring($s, 1, 1)), lower-case(substring($s, 2)))"/>
         </xsl:otherwise>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron"
                 name="e:titleCase"
                 as="xs:string">
      <xsl:param name="s" as="xs:string"/>
      <xsl:choose>
         <xsl:when test="contains($s,' ')">
            <xsl:variable name="token1" select="substring-before($s,' ')"/>
            <xsl:variable name="token2" select="substring-after($s,$token1)"/>
            <xsl:choose>
               <xsl:when test="lower-case($token1)=('rna','dna')">
                  <xsl:value-of select="concat(upper-case($token1),               ' ',               string-join(for $x in tokenize(substring-after($token2,' '),'\s') return e:titleCaseToken($x),' ')               )"/>
               </xsl:when>
               <xsl:when test="matches(lower-case($token1),'[1-4]d')">
                  <xsl:value-of select="concat(upper-case($token1),               ' ',               string-join(for $x in tokenize(substring-after($token2,' '),'\s') return e:titleCaseToken($x),' ')               )"/>
               </xsl:when>
               <xsl:otherwise>
                  <xsl:value-of select="concat(               concat(upper-case(substring($token1, 1, 1)), lower-case(substring($token1, 2))),               ' ',               string-join(for $x in tokenize(substring-after($token2,' '),'\s') return e:titleCaseToken($x),' ')               )"/>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:when>
         <xsl:when test="lower-case($s)=('and','or','the','an','of')">
            <xsl:value-of select="lower-case($s)"/>
         </xsl:when>
         <xsl:when test="lower-case($s)=('rna','dna')">
            <xsl:value-of select="upper-case($s)"/>
         </xsl:when>
         <xsl:when test="matches(lower-case($s),'[1-4]d')">
            <xsl:value-of select="upper-case($s)"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="e:titleCaseToken($s)"/>
         </xsl:otherwise>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron"
                 name="e:article-type2title"
                 as="xs:string">
      <xsl:param name="s" as="xs:string"/>
      <xsl:choose>
         <xsl:when test="$s = 'Replication Study'">
            <xsl:value-of select="'Replication Study:'"/>
         </xsl:when>
         <xsl:when test="$s = 'Registered Report'">
            <xsl:value-of select="'Registered report:'"/>
         </xsl:when>
         <xsl:when test="$s = 'Correction'">
            <xsl:value-of select="'Correction:'"/>
         </xsl:when>
         <xsl:when test="$s = 'Retraction'">
            <xsl:value-of select="'Retraction:'"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="'undefined'"/>
         </xsl:otherwise>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron"
                 name="e:sec-type2title"
                 as="xs:string">
      <xsl:param name="s" as="xs:string"/>
      <xsl:choose>
         <xsl:when test="$s = 'intro'">
            <xsl:value-of select="'Introduction'"/>
         </xsl:when>
         <xsl:when test="$s = 'results'">
            <xsl:value-of select="'Results'"/>
         </xsl:when>
         <xsl:when test="$s = 'discussion'">
            <xsl:value-of select="'Discussion'"/>
         </xsl:when>
         <xsl:when test="$s = 'materials|methods'">
            <xsl:value-of select="'Materials and methods'"/>
         </xsl:when>
         <xsl:when test="$s = 'results|discussion'">
            <xsl:value-of select="'Results and discussion'"/>
         </xsl:when>
         <xsl:when test="$s = 'methods'">
            <xsl:value-of select="'Methods'"/>
         </xsl:when>
         <xsl:when test="$s = 'model'">
            <xsl:value-of select="'Model'"/>
         </xsl:when>
         <xsl:when test="$s = 'additional-information'">
            <xsl:value-of select="'Additional information'"/>
         </xsl:when>
         <xsl:when test="$s = 'supplementary-material'">
            <xsl:value-of select="'Additional files'"/>
         </xsl:when>
         <xsl:when test="$s = 'data-availability'">
            <xsl:value-of select="'Data availability'"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="'undefined'"/>
         </xsl:otherwise>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron"
                 name="e:fig-id-type"
                 as="xs:string">
      <xsl:param name="s" as="xs:string"/>
      <xsl:choose>
         <xsl:when test="matches($s,'^fig[0-9]{1,3}$')">
            <xsl:value-of select="'Figure'"/>
         </xsl:when>
         <xsl:when test="matches($s,'^fig[0-9]{1,3}s[0-9]{1,3}$')">
            <xsl:value-of select="'Figure supplement'"/>
         </xsl:when>
         <xsl:when test="matches($s,'^box[0-9]{1,3}fig[0-9]{1,3}$')">
            <xsl:value-of select="'Box figure'"/>
         </xsl:when>
         <xsl:when test="matches($s,'^app[0-9]{1,3}fig[0-9]{1,3}$')">
            <xsl:value-of select="'Appendix figure'"/>
         </xsl:when>
         <xsl:when test="matches($s,'^app[0-9]{1,3}fig[0-9]{1,3}s[0-9]{1,3}$')">
            <xsl:value-of select="'Appendix figure supplement'"/>
         </xsl:when>
         <xsl:when test="matches($s,'^respfig[0-9]{1,3}$')">
            <xsl:value-of select="'Author response figure'"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="'undefined'"/>
         </xsl:otherwise>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron"
                 name="e:stripDiacritics"
                 as="xs:string">
      <xsl:param name="string" as="xs:string"/>
      <xsl:value-of select="replace(replace(translate($string,'àáâãäåçčèéêěëħìíîïłñňòóôõöőøřšśşùúûüýÿž','aaaaaacceeeeehiiiilnnooooooorsssuuuuyyz'),'æ','ae'),'ß','ss')"/>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:citation-format1">
      <xsl:param name="year"/>
      <xsl:choose>
         <xsl:when test="(count($year/ancestor::element-citation/person-group[1]/*) = 1) and $year/ancestor::element-citation/person-group[1]/name">
            <xsl:value-of select="concat($year/ancestor::element-citation/person-group[1]/name/surname,', ',$year)"/>
         </xsl:when>
         <xsl:when test="(count($year/ancestor::element-citation/person-group[1]/*) = 1) and $year/ancestor::element-citation/person-group[1]/collab">
            <xsl:value-of select="concat($year/ancestor::element-citation/person-group[1]/collab,', ',$year)"/>
         </xsl:when>
         <xsl:when test="(count($year/ancestor::element-citation/person-group[1]/*) = 2) and (count($year/ancestor::element-citation/person-group[1]/name) = 1) and $year/ancestor::element-citation/person-group[1]/*[1]/local-name() = 'collab'">
            <xsl:value-of select="concat($year/ancestor::element-citation/person-group[1]/collab,' and ',$year/ancestor::element-citation/person-group[1]/name/surname,', ',$year)"/>
         </xsl:when>
         <xsl:when test="(count($year/ancestor::element-citation/person-group[1]/*) = 2) and (count($year/ancestor::element-citation/person-group[1]/name) = 1) and $year/ancestor::element-citation/person-group[1]/*[1]/local-name() = 'name'">
            <xsl:value-of select="concat($year/ancestor::element-citation/person-group[1]/name/surname,' and ',$year/ancestor::element-citation/person-group[1]/collab,', ',$year)"/>
         </xsl:when>
         <xsl:when test="(count($year/ancestor::element-citation/person-group[1]/*) = 2) and (count($year/ancestor::element-citation/person-group[1]/name) = 2)">
            <xsl:value-of select="concat($year/ancestor::element-citation/person-group[1]/name[1]/surname,' and ',$year/ancestor::element-citation/person-group[1]/name[2]/surname,', ',$year)"/>
         </xsl:when>
         <xsl:when test="(count($year/ancestor::element-citation/person-group[1]/*) = 2) and (count($year/ancestor::element-citation/person-group[1]/collab) = 2)">
            <xsl:value-of select="concat($year/ancestor::element-citation/person-group[1]/collab[1],' and ',$year/ancestor::element-citation/person-group[1]/collab[2],', ',$year)"/>
         </xsl:when>
         <xsl:when test="(count($year/ancestor::element-citation/person-group[1]/*) ge 2) and $year/ancestor::element-citation/person-group[1]/*[1]/local-name() = 'collab'">
            <xsl:value-of select="concat($year/ancestor::element-citation/person-group[1]/collab[1], ' et al., ',$year)"/>
         </xsl:when>
         <xsl:when test="(count($year/ancestor::element-citation/person-group[1]/*) ge 2) and $year/ancestor::element-citation/person-group[1]/*[1]/local-name() = 'name'">
            <xsl:value-of select="concat($year/ancestor::element-citation/person-group[1]/name[1]/surname, ' et al., ',$year)"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="'undetermined'"/>
         </xsl:otherwise>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:citation-format2">
      <xsl:param name="year"/>
      <xsl:choose>
         <xsl:when test="(count($year/ancestor::element-citation/person-group[1]/*) = 1) and $year/ancestor::element-citation/person-group[1]/name">
            <xsl:value-of select="concat($year/ancestor::element-citation/person-group[1]/name/surname,' (',$year,')')"/>
         </xsl:when>
         <xsl:when test="(count($year/ancestor::element-citation/person-group[1]/*) = 1) and $year/ancestor::element-citation/person-group[1]/collab">
            <xsl:value-of select="concat($year/ancestor::element-citation/person-group[1]/collab,' (',$year,')')"/>
         </xsl:when>
         <xsl:when test="(count($year/ancestor::element-citation/person-group[1]/*) = 2) and (count($year/ancestor::element-citation/person-group[1]/name) = 1) and $year/ancestor::element-citation/person-group[1]/*[1]/local-name() = 'collab'">
            <xsl:value-of select="concat($year/ancestor::element-citation/person-group[1]/collab,' and ',$year/ancestor::element-citation/person-group[1]/name/surname,' (',$year,')')"/>
         </xsl:when>
         <xsl:when test="(count($year/ancestor::element-citation/person-group[1]/*) = 2) and (count($year/ancestor::element-citation/person-group[1]/name) = 1) and $year/ancestor::element-citation/person-group[1]/*[1]/local-name() = 'name'">
            <xsl:value-of select="concat($year/ancestor::element-citation/person-group[1]/name/surname,' and ',$year/ancestor::element-citation/person-group[1]/collab,' (',$year,')')"/>
         </xsl:when>
         <xsl:when test="(count($year/ancestor::element-citation/person-group[1]/*) = 2) and (count($year/ancestor::element-citation/person-group[1]/name) = 2)">
            <xsl:value-of select="concat($year/ancestor::element-citation/person-group[1]/name[1]/surname,' and ',$year/ancestor::element-citation/person-group[1]/name[2]/surname,' (',$year,')')"/>
         </xsl:when>
         <xsl:when test="(count($year/ancestor::element-citation/person-group[1]/*) = 2) and (count($year/ancestor::element-citation/person-group[1]/collab) = 2)">
            <xsl:value-of select="concat($year/ancestor::element-citation/person-group[1]/collab[1],' and ',e:stripDiacritics($year/ancestor::element-citation/person-group[1]/collab[2]),' (',$year,')')"/>
         </xsl:when>
         <xsl:when test="(count($year/ancestor::element-citation/person-group[1]/*) ge 2) and $year/ancestor::element-citation/person-group[1]/*[1]/local-name() = 'collab'">
            <xsl:value-of select="concat($year/ancestor::element-citation/person-group[1]/collab[1], ' et al. (',$year,')')"/>
         </xsl:when>
         <xsl:when test="(count($year/ancestor::element-citation/person-group[1]/*) ge 2) and $year/ancestor::element-citation/person-group[1]/*[1]/local-name() = 'name'">
            <xsl:value-of select="concat($year/ancestor::element-citation/person-group[1]/name[1]/surname, ' et al. (',$year,')')"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="'undetermined'"/>
         </xsl:otherwise>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron"
                 name="e:isbn-sum"
                 as="xs:string">
      <xsl:param name="s" as="xs:string"/>
      <xsl:choose>
         <xsl:when test="string-length($s) = 10">
            <xsl:variable name="d1" select="number(substring($s,1,1)) * 10"/>
            <xsl:variable name="d2" select="number(substring($s,2,1)) * 9"/>
            <xsl:variable name="d3" select="number(substring($s,3,1)) * 8"/>
            <xsl:variable name="d4" select="number(substring($s,4,1)) * 7"/>
            <xsl:variable name="d5" select="number(substring($s,5,1)) * 6"/>
            <xsl:variable name="d6" select="number(substring($s,6,1)) * 5"/>
            <xsl:variable name="d7" select="number(substring($s,7,1)) * 4"/>
            <xsl:variable name="d8" select="number(substring($s,8,1)) * 3"/>
            <xsl:variable name="d9" select="number(substring($s,9,1)) * 2"/>
            <xsl:variable name="d10" select="number(substring($s,10,1)) * 1"/>
            <xsl:value-of select="number($d1 + $d2 + $d3 + $d4 + $d5 + $d6 + $d7 + $d8 + $d9 + $d10) mod 11"/>
         </xsl:when>
         <xsl:when test="string-length($s) = 13">
            <xsl:variable name="d1" select="number(substring($s,1,1))"/>
            <xsl:variable name="d2" select="number(substring($s,2,1)) * 3"/>
            <xsl:variable name="d3" select="number(substring($s,3,1))"/>
            <xsl:variable name="d4" select="number(substring($s,4,1)) * 3"/>
            <xsl:variable name="d5" select="number(substring($s,5,1))"/>
            <xsl:variable name="d6" select="number(substring($s,6,1)) * 3"/>
            <xsl:variable name="d7" select="number(substring($s,7,1))"/>
            <xsl:variable name="d8" select="number(substring($s,8,1)) * 3"/>
            <xsl:variable name="d9" select="number(substring($s,9,1))"/>
            <xsl:variable name="d10" select="number(substring($s,10,1)) * 3"/>
            <xsl:variable name="d11" select="number(substring($s,11,1))"/>
            <xsl:variable name="d12" select="number(substring($s,12,1)) * 3"/>
            <xsl:variable name="d13" select="number(substring($s,13,1))"/>
            <xsl:value-of select="number($d1 + $d2 + $d3 + $d4 + $d5 + $d6 + $d7 + $d8 + $d9 + $d10 + $d11 + $d12 + $d13) mod 10"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="number('1')"/>
         </xsl:otherwise>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron"
                 name="e:org-conform"
                 as="xs:string">
      <xsl:param name="s" as="xs:string"/>
      <xsl:choose>
         <xsl:when test="matches($s,'b\.\s?subtilis')">
            <xsl:value-of select="'B. subtilis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'bacillus\s?subtilis')">
            <xsl:value-of select="'Bacillus subtilis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'d\.\s?melanogaster')">
            <xsl:value-of select="'D. melanogaster'"/>
         </xsl:when>
         <xsl:when test="matches($s,'drosophila\s?melanogaster')">
            <xsl:value-of select="'Drosophila melanogaster'"/>
         </xsl:when>
         <xsl:when test="matches($s,'e\.\s?coli')">
            <xsl:value-of select="'E. coli'"/>
         </xsl:when>
         <xsl:when test="matches($s,'escherichia\s?coli')">
            <xsl:value-of select="'Escherichia coli'"/>
         </xsl:when>
         <xsl:when test="matches($s,'s\.\s?pombe')">
            <xsl:value-of select="'S. pombe'"/>
         </xsl:when>
         <xsl:when test="matches($s,'schizosaccharomyces\s?pombe')">
            <xsl:value-of select="'Schizosaccharomyces pombe'"/>
         </xsl:when>
         <xsl:when test="matches($s,'s\.\s?cerevisiae')">
            <xsl:value-of select="'S. cerevisiae'"/>
         </xsl:when>
         <xsl:when test="matches($s,'saccharomyces\s?cerevisiae')">
            <xsl:value-of select="'Saccharomyces cerevisiae'"/>
         </xsl:when>
         <xsl:when test="matches($s,'c\.\s?elegans')">
            <xsl:value-of select="'C. elegans'"/>
         </xsl:when>
         <xsl:when test="matches($s,'caenorhabditis\s?elegans')">
            <xsl:value-of select="'Caenorhabditis elegans'"/>
         </xsl:when>
         <xsl:when test="matches($s,'a\.\s?thaliana')">
            <xsl:value-of select="'A. thaliana'"/>
         </xsl:when>
         <xsl:when test="matches($s,'arabidopsis\s?thaliana')">
            <xsl:value-of select="'Arabidopsis thaliana'"/>
         </xsl:when>
         <xsl:when test="matches($s,'m\.\s?thermophila')">
            <xsl:value-of select="'M. thermophila'"/>
         </xsl:when>
         <xsl:when test="matches($s,'myceliophthora\s?thermophila')">
            <xsl:value-of select="'Myceliophthora thermophila'"/>
         </xsl:when>
         <xsl:when test="matches($s,'dictyostelium')">
            <xsl:value-of select="'Dictyostelium'"/>
         </xsl:when>
         <xsl:when test="matches($s,'p\.\s?falciparum')">
            <xsl:value-of select="'P. falciparum'"/>
         </xsl:when>
         <xsl:when test="matches($s,'plasmodium\s?falciparum')">
            <xsl:value-of select="'Plasmodium falciparum'"/>
         </xsl:when>
         <xsl:when test="matches($s,'s\.\s?enterica')">
            <xsl:value-of select="'S. enterica'"/>
         </xsl:when>
         <xsl:when test="matches($s,'salmonella\s?enterica')">
            <xsl:value-of select="'Salmonella enterica'"/>
         </xsl:when>
         <xsl:when test="matches($s,'s\.\s?pyogenes')">
            <xsl:value-of select="'S. pyogenes'"/>
         </xsl:when>
         <xsl:when test="matches($s,'streptococcus\s?pyogenes')">
            <xsl:value-of select="'Streptococcus pyogenes'"/>
         </xsl:when>
         <xsl:when test="matches($s,'p\.\s?dumerilii')">
            <xsl:value-of select="'P. dumerilii'"/>
         </xsl:when>
         <xsl:when test="matches($s,'platynereis\s?dumerilii')">
            <xsl:value-of select="'Platynereis dumerilii'"/>
         </xsl:when>
         <xsl:when test="matches($s,'p\.\s?cynocephalus')">
            <xsl:value-of select="'P. cynocephalus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'papio\s?cynocephalus')">
            <xsl:value-of select="'Papio cynocephalus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'o\.\s?fasciatus')">
            <xsl:value-of select="'O. fasciatus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'oncopeltus\s?fasciatus')">
            <xsl:value-of select="'Oncopeltus fasciatus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'n\.\s?crassa')">
            <xsl:value-of select="'N. crassa'"/>
         </xsl:when>
         <xsl:when test="matches($s,'neurospora\s?crassa')">
            <xsl:value-of select="'Neurospora crassa'"/>
         </xsl:when>
         <xsl:when test="matches($s,'c\.\s?intestinalis')">
            <xsl:value-of select="'C. intestinalis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'ciona\s?intestinalis')">
            <xsl:value-of select="'Ciona intestinalis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'e\.\s?cuniculi')">
            <xsl:value-of select="'E. cuniculi'"/>
         </xsl:when>
         <xsl:when test="matches($s,'encephalitozoon\s?cuniculi')">
            <xsl:value-of select="'Encephalitozoon cuniculi'"/>
         </xsl:when>
         <xsl:when test="matches($s,'h\.\s?salinarum')">
            <xsl:value-of select="'H. salinarum'"/>
         </xsl:when>
         <xsl:when test="matches($s,'halobacterium\s?salinarum')">
            <xsl:value-of select="'Halobacterium salinarum'"/>
         </xsl:when>
         <xsl:when test="matches($s,'s\.\s?solfataricus')">
            <xsl:value-of select="'S. solfataricus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'sulfolobus\s?solfataricus')">
            <xsl:value-of select="'Sulfolobus solfataricus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'s\.\s?mediterranea')">
            <xsl:value-of select="'S. mediterranea'"/>
         </xsl:when>
         <xsl:when test="matches($s,'schmidtea\s?mediterranea')">
            <xsl:value-of select="'Schmidtea mediterranea'"/>
         </xsl:when>
         <xsl:when test="matches($s,'s\.\s?rosetta')">
            <xsl:value-of select="'S. rosetta'"/>
         </xsl:when>
         <xsl:when test="matches($s,'salpingoeca\s?rosetta')">
            <xsl:value-of select="'Salpingoeca rosetta'"/>
         </xsl:when>
         <xsl:when test="matches($s,'n\.\s?vectensis')">
            <xsl:value-of select="'N. vectensis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'nematostella\s?vectensis')">
            <xsl:value-of select="'Nematostella vectensis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'s\.\s?aureus')">
            <xsl:value-of select="'S. aureus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'staphylococcus\s?aureus')">
            <xsl:value-of select="'Staphylococcus aureus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'a\.\s?thaliana')">
            <xsl:value-of select="'A. thaliana'"/>
         </xsl:when>
         <xsl:when test="matches($s,'arabidopsis\s?thaliana')">
            <xsl:value-of select="'Arabidopsis thaliana'"/>
         </xsl:when>
         <xsl:when test="matches($s,'v\.\s?cholerae')">
            <xsl:value-of select="'V. cholerae'"/>
         </xsl:when>
         <xsl:when test="matches($s,'vibrio\s?cholerae')">
            <xsl:value-of select="'Vibrio cholerae'"/>
         </xsl:when>
         <xsl:when test="matches($s,'t\.\s?thermophila')">
            <xsl:value-of select="'T. thermophila'"/>
         </xsl:when>
         <xsl:when test="matches($s,'tetrahymena\s?thermophila')">
            <xsl:value-of select="'Tetrahymena thermophila'"/>
         </xsl:when>
         <xsl:when test="matches($s,'c\.\s?reinhardtii')">
            <xsl:value-of select="'C. reinhardtii'"/>
         </xsl:when>
         <xsl:when test="matches($s,'chlamydomonas\s?reinhardtii')">
            <xsl:value-of select="'Chlamydomonas reinhardtii'"/>
         </xsl:when>
         <xsl:when test="matches($s,'n\.\s?attenuata')">
            <xsl:value-of select="'N. attenuata'"/>
         </xsl:when>
         <xsl:when test="matches($s,'nicotiana\s?attenuata')">
            <xsl:value-of select="'Nicotiana attenuata'"/>
         </xsl:when>
         <xsl:when test="matches($s,'e\.\s?carotovora')">
            <xsl:value-of select="'E. carotovora'"/>
         </xsl:when>
         <xsl:when test="matches($s,'erwinia\s?carotovora')">
            <xsl:value-of select="'Erwinia carotovora'"/>
         </xsl:when>
         <xsl:when test="matches($s,'h\.\s?sapiens')">
            <xsl:value-of select="'H. sapiens'"/>
         </xsl:when>
         <xsl:when test="matches($s,'homo\s?sapiens')">
            <xsl:value-of select="'Homo sapiens'"/>
         </xsl:when>
         <xsl:when test="matches($s,'e\.\s?faecalis')">
            <xsl:value-of select="'E. faecalis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'enterococcus\s?faecalis')">
            <xsl:value-of select="'Enterococcus faecalis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'c\.\s?trachomatis')">
            <xsl:value-of select="'C. trachomatis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'chlamydia\s?trachomatis')">
            <xsl:value-of select="'Chlamydia trachomatis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'x\.\s?laevis')">
            <xsl:value-of select="'X. laevis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'xenopus\s?laevis')">
            <xsl:value-of select="'Xenopus laevis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'x\.\s?tropicalis')">
            <xsl:value-of select="'X. tropicalis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'xenopus\s?tropicalis')">
            <xsl:value-of select="'Xenopus tropicalis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'m\.\s?musculus')">
            <xsl:value-of select="'M. musculus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'mus\s?musculus')">
            <xsl:value-of select="'Mus musculus'"/>
         </xsl:when>
         <xsl:when test="matches($s,'d\.\s?immigrans')">
            <xsl:value-of select="'D. immigrans'"/>
         </xsl:when>
         <xsl:when test="matches($s,'drosophila\s?immigrans')">
            <xsl:value-of select="'Drosophila immigrans'"/>
         </xsl:when>
         <xsl:when test="matches($s,'d\.\s?subobscura')">
            <xsl:value-of select="'D. subobscura'"/>
         </xsl:when>
         <xsl:when test="matches($s,'drosophila\s?subobscura')">
            <xsl:value-of select="'Drosophila subobscura'"/>
         </xsl:when>
         <xsl:when test="matches($s,'d\.\s?affinis')">
            <xsl:value-of select="'D. affinis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'drosophila\s?affinis')">
            <xsl:value-of select="'Drosophila affinis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'d\.\s?obscura')">
            <xsl:value-of select="'D. obscura'"/>
         </xsl:when>
         <xsl:when test="matches($s,'drosophila\s?obscura')">
            <xsl:value-of select="'Drosophila obscura'"/>
         </xsl:when>
         <xsl:when test="matches($s,'f\.\s?tularensis')">
            <xsl:value-of select="'F. tularensis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'francisella\s?tularensis')">
            <xsl:value-of select="'Francisella tularensis'"/>
         </xsl:when>
         <xsl:when test="matches($s,'d\.\s?rerio')">
            <xsl:value-of select="'D. rerio'"/>
         </xsl:when>
         <xsl:when test="matches($s,'danio\s?rerio')">
            <xsl:value-of select="'Danio rerio'"/>
         </xsl:when>
         <xsl:when test="matches($s,'drosophila')">
            <xsl:value-of select="'Drosophila'"/>
         </xsl:when>
         <xsl:when test="matches($s,'xenopus')">
            <xsl:value-of select="'Xenopus'"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="'undefined'"/>
         </xsl:otherwise>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron"
                 name="e:rrid-text-count"
                 as="xs:string">
      <xsl:param name="s" as="xs:string"/>
      <xsl:variable name="uc" select="upper-case($s)"/>
      <xsl:choose>
         <xsl:when test="matches($uc,'RRID:')">
            <xsl:choose>
               <xsl:when test="matches(substring-after($uc,'RRID:'),'RRID:')">
                  <xsl:choose>
                     <xsl:when test="matches(substring-after(substring-after($uc,'RRID:'),'RRID:'),'RRID:')">
                        <xsl:choose>
                           <xsl:when test="matches(substring-after(substring-after(substring-after($uc,'RRID:'),'RRID:'),'RRID:'),'RRID:')">
                              <xsl:choose>
                                 <xsl:when test="matches(substring-after(substring-after(substring-after(substring-after($uc,'RRID:'),'RRID:'),'RRID:'),'RRID:'),'RRID:')">
                                    <xsl:value-of select="number('5')"/>
                                 </xsl:when>
                                 <xsl:otherwise>
                                    <xsl:value-of select="number('4')"/>
                                 </xsl:otherwise>
                              </xsl:choose>
                           </xsl:when>
                           <xsl:otherwise>
                              <xsl:value-of select="number('3')"/>
                           </xsl:otherwise>
                        </xsl:choose>
                     </xsl:when>
                     <xsl:otherwise>
                        <xsl:value-of select="number('2')"/>
                     </xsl:otherwise>
                  </xsl:choose>
               </xsl:when>
               <xsl:otherwise>
                  <xsl:value-of select="number('1')"/>
               </xsl:otherwise>
            </xsl:choose>
         </xsl:when>
         <xsl:otherwise>
            <xsl:value-of select="number('0')"/>
         </xsl:otherwise>
      </xsl:choose>
  </xsl:function>
   <xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="e:code-check">
      <xsl:param name="s" as="xs:string"/>
      <xsl:element name="code">
         <xsl:if test="matches($s,'[Gg]ithub')">
            <xsl:element name="match">
               <xsl:value-of select="'github '"/>
            </xsl:element>
         </xsl:if>
         <xsl:if test="matches($s,'[Gg]itlab')">
            <xsl:element name="match">
               <xsl:value-of select="'gitlab '"/>
            </xsl:element>
         </xsl:if>
         <xsl:if test="matches($s,'[Cc]ode[Pp]lex')">
            <xsl:element name="match">
               <xsl:value-of select="'codeplex '"/>
            </xsl:element>
         </xsl:if>
         <xsl:if test="matches($s,'[Ss]ource[Ff]orge')">
            <xsl:element name="match">
               <xsl:value-of select="'sourceforge '"/>
            </xsl:element>
         </xsl:if>
         <xsl:if test="matches($s,'[Bb]it[Bb]ucket')">
            <xsl:element name="match">
               <xsl:value-of select="'bitbucket '"/>
            </xsl:element>
         </xsl:if>
         <xsl:if test="matches($s,'[Aa]ssembla ')">
            <xsl:element name="match">
               <xsl:value-of select="'assembla '"/>
            </xsl:element>
         </xsl:if>
      </xsl:element>
  </xsl:function>

   <!--DEFAULT RULES-->


   <!--MODE: SCHEMATRON-SELECT-FULL-PATH-->
   <!--This mode can be used to generate an ugly though full XPath for locators-->
   <xsl:template match="*" mode="schematron-select-full-path">
      <xsl:apply-templates select="." mode="schematron-get-full-path"/>
   </xsl:template>

   <!--MODE: SCHEMATRON-FULL-PATH-->
   <!--This mode can be used to generate an ugly though full XPath for locators-->
   <xsl:template match="*" mode="schematron-get-full-path">
      <xsl:apply-templates select="parent::*" mode="schematron-get-full-path"/>
      <xsl:text>/</xsl:text>
      <xsl:choose>
         <xsl:when test="namespace-uri()=''">
            <xsl:value-of select="name()"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:text>*:</xsl:text>
            <xsl:value-of select="local-name()"/>
            <xsl:text>[namespace-uri()='</xsl:text>
            <xsl:value-of select="namespace-uri()"/>
            <xsl:text>']</xsl:text>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:variable name="preceding"
                    select="count(preceding-sibling::*[local-name()=local-name(current())                                   and namespace-uri() = namespace-uri(current())])"/>
      <xsl:text>[</xsl:text>
      <xsl:value-of select="1+ $preceding"/>
      <xsl:text>]</xsl:text>
   </xsl:template>
   <xsl:template match="@*" mode="schematron-get-full-path">
      <xsl:apply-templates select="parent::*" mode="schematron-get-full-path"/>
      <xsl:text>/</xsl:text>
      <xsl:choose>
         <xsl:when test="namespace-uri()=''">@<xsl:value-of select="name()"/>
         </xsl:when>
         <xsl:otherwise>
            <xsl:text>@*[local-name()='</xsl:text>
            <xsl:value-of select="local-name()"/>
            <xsl:text>' and namespace-uri()='</xsl:text>
            <xsl:value-of select="namespace-uri()"/>
            <xsl:text>']</xsl:text>
         </xsl:otherwise>
      </xsl:choose>
   </xsl:template>

   <!--MODE: SCHEMATRON-FULL-PATH-2-->
   <!--This mode can be used to generate prefixed XPath for humans-->
   <xsl:template match="node() | @*" mode="schematron-get-full-path-2">
      <xsl:for-each select="ancestor-or-self::*">
         <xsl:text>/</xsl:text>
         <xsl:value-of select="name(.)"/>
         <xsl:if test="preceding-sibling::*[name(.)=name(current())]">
            <xsl:text>[</xsl:text>
            <xsl:value-of select="count(preceding-sibling::*[name(.)=name(current())])+1"/>
            <xsl:text>]</xsl:text>
         </xsl:if>
      </xsl:for-each>
      <xsl:if test="not(self::*)">
         <xsl:text/>/@<xsl:value-of select="name(.)"/>
      </xsl:if>
   </xsl:template>
   <!--MODE: SCHEMATRON-FULL-PATH-3-->
   <!--This mode can be used to generate prefixed XPath for humans 
	(Top-level element has index)-->
   <xsl:template match="node() | @*" mode="schematron-get-full-path-3">
      <xsl:for-each select="ancestor-or-self::*">
         <xsl:text>/</xsl:text>
         <xsl:value-of select="name(.)"/>
         <xsl:if test="parent::*">
            <xsl:text>[</xsl:text>
            <xsl:value-of select="count(preceding-sibling::*[name(.)=name(current())])+1"/>
            <xsl:text>]</xsl:text>
         </xsl:if>
      </xsl:for-each>
      <xsl:if test="not(self::*)">
         <xsl:text/>/@<xsl:value-of select="name(.)"/>
      </xsl:if>
   </xsl:template>

   <!--MODE: GENERATE-ID-FROM-PATH -->
   <xsl:template match="/" mode="generate-id-from-path"/>
   <xsl:template match="text()" mode="generate-id-from-path">
      <xsl:apply-templates select="parent::*" mode="generate-id-from-path"/>
      <xsl:value-of select="concat('.text-', 1+count(preceding-sibling::text()), '-')"/>
   </xsl:template>
   <xsl:template match="comment()" mode="generate-id-from-path">
      <xsl:apply-templates select="parent::*" mode="generate-id-from-path"/>
      <xsl:value-of select="concat('.comment-', 1+count(preceding-sibling::comment()), '-')"/>
   </xsl:template>
   <xsl:template match="processing-instruction()" mode="generate-id-from-path">
      <xsl:apply-templates select="parent::*" mode="generate-id-from-path"/>
      <xsl:value-of select="concat('.processing-instruction-', 1+count(preceding-sibling::processing-instruction()), '-')"/>
   </xsl:template>
   <xsl:template match="@*" mode="generate-id-from-path">
      <xsl:apply-templates select="parent::*" mode="generate-id-from-path"/>
      <xsl:value-of select="concat('.@', name())"/>
   </xsl:template>
   <xsl:template match="*" mode="generate-id-from-path" priority="-0.5">
      <xsl:apply-templates select="parent::*" mode="generate-id-from-path"/>
      <xsl:text>.</xsl:text>
      <xsl:value-of select="concat('.',name(),'-',1+count(preceding-sibling::*[name()=name(current())]),'-')"/>
   </xsl:template>

   <!--MODE: GENERATE-ID-2 -->
   <xsl:template match="/" mode="generate-id-2">U</xsl:template>
   <xsl:template match="*" mode="generate-id-2" priority="2">
      <xsl:text>U</xsl:text>
      <xsl:number level="multiple" count="*"/>
   </xsl:template>
   <xsl:template match="node()" mode="generate-id-2">
      <xsl:text>U.</xsl:text>
      <xsl:number level="multiple" count="*"/>
      <xsl:text>n</xsl:text>
      <xsl:number count="node()"/>
   </xsl:template>
   <xsl:template match="@*" mode="generate-id-2">
      <xsl:text>U.</xsl:text>
      <xsl:number level="multiple" count="*"/>
      <xsl:text>_</xsl:text>
      <xsl:value-of select="string-length(local-name(.))"/>
      <xsl:text>_</xsl:text>
      <xsl:value-of select="translate(name(),':','.')"/>
   </xsl:template>
   <!--Strip characters-->
   <xsl:template match="text()" priority="-1"/>

   <!--SCHEMA SETUP-->
   <xsl:template match="/">
      <svrl:schematron-output xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                              title="eLife Schematron"
                              schemaVersion="">
         <xsl:comment>
            <xsl:value-of select="$archiveDirParameter"/>   
		 <xsl:value-of select="$archiveNameParameter"/>  
		 <xsl:value-of select="$fileNameParameter"/>  
		 <xsl:value-of select="$fileDirParameter"/>
         </xsl:comment>
         <svrl:ns-prefix-in-attribute-values uri="http://www.niso.org/schemas/ali/1.0/" prefix="ali"/>
         <svrl:ns-prefix-in-attribute-values uri="http://www.w3.org/XML/1998/namespace" prefix="xml"/>
         <svrl:ns-prefix-in-attribute-values uri="http://www.w3.org/1999/xlink" prefix="xlink"/>
         <svrl:ns-prefix-in-attribute-values uri="http://www.w3.org/2001/XInclude" prefix="xi"/>
         <svrl:ns-prefix-in-attribute-values uri="http://www.w3.org/1998/Math/MathML" prefix="mml"/>
         <svrl:ns-prefix-in-attribute-values uri="http://saxon.sf.net/" prefix="saxon"/>
         <svrl:ns-prefix-in-attribute-values uri="http://purl.org/dc/terms/" prefix="dc"/>
         <svrl:ns-prefix-in-attribute-values uri="http://www.w3.org/2001/XMLSchema" prefix="xs"/>
         <svrl:ns-prefix-in-attribute-values uri="https://elifesciences.org/namespace" prefix="e"/>
         <svrl:ns-prefix-in-attribute-values uri="java.io.File" prefix="file"/>
         <svrl:ns-prefix-in-attribute-values uri="http://www.java.com/" prefix="java"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">article-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">article-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M33"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">research-article-pattern</xsl:attribute>
            <xsl:attribute name="name">research-article-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M34"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">test-front-pattern</xsl:attribute>
            <xsl:attribute name="name">test-front-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M35"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">test-journal-meta-pattern</xsl:attribute>
            <xsl:attribute name="name">test-journal-meta-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M36"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">test-article-metadata-pattern</xsl:attribute>
            <xsl:attribute name="name">test-article-metadata-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M37"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">test-research-article-metadata-pattern</xsl:attribute>
            <xsl:attribute name="name">test-research-article-metadata-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M38"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">test-article-categories-pattern</xsl:attribute>
            <xsl:attribute name="name">test-article-categories-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M39"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">disp-channel-checks-pattern</xsl:attribute>
            <xsl:attribute name="name">disp-channel-checks-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M40"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">MSA-checks-pattern</xsl:attribute>
            <xsl:attribute name="name">MSA-checks-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M41"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">head-subj-checks-pattern</xsl:attribute>
            <xsl:attribute name="name">head-subj-checks-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M42"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">test-title-group-pattern</xsl:attribute>
            <xsl:attribute name="name">test-title-group-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M43"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">test-contrib-group-pattern</xsl:attribute>
            <xsl:attribute name="name">test-contrib-group-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M44"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">name-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">name-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M45"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">surname-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">surname-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M46"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">given-names-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">given-names-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M47"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">suffix-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">suffix-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M48"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">name-child-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">name-child-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M49"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">contrib-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">contrib-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M50"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">author-children-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">author-children-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M51"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">orcid-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">orcid-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M52"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">email-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">email-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M53"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">history-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">history-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M54"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">date-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">date-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M55"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">pub-date-tests-1-pattern</xsl:attribute>
            <xsl:attribute name="name">pub-date-tests-1-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M56"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">pub-date-tests-2-pattern</xsl:attribute>
            <xsl:attribute name="name">pub-date-tests-2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M57"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">front-permissions-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">front-permissions-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M58"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">license-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">license-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M59"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">abstract-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">abstract-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M60"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">aff-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">aff-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M61"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">funding-group-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">funding-group-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M62"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">award-group-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">award-group-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M63"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">award-id-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">award-id-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M64"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">institution-wrap-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">institution-wrap-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M65"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">kwd-group-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">kwd-group-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M66"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ro-kwd-group-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ro-kwd-group-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M67"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ro-kwd-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ro-kwd-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M68"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">custom-meta-group-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">custom-meta-group-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M69"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">custom-meta-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">custom-meta-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M70"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">meta-value-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">meta-value-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M71"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">meta-value-child-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">meta-value-child-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M72"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elocation-id-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">elocation-id-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M73"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">volume-test-pattern</xsl:attribute>
            <xsl:attribute name="name">volume-test-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M74"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">equal-author-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">equal-author-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M75"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">object-id-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">object-id-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M76"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">p-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">p-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M77"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">p-child-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">p-child-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M78"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">xref-target-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">xref-target-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M79"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ext-link-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ext-link-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M80"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M81"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ar-fig-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ar-fig-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M82"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">graphic-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">graphic-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M83"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">media-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">media-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M84"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">video-test-pattern</xsl:attribute>
            <xsl:attribute name="name">video-test-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M85"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">supplementary-material-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">supplementary-material-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M86"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">source-data-specific-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">source-data-specific-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M87"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">disp-formula-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">disp-formula-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M88"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">inline-formula-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">inline-formula-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M89"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">math-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">math-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M90"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">table-wrap-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">table-wrap-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M91"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">body-table-label-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">body-table-label-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M92"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">app-table-label-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">app-table-label-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M93"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">table-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">table-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M94"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">tbody-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">tbody-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M95"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">thead-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">thead-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M96"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">tr-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">tr-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M97"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">td-child-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">td-child-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M98"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">th-child-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">th-child-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M99"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fn-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">fn-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M100"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">list-item-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">list-item-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M101"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">general-video-pattern</xsl:attribute>
            <xsl:attribute name="name">general-video-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M102"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">body-video-specific-pattern</xsl:attribute>
            <xsl:attribute name="name">body-video-specific-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M103"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">body-table-pos-conformance-pattern</xsl:attribute>
            <xsl:attribute name="name">body-table-pos-conformance-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M104"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">app-table-pos-conformance-pattern</xsl:attribute>
            <xsl:attribute name="name">app-table-pos-conformance-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M105"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-specific-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-specific-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M106"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-label-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-label-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M107"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-sup-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-sup-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M108"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">rep-fig-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">rep-fig-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M109"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">box-fig-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">box-fig-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M110"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">app-fig-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">app-fig-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M111"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">app-fig-sup-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">app-fig-sup-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M112"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ra-body-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ra-body-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M113"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">top-level-sec-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">top-level-sec-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M114"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">lower-level-sec-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">lower-level-sec-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M115"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">article-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">article-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M116"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">sec-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">sec-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M117"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M118"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">supplementary-material-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">supplementary-material-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M119"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">video-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">video-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M120"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ack-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ack-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M121"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ack-content-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ack-content-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M122"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ref-list-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ref-list-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M123"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">app-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">app-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M124"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">comp-int-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">comp-int-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M125"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">auth-cont-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">auth-cont-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M126"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ethics-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ethics-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M127"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">dec-letter-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">dec-letter-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M128"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">reply-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">reply-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M129"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">author-contrib-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">author-contrib-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M130"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">award-group-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">award-group-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M131"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M132"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-sup-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-sup-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M133"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">box-fig-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">box-fig-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M134"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">app-fig-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">app-fig-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M135"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">app-fig-sup-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">app-fig-sup-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M136"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">rep-fig-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">rep-fig-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M137"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">rep-fig-sup-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">rep-fig-sup-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M138"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">related-articles-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">related-articles-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M139"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">aff-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">aff-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M140"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fn-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">fn-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M141"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">disp-formula-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">disp-formula-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M142"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">mml-math-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">mml-math-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M143"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">app-table-wrap-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">app-table-wrap-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M144"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">resp-table-wrap-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">resp-table-wrap-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M145"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">table-wrap-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">table-wrap-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M146"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">body-top-level-sec-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">body-top-level-sec-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M147"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">back-top-level-sec-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">back-top-level-sec-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M148"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">low-level-sec-ids-pattern</xsl:attribute>
            <xsl:attribute name="name">low-level-sec-ids-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M149"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">sec-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">sec-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M150"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">back-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">back-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M151"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">data-content-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">data-content-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M152"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ack-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ack-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M153"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ack-child-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ack-child-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M154"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">app-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">app-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M155"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">additional-info-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">additional-info-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M156"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">comp-int-fn-group-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">comp-int-fn-group-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M157"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">comp-int-fn-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">comp-int-fn-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M158"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">auth-cont-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">auth-cont-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M159"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">auth-cont-fn-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">auth-cont-fn-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M160"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ethics-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ethics-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M161"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ethics-fn-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ethics-fn-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M162"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">dec-letter-reply-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">dec-letter-reply-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M163"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">dec-letter-front-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">dec-letter-front-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M164"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">dec-letter-body-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">dec-letter-body-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M165"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">reply-front-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">reply-front-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M166"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">reply-body-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">reply-body-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M167"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">reply-disp-quote-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">reply-disp-quote-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M168"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">research-advance-test-pattern</xsl:attribute>
            <xsl:attribute name="name">research-advance-test-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M169"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">insight-test-pattern</xsl:attribute>
            <xsl:attribute name="name">insight-test-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M170"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">related-articles-conformance-pattern</xsl:attribute>
            <xsl:attribute name="name">related-articles-conformance-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M171"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-general-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-general-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M172"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-gen-name-3-1-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-gen-name-3-1-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M173"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-gen-name-3-2-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-gen-name-3-2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M174"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-gen-name-4-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-gen-name-4-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M175"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-year-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-year-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M176"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ref-pattern</xsl:attribute>
            <xsl:attribute name="name">ref-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M177"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">xref-pattern</xsl:attribute>
            <xsl:attribute name="name">xref-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M178"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M179"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-journal-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-journal-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M180"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-journal-article-title-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-journal-article-title-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M181"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-journal-volume-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-journal-volume-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M182"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-journal-fpage-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-journal-fpage-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M183"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-journal-elocation-id-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-journal-elocation-id-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M184"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-journal-comment-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-journal-comment-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M185"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-journal-pub-id-pmid-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-journal-pub-id-pmid-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M186"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-journal-pub-id-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-journal-pub-id-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M187"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-book-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-book-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M188"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-book-person-group-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-book-person-group-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M189"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-book-chapter-title-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-book-chapter-title-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M190"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-book-publisher-name-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-book-publisher-name-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M191"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-book-edition-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-book-edition-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M192"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-book-pub-id-pmid-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-book-pub-id-pmid-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M193"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-book-pub-id-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-book-pub-id-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M194"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-data-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-data-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M195"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-data-pub-id-doi-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-data-pub-id-doi-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M196"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-data-pub-id-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-data-pub-id-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M197"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-data-ext-link-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-data-ext-link-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M198"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-patent-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-patent-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M199"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-patent-ext-link-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-patent-ext-link-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M200"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-patent-article-title-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-patent-article-title-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M201"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-patent-source-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-patent-source-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M202"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-patent-patent-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-patent-patent-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M203"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-software-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-software-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M204"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-software-data-title-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-software-data-title-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M205"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-software-ext-link-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-software-ext-link-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M206"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-preprint-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-preprint-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M207"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-preprint-person-group-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-preprint-person-group-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M208"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-preprint-pub-id-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-preprint-pub-id-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M209"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-preprint-ext-link-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-preprint-ext-link-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M210"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-preprint-article-title-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-preprint-article-title-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M211"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-preprint-source-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-preprint-source-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M212"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-web-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-web-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M213"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-web-person-group-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-web-person-group-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M214"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-web-ext-link-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-web-ext-link-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M215"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-web-article-title-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-web-article-title-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M216"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-web-source-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-web-source-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M217"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-web-date-in-citation-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-web-date-in-citation-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M218"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-report-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-report-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M219"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-report-preson-group-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-report-preson-group-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M220"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-report-source-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-report-source-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M221"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-report-publisher-name-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-report-publisher-name-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M222"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-report-pub-id-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-report-pub-id-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M223"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-report-ext-link-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-report-ext-link-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M224"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-confproc-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-confproc-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M225"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-confproc-preson-group-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-confproc-preson-group-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M226"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-confproc-source-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-confproc-source-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M227"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-confproc-article-title-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-confproc-article-title-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M228"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-confproc-conf-name-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-confproc-conf-name-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M229"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-confproc-conf-loc-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-confproc-conf-loc-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M230"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-confproc-fpage-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-confproc-fpage-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M231"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-confproc-pub-id-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-confproc-pub-id-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M232"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-confproc-ext-link-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-confproc-ext-link-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M233"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-thesis-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-thesis-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M234"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-thesis-preson-group-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-thesis-preson-group-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M235"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-thesis-article-title-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-thesis-article-title-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M236"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-thesis-publisher-name-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-thesis-publisher-name-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M237"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-thesis-publisher-loc-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-thesis-publisher-loc-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M238"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-thesis-pub-id-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-thesis-pub-id-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M239"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-thesis-ext-link-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-thesis-ext-link-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M240"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-periodical-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-periodical-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M241"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-periodical-year-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-periodical-year-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M242"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-periodical-article-title-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-periodical-article-title-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M243"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-periodical-volume-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-periodical-volume-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M244"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-periodical-fpage-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-periodical-fpage-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M245"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-periodical-string-date-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-periodical-string-date-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M246"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-periodical-month-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-periodical-month-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M247"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">elem-citation-periodical-day-pattern</xsl:attribute>
            <xsl:attribute name="name">elem-citation-periodical-day-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M248"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">pub-id-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">pub-id-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M249"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">feature-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">feature-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M250"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">feature-abstract-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">feature-abstract-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M251"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">feature-subj-tests-1-pattern</xsl:attribute>
            <xsl:attribute name="name">feature-subj-tests-1-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M252"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">feature-subj-tests-2-pattern</xsl:attribute>
            <xsl:attribute name="name">feature-subj-tests-2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M253"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">feature-article-category-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">feature-article-category-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M254"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">feature-author-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">feature-author-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M255"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">feature-bio-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">feature-bio-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M256"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">correction-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">correction-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M257"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">retraction-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">retraction-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M258"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">final-gene-primer-sequence-pattern</xsl:attribute>
            <xsl:attribute name="name">final-gene-primer-sequence-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M259"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">rrid-org-code-pattern</xsl:attribute>
            <xsl:attribute name="name">rrid-org-code-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M260"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">duplicate-ref-pattern</xsl:attribute>
            <xsl:attribute name="name">duplicate-ref-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M261"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ref-xref-conformance-pattern</xsl:attribute>
            <xsl:attribute name="name">ref-xref-conformance-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M262"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">unlinked-ref-cite-pattern</xsl:attribute>
            <xsl:attribute name="name">unlinked-ref-cite-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M263"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">missing-ref-cited-pattern</xsl:attribute>
            <xsl:attribute name="name">missing-ref-cited-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M264"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">vid-xref-conformance-pattern</xsl:attribute>
            <xsl:attribute name="name">vid-xref-conformance-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M265"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-xref-conformance-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-xref-conformance-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M266"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">table-xref-conformance-pattern</xsl:attribute>
            <xsl:attribute name="name">table-xref-conformance-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M267"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">supp-file-xref-conformance-pattern</xsl:attribute>
            <xsl:attribute name="name">supp-file-xref-conformance-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M268"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">equation-xref-conformance-pattern</xsl:attribute>
            <xsl:attribute name="name">equation-xref-conformance-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M269"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">org-ref-article-book-title-pattern</xsl:attribute>
            <xsl:attribute name="name">org-ref-article-book-title-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M270"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">org-title-kwd-pattern</xsl:attribute>
            <xsl:attribute name="name">org-title-kwd-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M271"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">unallowed-symbol-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">unallowed-symbol-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M272"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">unallowed-symbol-tests-sup-pattern</xsl:attribute>
            <xsl:attribute name="name">unallowed-symbol-tests-sup-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M273"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">country-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">country-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M274"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">city-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">city-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M275"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">institution-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">institution-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M276"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">department-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">department-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M277"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">journal-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">journal-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M278"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ref-article-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ref-article-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M279"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">journal-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">journal-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M280"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">preprint-title-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">preprint-title-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M281"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">website-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">website-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M282"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">software-ref-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">software-ref-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M283"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">publisher-name-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">publisher-name-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M284"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ref-name-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">ref-name-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M285"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">isbn-conformity-pattern</xsl:attribute>
            <xsl:attribute name="name">isbn-conformity-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M286"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">isbn-conformity-2-pattern</xsl:attribute>
            <xsl:attribute name="name">isbn-conformity-2-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M287"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">data-availability-statement-pattern</xsl:attribute>
            <xsl:attribute name="name">data-availability-statement-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M288"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ethics-info-pattern</xsl:attribute>
            <xsl:attribute name="name">ethics-info-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M289"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">sec-title-conformity-pattern</xsl:attribute>
            <xsl:attribute name="name">sec-title-conformity-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M290"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">abstract-house-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">abstract-house-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M291"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">KRT-xref-tests-pattern</xsl:attribute>
            <xsl:attribute name="name">KRT-xref-tests-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M292"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">KRT-check-pattern</xsl:attribute>
            <xsl:attribute name="name">KRT-check-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M293"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">KRT-td-checks-pattern</xsl:attribute>
            <xsl:attribute name="name">KRT-td-checks-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M294"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">colour-table-pattern</xsl:attribute>
            <xsl:attribute name="name">colour-table-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M295"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">colour-named-content-pattern</xsl:attribute>
            <xsl:attribute name="name">colour-named-content-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M296"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">colour-styled-content-pattern</xsl:attribute>
            <xsl:attribute name="name">colour-styled-content-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M297"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">p-punctuation-pattern</xsl:attribute>
            <xsl:attribute name="name">p-punctuation-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M298"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">italic-house-style-pattern</xsl:attribute>
            <xsl:attribute name="name">italic-house-style-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M299"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">list-house-style-pattern</xsl:attribute>
            <xsl:attribute name="name">list-house-style-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M300"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">pubmed-link-pattern</xsl:attribute>
            <xsl:attribute name="name">pubmed-link-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M301"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ref-link-mandate-pattern</xsl:attribute>
            <xsl:attribute name="name">ref-link-mandate-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M302"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">fig-permissions-check-pattern</xsl:attribute>
            <xsl:attribute name="name">fig-permissions-check-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M303"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">xref-formatting-pattern</xsl:attribute>
            <xsl:attribute name="name">xref-formatting-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M304"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">ref-xref-formatting-pattern</xsl:attribute>
            <xsl:attribute name="name">ref-xref-formatting-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M305"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">code-fork-pattern</xsl:attribute>
            <xsl:attribute name="name">code-fork-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M306"/>
         <svrl:active-pattern>
            <xsl:attribute name="document">
               <xsl:value-of select="document-uri(/)"/>
            </xsl:attribute>
            <xsl:attribute name="id">auth-kwd-style-pattern</xsl:attribute>
            <xsl:attribute name="name">auth-kwd-style-pattern</xsl:attribute>
            <xsl:apply-templates/>
         </svrl:active-pattern>
         <xsl:apply-templates select="/" mode="M307"/>
      </svrl:schematron-output>
   </xsl:template>

   <!--SCHEMATRON PATTERNS-->
   <svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl">eLife Schematron</svrl:text>
   <xsl:param name="allowed-article-types"
              select="('article-commentary', 'correction', 'discussion', 'editorial', 'research-article', 'retraction','review-article')"/>
   <xsl:param name="allowed-disp-subj"
              select="('Research Article', 'Short Report', 'Tools and Resources', 'Research Advance', 'Registered Report', 'Replication Study', 'Research Communication', 'Feature article', 'Insight', 'Editorial', 'Correction', 'Retraction', 'Scientific Correspondence', 'Review Article')"/>
   <xsl:param name="disp-channel"
              select="//article-meta/article-categories/subj-group[@subj-group-type='display-channel']/subject"/>
   <xsl:param name="features-subj"
              select="('Feature article', 'Insight', 'Editorial')"/>
   <xsl:param name="features-article-types"
              select="('article-commentary','editorial','discussion')"/>
   <xsl:param name="MSAs"
              select="('Biochemistry and Chemical Biology', 'Cancer Biology', 'Cell Biology', 'Chromosomes and Gene Expression', 'Computational and Systems Biology', 'Developmental Biology', 'Ecology', 'Epidemiology and Global Health', 'Evolutionary Biology', 'Genetics and Genomics', 'Human Biology and Medicine', 'Immunology and Inflammation', 'Microbiology and Infectious Disease', 'Neuroscience', 'Physics of Living Systems', 'Plant Biology', 'Stem Cells and Regenerative Medicine', 'Structural Biology and Molecular Biophysics')"/>
   <xsl:param name="org-regex"
              select="'b\.\s?subtilis|bacillus\s?subtilis|d\.\s?melanogaster|drosophila\s?melanogaster|e\.\s?coli|escherichia\s?coli|s\.\s?pombe|schizosaccharomyces\s?pombe|s\.\s?cerevisiae|saccharomyces\s?cerevisiae|c\.\s?elegans|caenorhabditis\s?elegans|a\.\s?thaliana|arabidopsis\s?thaliana|m\.\s?thermophila|myceliophthora\s?thermophila|dictyostelium|p\.\s?falciparum|plasmodium\s?falciparum|s\.\s?enterica|salmonella\s?enterica|s\.\s?pyogenes|streptococcus\s?pyogenes|p\.\s?dumerilii|platynereis\s?dumerilii|p\.\s?cynocephalus|papio\s?cynocephalus|o\.\s?fasciatus|oncopeltus\s?fasciatus|n\.\s?crassa|neurospora\s?crassa|c\.\s?intestinalis|ciona\s?intestinalis|e\.\s?cuniculi|encephalitozoon\s?cuniculi|h\.\s?salinarum|halobacterium\s?salinarum|s\.\s?solfataricus|sulfolobus\s?solfataricus|s\.\s?mediterranea|schmidtea\s?mediterranea|s\.\s?rosetta|salpingoeca\s?rosetta|n\.\s?vectensis|nematostella\s?vectensis|s\.\s?aureus|staphylococcus\s?aureus|a\.\s?thaliana|arabidopsis\s?thaliana|v\.\s?cholerae|vibrio\s?cholerae|t\.\s?thermophila|tetrahymena\s?thermophila|c\.\s?reinhardtii|chlamydomonas\s?reinhardtii|n\.\s?attenuata|nicotiana\s?attenuata|e\.\s?carotovora|erwinia\s?carotovora|h\.\s?sapiens|homo\s?sapiens|e\.\s?faecalis|enterococcus\s?faecalis|c\.\s?trachomatis|chlamydia\s?trachomatis|x\.\s?laevis|xenopus\s?laevis|x\.\s?tropicalis|xenopus\s?tropicalis|m\.\s?musculus|mus\s?musculus|d\.\s?immigrans|drosophila\s?immigrans|d\.\s?subobscura|drosophila\s?subobscura|d\.\s?affinis|drosophila\s?affinis|d\.\s?obscura|drosophila\s?obscura|f\.\s?tularensis|francisella\s?tularensis|d\.\s?rerio|danio\s?rerio|drosophila|xenopus'"/>
   <xsl:param name="article-text"
              select="string-join(for $x in //article/*[local-name() = 'body' or local-name() = 'back']//*     return      if ($x/ancestor::sec[@sec-type='data-availability']) then ()     else if ($x/ancestor::sec[@sec-type='additional-information']) then ()     else if ($x/ancestor::ref-list) then ()     else if ($x/local-name() = 'xref') then ()     else $x/text(),'')"/>
   <xsl:param name="ref-list-regex"
              select="string-join(for $x in //ref-list/ref/element-citation/year     return concat(e:citation-format1($x),'|',e:citation-format2($x))     ,'|')"/>

   <!--PATTERN article-tests-pattern-->


	  <!--RULE article-tests-->
   <xsl:template match="article" priority="1000" mode="M33">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article"
                       id="article-tests"/>

		    <!--REPORT info-->
      <xsl:if test="@dtd-version">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@dtd-version">
            <xsl:attribute name="id">dtd-info</xsl:attribute>
            <xsl:attribute name="role">info</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>DTD version is <xsl:text/>
               <xsl:value-of select="@dtd-version"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@article-type = $allowed-article-types"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="@article-type = $allowed-article-types">
               <xsl:attribute name="id">test-article-type</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>article-type must be equal to 'article-commentary', 'correction', 'discussion', 'editorial', or 'research-article'. Currently it is <xsl:text/>
                  <xsl:value-of select="@article-type"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(front) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(front) = 1">
               <xsl:attribute name="id">test-article-front</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>Article must have one child front. Currently there are <xsl:text/>
                  <xsl:value-of select="count(front)"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(body) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(body) = 1">
               <xsl:attribute name="id">test-article-body</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>Article must have one child body. Currently there are <xsl:text/>
                  <xsl:value-of select="count(body)"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="(@article-type = ('article-commentary','discussion','editorial','research-article')) and count(back) != 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(@article-type = ('article-commentary','discussion','editorial','research-article')) and count(back) != 1">
            <xsl:attribute name="id">test-article-back</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Article must have one child back. Currently there are <xsl:text/>
               <xsl:value-of select="count(back)"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M33"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M33"/>
   <xsl:template match="@*|node()" priority="-2" mode="M33">
      <xsl:apply-templates select="*" mode="M33"/>
   </xsl:template>

   <!--PATTERN research-article-pattern-->


	  <!--RULE research-article-->
   <xsl:template match="article[@article-type='research-article']"
                 priority="1000"
                 mode="M34">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article[@article-type='research-article']"
                       id="research-article"/>
      <xsl:variable name="disp-channel"
                    select="descendant::article-meta/article-categories/subj-group[@subj-group-type='display-channel']/subject"/>

		    <!--REPORT error-->
      <xsl:if test="($disp-channel != 'Scientific Correspondence') and not(sub-article[@article-type='decision-letter'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($disp-channel != 'Scientific Correspondence') and not(sub-article[@article-type='decision-letter'])">
            <xsl:attribute name="id">final-test-r-article-d-letter</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>A decision letter must be present for research articles.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($disp-channel != 'Scientific Correspondence') and not(sub-article[@article-type='reply'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($disp-channel != 'Scientific Correspondence') and not(sub-article[@article-type='reply'])">
            <xsl:attribute name="id">test-r-article-a-reply</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Author response should usually be present for research articles, but this one does not have one. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M34"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M34"/>
   <xsl:template match="@*|node()" priority="-2" mode="M34">
      <xsl:apply-templates select="*" mode="M34"/>
   </xsl:template>

   <!--PATTERN test-front-pattern-->


	  <!--RULE test-front-->
   <xsl:template match="article/front" priority="1000" mode="M35">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article/front"
                       id="test-front"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(journal-meta) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(journal-meta) = 1">
               <xsl:attribute name="id">test-front-jmeta</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>There must be one journal-meta that is a child of front. Currently there are <xsl:text/>
                  <xsl:value-of select="count(journal-meta)"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(article-meta) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(article-meta) = 1">
               <xsl:attribute name="id">test-front-ameta</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>There must be one article-meta that is a child of front. Currently there are <xsl:text/>
                  <xsl:value-of select="count(article-meta)"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M35"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M35"/>
   <xsl:template match="@*|node()" priority="-2" mode="M35">
      <xsl:apply-templates select="*" mode="M35"/>
   </xsl:template>

   <!--PATTERN test-journal-meta-pattern-->


	  <!--RULE test-journal-meta-->
   <xsl:template match="article/front/journal-meta" priority="1000" mode="M36">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article/front/journal-meta"
                       id="test-journal-meta"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="journal-id[@journal-id-type='nlm-ta'] = 'elife'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="journal-id[@journal-id-type='nlm-ta'] = 'elife'">
               <xsl:attribute name="id">test-journal-nlm</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>journal-id[@journal-id-type='nlm-ta'] must only contain 'eLife'. Currently it is <xsl:text/>
                  <xsl:value-of select="journal-id[@journal-id-type='nlm-ta']"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="journal-id[@journal-id-type='publisher-id'] = 'eLife'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="journal-id[@journal-id-type='publisher-id'] = 'eLife'">
               <xsl:attribute name="id">test-journal-pubid-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>journal-id[@journal-id-type='publisher-id'] must only contain 'eLife'. Currently it is <xsl:text/>
                  <xsl:value-of select="journal-id[@journal-id-type='publisher-id']"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="journal-title-group/journal-title = 'eLife'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="journal-title-group/journal-title = 'eLife'">
               <xsl:attribute name="id">test-journal-pubid-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>journal-meta must contain a journal-title-group with a child journal-title which must be equal to 'eLife'. Currently it is <xsl:text/>
                  <xsl:value-of select="journal-id[@journal-id-type='publisher-id']"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="issn = '2050-084X'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="issn = '2050-084X'">
               <xsl:attribute name="id">test-journal-pubid-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>ISSN must be 2050-084X. Currently it is <xsl:text/>
                  <xsl:value-of select="issn"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="issn[@publication-format='electronic'][@pub-type='epub']"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="issn[@publication-format='electronic'][@pub-type='epub']">
               <xsl:attribute name="id">test-journal-pubid-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>The journal issn element must have a @publication-format='electronic' and a @pub-type='epub'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M36"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M36"/>
   <xsl:template match="@*|node()" priority="-2" mode="M36">
      <xsl:apply-templates select="*" mode="M36"/>
   </xsl:template>

   <!--PATTERN test-article-metadata-pattern-->


	  <!--RULE test-article-metadata-->
   <xsl:template match="article/front/article-meta" priority="1000" mode="M37">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article/front/article-meta"
                       id="test-article-metadata"/>
      <xsl:variable name="article-id" select="article-id[@pub-id-type='publisher-id']"/>
      <xsl:variable name="article-type" select="ancestor::article/@article-type"/>
      <xsl:variable name="subj-type"
                    select="descendant::subj-group[@subj-group-type='display-channel']/subject"/>
      <xsl:variable name="exceptions" select="('Insight','Retraction','Correction')"/>
      <xsl:variable name="no-digest"
                    select="('Scientific Correspondence','Replication Study','Research Advance','Registered Report','Correction','Retraction',$features-subj)"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches($article-id,'^\d{5}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches($article-id,'^\d{5}$')">
               <xsl:attribute name="id">test-article-id</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>article-id must consist only of 5 digits. Currently it is <xsl:text/>
                  <xsl:value-of select="article-id[@pub-id-type='publisher-id']"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="starts-with(article-id[@pub-id-type='doi'],'10.7554/eLife.')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="starts-with(article-id[@pub-id-type='doi'],'10.7554/eLife.')">
               <xsl:attribute name="id">test-article-doi-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>Article level DOI must start with '10.7554/eLife.'. Currently it is <xsl:text/>
                  <xsl:value-of select="article-id[@pub-id-type='doi']"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="substring-after(article-id[@pub-id-type='doi'],'10.7554/eLife.') = $article-id"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="substring-after(article-id[@pub-id-type='doi'],'10.7554/eLife.') = $article-id">
               <xsl:attribute name="id">test-article-doi-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>Article level DOI must be a concatenation of '10.7554/eLife.' and the article-id. Currently it is <xsl:text/>
                  <xsl:value-of select="article-id[@pub-id-type='doi']"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(article-categories) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(article-categories) = 1">
               <xsl:attribute name="id">test-article-presence</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>There must be one article-categories element in the article-meta. Currently there are <xsl:text/>
                  <xsl:value-of select="count(article-categories)"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="title-group[article-title]"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="title-group[article-title]">
               <xsl:attribute name="id">test-title-group-presence</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>title-group containing article-title must be present.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="pub-date[@publication-format='electronic'][@date-type='publication']"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="pub-date[@publication-format='electronic'][@date-type='publication']">
               <xsl:attribute name="id">test-epub-date</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>There must be a child pub-date[@publication-format='electronic'][@date-type='publication'] in article-meta.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="pub-date[@pub-type='collection']"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="pub-date[@pub-type='collection']">
               <xsl:attribute name="id">test-pub-collection-presence</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>There must be a child pub-date[@pub-type='collection'] in article-meta.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="volume"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="volume">
               <xsl:attribute name="id">test-volume-presence</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>There must be a child volume in article-meta.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(volume,'^[0-9]*$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(volume,'^[0-9]*$')">
               <xsl:attribute name="id">test-volume-contents</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>volume must only contain a number.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="elocation-id"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="elocation-id">
               <xsl:attribute name="id">test-elocation-presence</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>There must be a child elocation-id in article-meta.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="(($article-type != 'retraction') and $article-type != 'correction') and not(self-uri)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(($article-type != 'retraction') and $article-type != 'correction') and not(self-uri)">
            <xsl:attribute name="id">test-self-uri-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>There must be a child self-uri in article-meta.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(($article-type != 'retraction') and $article-type != 'correction') and not(self-uri[@content-type='pdf'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(($article-type != 'retraction') and $article-type != 'correction') and not(self-uri[@content-type='pdf'])">
            <xsl:attribute name="id">test-self-uri-att</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>self-uri must have an @content-type="pdf"</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(($article-type != 'retraction') and $article-type != 'correction') and not(self-uri[starts-with(@xlink:href,concat('elife-', $article-id))])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(($article-type != 'retraction') and $article-type != 'correction') and not(self-uri[starts-with(@xlink:href,concat('elife-', $article-id))])">
            <xsl:attribute name="id">test-self-uri-pdf-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>self-uri must have attribute xlink:href="elife-xxxxx.pdf" where xxxxx = the article-id. Currently it is <xsl:text/>
               <xsl:value-of select="self-uri/@xlink:href"/>
               <xsl:text/>. It should start with elife-<xsl:text/>
               <xsl:value-of select="$article-id"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(($article-type != 'retraction') and $article-type != 'correction') and not(self-uri[matches(@xlink:href, '^elife-[\d]{5}\.pdf$|^elife-[\d]{5}-v[0-9]{1,2}\.pdf$')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(($article-type != 'retraction') and $article-type != 'correction') and not(self-uri[matches(@xlink:href, '^elife-[\d]{5}\.pdf$|^elife-[\d]{5}-v[0-9]{1,2}\.pdf$')])">
            <xsl:attribute name="id">test-self-uri-pdf-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>self-uri does not conform.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(($article-type != 'retraction') and $article-type != 'correction') and count(history) != 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(($article-type != 'retraction') and $article-type != 'correction') and count(history) != 1">
            <xsl:attribute name="id">test-history-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>There must be one and only one history element in the article-meta. Currently there are <xsl:text/>
               <xsl:value-of select="count(history)"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(permissions) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(permissions) = 1">
               <xsl:attribute name="id">test-permissions-presence</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>There must be one and only one permissions element in the article-meta. Currently there are <xsl:text/>
                  <xsl:value-of select="count(permissions)"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="(($article-type != 'retraction') and $article-type != 'correction') and (count(abstract[not(@abstract-type='executive-summary')]) != 1 or (count(abstract[not(@abstract-type='executive-summary')]) != 1 and count(abstract[@abstract-type='executive-summary']) != 1))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(($article-type != 'retraction') and $article-type != 'correction') and (count(abstract[not(@abstract-type='executive-summary')]) != 1 or (count(abstract[not(@abstract-type='executive-summary')]) != 1 and count(abstract[@abstract-type='executive-summary']) != 1))">
            <xsl:attribute name="id">test-abstracts</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>There must either be only one abstract or one abstract and one abstract[@abstract-type="executive-summary]. No other variations are allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($subj-type= $no-digest) and abstract[@abstract-type='executive-summary']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($subj-type= $no-digest) and abstract[@abstract-type='executive-summary']">
            <xsl:attribute name="id">test-no-digest</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>'<xsl:text/>
               <xsl:value-of select="$subj-type"/>
               <xsl:text/>' cannot have a digest.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if ($article-type = $features-article-types) then ()       else if ($subj-type = ('Scientific Correspondence','Correction','Retraction')) then ()                    else count(funding-group) != 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($article-type = $features-article-types) then () else if ($subj-type = ('Scientific Correspondence','Correction','Retraction')) then () else count(funding-group) != 1">
            <xsl:attribute name="id">test-funding-group-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>There must be one and only one funding-group element in the article-meta. Currently there are <xsl:text/>
               <xsl:value-of select="count(funding-group)"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if ($subj-type = $exceptions) then ()                   else count(custom-meta-group) != 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($subj-type = $exceptions) then () else count(custom-meta-group) != 1">
            <xsl:attribute name="id">test-custom-meta-group-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>One custom-meta-group should be present in article-meta for all article types except Insights, Retractions and Corrections.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if ($subj-type = ('Correction','Retraction')) then ()       else count(kwd-group[@kwd-group-type='author-keywords']) != 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($subj-type = ('Correction','Retraction')) then () else count(kwd-group[@kwd-group-type='author-keywords']) != 1">
            <xsl:attribute name="id">test-auth-kwd-group-presence-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>One author keyword group must be present in article-meta.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if ($subj-type = ('Correction','Retraction')) then (count(kwd-group[@kwd-group-type='author-keywords']) != 0)       else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($subj-type = ('Correction','Retraction')) then (count(kwd-group[@kwd-group-type='author-keywords']) != 0) else ()">
            <xsl:attribute name="id">test-auth-kwd-group-presence-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="$subj-type"/>
               <xsl:text/> articles must not have any author keywords</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(kwd-group[@kwd-group-type='research-organism']) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="count(kwd-group[@kwd-group-type='research-organism']) gt 1">
            <xsl:attribute name="id">test-ro-kwd-group-presence-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>More than 1 Research organism keyword group is present in article-meta. This is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="if ($subj-type = ('Research Article', 'Research Advance', 'Replication Study', 'Research Communication'))        then (count(kwd-group[@kwd-group-type='research-organism']) = 0)       else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($subj-type = ('Research Article', 'Research Advance', 'Replication Study', 'Research Communication')) then (count(kwd-group[@kwd-group-type='research-organism']) = 0) else ()">
            <xsl:attribute name="id">test-ro-kwd-group-presence-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="$subj-type"/>
               <xsl:text/> does not contain a Research Organism keyword group. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M37"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M37"/>
   <xsl:template match="@*|node()" priority="-2" mode="M37">
      <xsl:apply-templates select="*" mode="M37"/>
   </xsl:template>

   <!--PATTERN test-research-article-metadata-pattern-->


	  <!--RULE test-research-article-metadata-->
   <xsl:template match="article[@article-type='research-article']/front/article-meta"
                 priority="1000"
                 mode="M38">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article[@article-type='research-article']/front/article-meta"
                       id="test-research-article-metadata"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="contrib-group"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contrib-group">
               <xsl:attribute name="id">test-contrib-group-presence-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>contrib-group (with no attributes containing authors) must be present (as a child of article-meta) for research articles.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="contrib-group[@content-type='section']"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="contrib-group[@content-type='section']">
               <xsl:attribute name="id">test-contrib-group-presence-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>contrib-group[@content-type='section'] must be present (as a child of article-meta) for research articles (this is the contrib-group which contains reviewers and editors).</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M38"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M38"/>
   <xsl:template match="@*|node()" priority="-2" mode="M38">
      <xsl:apply-templates select="*" mode="M38"/>
   </xsl:template>

   <!--PATTERN test-article-categories-pattern-->


	  <!--RULE test-article-categories-->
   <xsl:template match="article-meta/article-categories" priority="1000" mode="M39">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-meta/article-categories"
                       id="test-article-categories"/>
      <xsl:variable name="article-type" select="ancestor::article/@article-type"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(subj-group[@subj-group-type='display-channel']) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(subj-group[@subj-group-type='display-channel']) = 1">
               <xsl:attribute name="id">disp-subj-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>There must be one subj-group[@subj-group-type='display-channel'] which is a child of article-categories. Currently there are <xsl:text/>
                  <xsl:value-of select="count(article-categories/subj-group[@subj-group-type='display-channel'])"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(subj-group[@subj-group-type='display-channel']/subject) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(subj-group[@subj-group-type='display-channel']/subject) = 1">
               <xsl:attribute name="id">disp-subj-test2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>subj-group[@subj-group-type='display-channel'] must contain only one subject. Currently there are <xsl:text/>
                  <xsl:value-of select="count(subj-group[@subj-group-type='display-channel']/subject)"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="count(subj-group[@subj-group-type='heading']) gt 2">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="count(subj-group[@subj-group-type='heading']) gt 2">
            <xsl:attribute name="id">head-subj-test1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>article-categories must contain one and or two subj-group[@subj-group-type='heading'] elements. Currently there are <xsl:text/>
               <xsl:value-of select="count(subj-group[@subj-group-type='heading']/subject)"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($article-type != 'editorial') and ($article-type != 'discussion') and count(subj-group[@subj-group-type='heading']) lt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($article-type != 'editorial') and ($article-type != 'discussion') and count(subj-group[@subj-group-type='heading']) lt 1">
            <xsl:attribute name="id">head-subj-test2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>article-categories must contain one and or two subj-group[@subj-group-type='heading'] elements. Currently there are <xsl:text/>
               <xsl:value-of select="count(subj-group[@subj-group-type='heading']/subject)"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($article-type = ('editorial','discussion')) and count(subj-group[@subj-group-type='heading']) lt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($article-type = ('editorial','discussion')) and count(subj-group[@subj-group-type='heading']) lt 1">
            <xsl:attribute name="id">head-subj-test3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>article-categories does not contain a subj-group[@subj-group-type='heading']. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(subj-group[@subj-group-type='heading']/subject) = count(distinct-values(subj-group[@subj-group-type='heading']/subject))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(subj-group[@subj-group-type='heading']/subject) = count(distinct-values(subj-group[@subj-group-type='heading']/subject))">
               <xsl:attribute name="id">head-subj-distinct-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>Where there are two headings, the content of one must not match the content of the other (each heading should be unique)</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M39"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M39"/>
   <xsl:template match="@*|node()" priority="-2" mode="M39">
      <xsl:apply-templates select="*" mode="M39"/>
   </xsl:template>

   <!--PATTERN disp-channel-checks-pattern-->


	  <!--RULE disp-channel-checks-->
   <xsl:template match="article-categories/subj-group[@subj-group-type='display-channel']/subject"
                 priority="1000"
                 mode="M40">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-categories/subj-group[@subj-group-type='display-channel']/subject"
                       id="disp-channel-checks"/>
      <xsl:variable name="article-type" select="ancestor::article/@article-type"/>
      <xsl:variable name="research-disp-channels"
                    select="('Research Article', 'Short Report', 'Tools and Resources', 'Research Advance', 'Registered Report', 'Replication Study', 'Research Communication', 'Scientific Correspondence')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test=". = $allowed-disp-subj"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test=". = $allowed-disp-subj">
               <xsl:attribute name="id">disp-subj-value-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>Content of the display channel should be one of the following: Research Article, Short Report, Tools and Resources, Research Advance, Registered Report, Replication Study, Research Communication, Feature, Insight, Editorial, Correction, Retraction . Currently it is <xsl:text/>
                  <xsl:value-of select="subj-group[@subj-group-type='display-channel']/subject"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="if ($article-type = 'research-article') then . = $research-disp-channels         else if ($article-type = 'article-commentary') then . = 'Insight'         else if ($article-type = 'editorial') then . = 'Editorial'         else if ($article-type = 'correction') then . = 'Correction'         else if ($article-type = 'discussion') then . = 'Feature article'         else if ($article-type = 'review-article') then . = 'Review Article'         else . = 'Retraction'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="if ($article-type = 'research-article') then . = $research-disp-channels else if ($article-type = 'article-commentary') then . = 'Insight' else if ($article-type = 'editorial') then . = 'Editorial' else if ($article-type = 'correction') then . = 'Correction' else if ($article-type = 'discussion') then . = 'Feature article' else if ($article-type = 'review-article') then . = 'Review Article' else . = 'Retraction'">
               <xsl:attribute name="id">disp-subj-value-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>Content of the display channel must correspond with the correct NLM article type defined in article[@artilce-type].</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M40"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M40"/>
   <xsl:template match="@*|node()" priority="-2" mode="M40">
      <xsl:apply-templates select="*" mode="M40"/>
   </xsl:template>

   <!--PATTERN MSA-checks-pattern-->


	  <!--RULE MSA-checks-->
   <xsl:template match="article-categories/subj-group[@subj-group-type='heading']/subject"
                 priority="1000"
                 mode="M41">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-categories/subj-group[@subj-group-type='heading']/subject"
                       id="MSA-checks"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test=". = $MSAs"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test=". = $MSAs">
               <xsl:attribute name="id">head-subj-MSA-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>Content of the heading must match one of the MSAs.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M41"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M41"/>
   <xsl:template match="@*|node()" priority="-2" mode="M41">
      <xsl:apply-templates select="*" mode="M41"/>
   </xsl:template>

   <!--PATTERN head-subj-checks-pattern-->


	  <!--RULE head-subj-checks-->
   <xsl:template match="article-categories/subj-group[@subj-group-type='heading']"
                 priority="1000"
                 mode="M42">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-categories/subj-group[@subj-group-type='heading']"
                       id="head-subj-checks"/>
      <xsl:variable name="article-type" select="ancestor::article/@article-type"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(subject) le 3"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(subject) le 3">
               <xsl:attribute name="id">head-subj-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>There cannot be more than two MSAs.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="if ($article-type = 'editorial') then ()         else count(subject) = 0">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($article-type = 'editorial') then () else count(subject) = 0">
            <xsl:attribute name="id">head-subj-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>There must be at least one MSA.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M42"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M42"/>
   <xsl:template match="@*|node()" priority="-2" mode="M42">
      <xsl:apply-templates select="*" mode="M42"/>
   </xsl:template>

   <!--PATTERN test-title-group-pattern-->


	  <!--RULE test-title-group-->
   <xsl:template match="article/front/article-meta/title-group"
                 priority="1000"
                 mode="M43">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article/front/article-meta/title-group"
                       id="test-title-group"/>
      <xsl:variable name="subj-type"
                    select="ancestor::article//subj-group[@subj-group-type='display-channel']/subject"/>
      <xsl:variable name="lc" select="normalize-space(lower-case(article-title))"/>
      <xsl:variable name="title" select="replace(article-title,'\p{P}','')"/>
      <xsl:variable name="body" select="ancestor::front/following-sibling::body"/>
      <xsl:variable name="tokens"
                    select="string-join(for $x in tokenize($title,' ')[position() &gt; 1] return       if (matches($x,'^[A-Z]') and matches($body,concat(' ',lower-case($x),' '))) then $x      else (),', ')"/>

		    <!--REPORT error-->
      <xsl:if test="ends-with(replace(article-title,'\p{Z}',''),'.')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="ends-with(replace(article-title,'\p{Z}',''),'.')">
            <xsl:attribute name="id">article-title-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Article title must not end with a full stop.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="article-title[text() != ''] = lower-case(article-title)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="article-title[text() != ''] = lower-case(article-title)">
            <xsl:attribute name="id">article-title-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Article title must not be entirely in lower case.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="article-title[text() != ''] = upper-case(article-title)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="article-title[text() != ''] = upper-case(article-title)">
            <xsl:attribute name="id">article-title-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Article title must not be entirely in upper case.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="not(article-title/*) and normalize-space(article-title)=''">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="not(article-title/*) and normalize-space(article-title)=''">
            <xsl:attribute name="id">article-title-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Article title must not be empty.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="article-title//mml:math">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="article-title//mml:math">
            <xsl:attribute name="id">article-title-test-5</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Article title contains maths. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="article-title//bold">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="article-title//bold">
            <xsl:attribute name="id">article-title-test-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Article title must not contain bold.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="article-title//underline">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="article-title//underline">
            <xsl:attribute name="id">article-title-test-7</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Article title must not contain underline.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="article-title//break">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="article-title//break">
            <xsl:attribute name="id">article-title-test-8</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Article title must not contain a line break (the element 'break').</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(article-title,'-Based ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(article-title,'-Based ')">
            <xsl:attribute name="id">article-title-test-9</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Article title contains the string '-Based '. this should be lower-case, '-based '.  - <xsl:text/>
               <xsl:value-of select="article-title"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($subj-type = ('Research Article', 'Short Report', 'Tools and Resources', 'Research Advance', 'Research Communication', 'Feature article', 'Insight', 'Editorial', 'Scientific Correspondence')) and matches(article-title,':')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($subj-type = ('Research Article', 'Short Report', 'Tools and Resources', 'Research Advance', 'Research Communication', 'Feature article', 'Insight', 'Editorial', 'Scientific Correspondence')) and matches(article-title,':')">
            <xsl:attribute name="id">article-title-test-10</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Article title contains a colon. This almost never allowed. - <xsl:text/>
               <xsl:value-of select="article-title"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($tokens,'[A-Za-z]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($tokens,'[A-Za-z]')">
            <xsl:attribute name="id">article-title-test-11</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Article title contains a capitalised word(s) which is not capitalised in the body of the article - <xsl:text/>
               <xsl:value-of select="$tokens"/>
               <xsl:text/> - is this correct? - <xsl:text/>
               <xsl:value-of select="article-title"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M43"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M43"/>
   <xsl:template match="@*|node()" priority="-2" mode="M43">
      <xsl:apply-templates select="*" mode="M43"/>
   </xsl:template>

   <!--PATTERN test-contrib-group-pattern-->


	  <!--RULE test-contrib-group-->
   <xsl:template match="article/front/article-meta/contrib-group"
                 priority="1000"
                 mode="M44">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article/front/article-meta/contrib-group"
                       id="test-contrib-group"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="contrib"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contrib">
               <xsl:attribute name="id">contrib-presence-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>contrib-group must contain at least one contrib.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="count(contrib[@equal-contrib='yes']) = 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="count(contrib[@equal-contrib='yes']) = 1">
            <xsl:attribute name="id">equal-count-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>There is one contrib with the attribute equal-contrib='yes'.This cannot be correct. Either 2 or more contribs within the same contrib-group should have this attribute, or none. Check <xsl:text/>
               <xsl:value-of select="contrib[@equal-contrib='yes']/name"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M44"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M44"/>
   <xsl:template match="@*|node()" priority="-2" mode="M44">
      <xsl:apply-templates select="*" mode="M44"/>
   </xsl:template>

   <!--PATTERN name-tests-pattern-->


	  <!--RULE name-tests-->
   <xsl:template match="article-meta/contrib-group//name" priority="1000" mode="M45">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-meta/contrib-group//name"
                       id="name-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(surname) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(surname) = 1">
               <xsl:attribute name="id">surname-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>Each name must contain only one surname.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="count(given-names) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(given-names) gt 1">
            <xsl:attribute name="id">given-names-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Each name must contain only one given-names element.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="given-names"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="given-names">
               <xsl:attribute name="id">given-names-test-2</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>This name - <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> - does not contain a given-name. Please check with eLife staff that this is correct.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M45"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M45"/>
   <xsl:template match="@*|node()" priority="-2" mode="M45">
      <xsl:apply-templates select="*" mode="M45"/>
   </xsl:template>

   <!--PATTERN surname-tests-pattern-->


	  <!--RULE surname-tests-->
   <xsl:template match="article-meta/contrib-group//name/surname"
                 priority="1000"
                 mode="M46">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-meta/contrib-group//name/surname"
                       id="surname-tests"/>

		    <!--REPORT error-->
      <xsl:if test="not(*) and (normalize-space(.)='')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="not(*) and (normalize-space(.)='')">
            <xsl:attribute name="id">surname-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>surname must not be empty.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::bold or descendant::sub or descendant::sup or descendant::italic or descendant::sc">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="descendant::bold or descendant::sub or descendant::sup or descendant::italic or descendant::sc">
            <xsl:attribute name="id">surname-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>surname must not contain any formatting (bold, or italic emphasis, or smallcaps, superscript or subscript).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="matches(.,'^[\p{L}\p{M}\s-]*$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(.,'^[\p{L}\p{M}\s-]*$')">
               <xsl:attribute name="id">surname-test-4</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>surname should usually only contain letters, spaces, or hyphens. <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> contains other characters.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="matches(.,'^\p{Lu}')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\p{Lu}')">
               <xsl:attribute name="id">surname-test-5</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>surname doesn't begin with a capital letter - <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>. Is this correct?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'^\s')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\s')">
            <xsl:attribute name="id">surname-test-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>surname starts with a space, which cannot be correct - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'\s$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\s$')">
            <xsl:attribute name="id">surname-test-7</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>surname ends with a space, which cannot be correct - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M46"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M46"/>
   <xsl:template match="@*|node()" priority="-2" mode="M46">
      <xsl:apply-templates select="*" mode="M46"/>
   </xsl:template>

   <!--PATTERN given-names-tests-pattern-->


	  <!--RULE given-names-tests-->
   <xsl:template match="article-meta/contrib-group//name/given-names"
                 priority="1000"
                 mode="M47">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-meta/contrib-group//name/given-names"
                       id="given-names-tests"/>

		    <!--REPORT error-->
      <xsl:if test="not(*) and (normalize-space(.)='')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="not(*) and (normalize-space(.)='')">
            <xsl:attribute name="id">given-names-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>given-names must not be empty.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::bold or descendant::sub or descendant::sup or descendant::italic or descendant::sc">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="descendant::bold or descendant::sub or descendant::sup or descendant::italic or descendant::sc">
            <xsl:attribute name="id">given-names-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>given-names must not contain any formatting (bold, or italic emphasis, or smallcaps, superscript or subscript) - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="matches(.,'^[\p{L}\p{M}\s-]*$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(.,'^[\p{L}\p{M}\s-]*$')">
               <xsl:attribute name="id">given-names-test-5</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>given-names should usually only contain letters, spaces, or hyphens. <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> contains other characters.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="matches(.,'^\p{Lu}')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\p{Lu}')">
               <xsl:attribute name="id">given-names-test-6</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>given-names doesn't begin with a capital letter - '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'. Is this correct?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'^[\p{L}]{1}\.$|^[\p{L}]{1}\.\s?[\p{L}]{1}\.\s?$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'^[\p{L}]{1}\.$|^[\p{L}]{1}\.\s?[\p{L}]{1}\.\s?$')">
            <xsl:attribute name="id">given-names-test-7</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>given-names contains initialised full stop(s) which is incorrect - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'^\s')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\s')">
            <xsl:attribute name="id">given-names-test-8</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>given-names starts with a space, which cannot be correct - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'\s$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\s$')">
            <xsl:attribute name="id">given-names-test-9</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>given-names ends with a space, which cannot be correct - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[A-Za-z] [Dd]e$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'[A-Za-z] [Dd]e$')">
            <xsl:attribute name="id">given-names-test-10</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>given-names ends with ' de' - should this be captured as the beginning of the surname instead? - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[A-Za-z] [Vv]an$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'[A-Za-z] [Vv]an$')">
            <xsl:attribute name="id">given-names-test-11</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>given-names ends with ' van' - should this be captured as the beginning of the surname instead? - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[A-Za-z] [Vv]on$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'[A-Za-z] [Vv]on$')">
            <xsl:attribute name="id">given-names-test-12</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>given-names ends with ' von' - should this be captured as the beginning of the surname instead? - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[A-Za-z] [Ee]l$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'[A-Za-z] [Ee]l$')">
            <xsl:attribute name="id">given-names-test-13</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>given-names ends with ' el' - should this be captured as the beginning of the surname instead? - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M47"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M47"/>
   <xsl:template match="@*|node()" priority="-2" mode="M47">
      <xsl:apply-templates select="*" mode="M47"/>
   </xsl:template>

   <!--PATTERN suffix-tests-pattern-->


	  <!--RULE suffix-tests-->
   <xsl:template match="article-meta/contrib-group//name/suffix"
                 priority="1000"
                 mode="M48">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-meta/contrib-group//name/suffix"
                       id="suffix-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test=".=('Jnr', 'Snr', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test=".=('Jnr', 'Snr', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X')">
               <xsl:attribute name="id">suffix-assert</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>suffix can only have one of these values - 'Jnr', 'Snr', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="*">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="*">
            <xsl:attribute name="id">suffix-child-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>suffix cannot have any child elements - <xsl:text/>
               <xsl:value-of select="*/local-name()"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M48"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M48"/>
   <xsl:template match="@*|node()" priority="-2" mode="M48">
      <xsl:apply-templates select="*" mode="M48"/>
   </xsl:template>

   <!--PATTERN name-child-tests-pattern-->


	  <!--RULE name-child-tests-->
   <xsl:template match="article-meta/contrib-group//name/*[(local-name() != 'surname') and (local-name() != 'given-names') and (local-name() != 'suffix')]"
                 priority="1000"
                 mode="M49">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-meta/contrib-group//name/*[(local-name() != 'surname') and (local-name() != 'given-names') and (local-name() != 'suffix')]"
                       id="name-child-tests"/>

		    <!--REPORT error-->
      <xsl:if test="true()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="true()">
            <xsl:attribute name="id">disallowed-child-assert</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="local-name()"/>
               <xsl:text/> is not allowed as a child of name.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M49"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M49"/>
   <xsl:template match="@*|node()" priority="-2" mode="M49">
      <xsl:apply-templates select="*" mode="M49"/>
   </xsl:template>

   <!--PATTERN contrib-tests-pattern-->


	  <!--RULE contrib-tests-->
   <xsl:template match="article-meta//contrib" priority="1000" mode="M50">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-meta//contrib"
                       id="contrib-tests"/>
      <xsl:variable name="type" select="@contrib-type"/>
      <xsl:variable name="subj-type"
                    select="ancestor::article//subj-group[@subj-group-type='display-channel']/subject"/>
      <xsl:variable name="aff-rid1" select="xref[@ref-type='aff'][1]/@rid"/>
      <xsl:variable name="inst1"
                    select="ancestor::contrib-group//aff[@id = $aff-rid1]/institution[not(@content-type)]"/>
      <xsl:variable name="aff-rid2" select="xref[@ref-type='aff'][2]/@rid"/>
      <xsl:variable name="inst2"
                    select="ancestor::contrib-group//aff[@id = $aff-rid2]/institution[not(@content-type)]"/>
      <xsl:variable name="aff-rid3" select="xref[@ref-type='aff'][3]/@rid"/>
      <xsl:variable name="inst3"
                    select="ancestor::contrib-group//aff[@id = $aff-rid3]/institution[not(@content-type)]"/>
      <xsl:variable name="aff-rid4" select="xref[@ref-type='aff'][4]/@rid"/>
      <xsl:variable name="inst4"
                    select="ancestor::contrib-group//aff[@id = $aff-rid4]/institution[not(@content-type)]"/>
      <xsl:variable name="aff-rid5" select="xref[@ref-type='aff'][5]/@rid"/>
      <xsl:variable name="inst5"
                    select="ancestor::contrib-group//aff[@id = $aff-rid5]/institution[not(@content-type)]"/>
      <xsl:variable name="inst"
                    select="concat($inst1,'*',$inst2,'*',$inst3,'*',$inst4,'*',$inst5)"/>
      <xsl:variable name="coi-rid" select="xref[starts-with(@rid,'conf')]/@rid"/>
      <xsl:variable name="coi" select="ancestor::article//fn[@id = $coi-rid]/p"/>
      <xsl:variable name="comp-regex"
                    select="' [Ii]nc[.]?| LLC| Ltd| [Ll]imited| [Cc]ompanies| [Cc]ompany| [Cc]o\.| Pharmaceutical[s]| [Pp][Ll][Cc]| AstraZeneca| Pfizer| R&amp;D'"/>

		    <!--REPORT error-->
      <xsl:if test="if ($subj-type = ('Retraction','Correction')) then ()        else if (collab) then ()        else if (ancestor::collab) then (count(xref[@ref-type='aff']) + count(aff) = 0)        else if ($type != 'author') then ()        else count(xref[@ref-type='aff']) = 0">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($subj-type = ('Retraction','Correction')) then () else if (collab) then () else if (ancestor::collab) then (count(xref[@ref-type='aff']) + count(aff) = 0) else if ($type != 'author') then () else count(xref[@ref-type='aff']) = 0">
            <xsl:attribute name="id">contrib-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>author contrib should contain at least 1 xref[@ref-type='aff'].</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type != 'author') and (count(xref[@ref-type='aff']) + count(aff) = 0)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($type != 'author') and (count(xref[@ref-type='aff']) + count(aff) = 0)">
            <xsl:attribute name="id">contrib-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>non-author contrib doesn't have an affiliation - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="name and collab">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="name and collab">
            <xsl:attribute name="id">contrib-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>author contains both a child name and a child collab. This is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if (collab) then ()         else count(name) != 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if (collab) then () else count(name) != 1">
            <xsl:attribute name="id">name-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Contrib contains no collab but has more than one name. This is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="self::*[@corresp='yes'][not(child::*:email)]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="self::*[@corresp='yes'][not(child::*:email)]">
            <xsl:attribute name="id">contrib-email-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Corresponding authors must have an email.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="not(@corresp='yes') and (not(ancestor::collab/parent::contrib[@corresp='yes'])) and (child::email)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="not(@corresp='yes') and (not(ancestor::collab/parent::contrib[@corresp='yes'])) and (child::email)">
            <xsl:attribute name="id">contrib-email-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Non-corresponding authors must not have an email.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(@contrib-type='author') and ($coi = 'No competing interests declared') and (matches($inst,$comp-regex))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(@contrib-type='author') and ($coi = 'No competing interests declared') and (matches($inst,$comp-regex))">
            <xsl:attribute name="id">COI-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="concat(descendant::surname,' ',descendant::given-names)"/>
               <xsl:text/> is affiliated with what looks like a company, but contains no COI statement. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M50"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M50"/>
   <xsl:template match="@*|node()" priority="-2" mode="M50">
      <xsl:apply-templates select="*" mode="M50"/>
   </xsl:template>

   <!--PATTERN author-children-tests-pattern-->


	  <!--RULE author-children-tests-->
   <xsl:template match="article-meta//contrib[@contrib-type='author']/*"
                 priority="1000"
                 mode="M51">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-meta//contrib[@contrib-type='author']/*"
                       id="author-children-tests"/>
      <xsl:variable name="article-type" select="ancestor::article/@article-type"/>
      <xsl:variable name="allowed-contrib-blocks"
                    select="('name', 'collab', 'contrib-id', 'email', 'xref')"/>
      <xsl:variable name="allowed-contrib-blocks-features"
                    select="($allowed-contrib-blocks, 'bio', 'role')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="if ($article-type = $features-article-types) then self::*[local-name() = $allowed-contrib-blocks-features]                   else if (ancestor::collab) then self::*[local-name() = ($allowed-contrib-blocks,'aff')]                   else self::*[local-name() = $allowed-contrib-blocks]"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="if ($article-type = $features-article-types) then self::*[local-name() = $allowed-contrib-blocks-features] else if (ancestor::collab) then self::*[local-name() = ($allowed-contrib-blocks,'aff')] else self::*[local-name() = $allowed-contrib-blocks]">
               <xsl:attribute name="id">author-children-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>
                  <xsl:text/>
                  <xsl:value-of select="self::*/local-name()"/>
                  <xsl:text/> is not allowed as a child of author.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M51"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M51"/>
   <xsl:template match="@*|node()" priority="-2" mode="M51">
      <xsl:apply-templates select="*" mode="M51"/>
   </xsl:template>

   <!--PATTERN orcid-tests-pattern-->


	  <!--RULE orcid-tests-->
   <xsl:template match="contrib-id[@contrib-id-type='orcid']"
                 priority="1000"
                 mode="M52">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="contrib-id[@contrib-id-type='orcid']"
                       id="orcid-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@authenticated='true'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@authenticated='true'">
               <xsl:attribute name="id">orcid-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>contrib-id[@contrib-id-type="orcid"] must have an @authenticated="true"</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'http[s]?://orcid.org/[\d]{4}-[\d]{4}-[\d]{4}-[\d]{3}[0-9X]')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(.,'http[s]?://orcid.org/[\d]{4}-[\d]{4}-[\d]{4}-[\d]{3}[0-9X]')">
               <xsl:attribute name="id">orcid-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>contrib-id[@contrib-id-type="orcid"] must contain a valid ORCID URL in the format 'https://orcid.org/0000-0000-0000-0000'</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M52"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M52"/>
   <xsl:template match="@*|node()" priority="-2" mode="M52">
      <xsl:apply-templates select="*" mode="M52"/>
   </xsl:template>

   <!--PATTERN email-tests-pattern-->


	  <!--RULE email-tests-->
   <xsl:template match="article-meta//email" priority="1000" mode="M53">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-meta//email"
                       id="email-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(upper-case(.),'^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(upper-case(.),'^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$')">
               <xsl:attribute name="id">email-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>email element must contain a valid email address. Currently it is <xsl:text/>
                  <xsl:value-of select="self::*"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M53"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M53"/>
   <xsl:template match="@*|node()" priority="-2" mode="M53">
      <xsl:apply-templates select="*" mode="M53"/>
   </xsl:template>

   <!--PATTERN history-tests-pattern-->


	  <!--RULE history-tests-->
   <xsl:template match="article-meta/history" priority="1000" mode="M54">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-meta/history"
                       id="history-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="date[@date-type='received']"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="date[@date-type='received']">
               <xsl:attribute name="id">history-date-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>history must contain date[@date-type='received']</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="date[@date-type='accepted']"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="date[@date-type='accepted']">
               <xsl:attribute name="id">history-date-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>history must contain date[@date-type='accepted']</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M54"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M54"/>
   <xsl:template match="@*|node()" priority="-2" mode="M54">
      <xsl:apply-templates select="*" mode="M54"/>
   </xsl:template>

   <!--PATTERN date-tests-pattern-->


	  <!--RULE date-tests-->
   <xsl:template match="date" priority="1000" mode="M55">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="date"
                       id="date-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(day,'^[0-9]{2}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(day,'^[0-9]{2}$')">
               <xsl:attribute name="id">date-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>date must contain day in the format 00. Currently it is '<xsl:text/>
                  <xsl:value-of select="day"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(month,'^[0-9]{2}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(month,'^[0-9]{2}$')">
               <xsl:attribute name="id">date-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>date must contain month in the format 00. Currently it is '<xsl:text/>
                  <xsl:value-of select="month"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(year,'^[0-9]{4}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(year,'^[0-9]{4}$')">
               <xsl:attribute name="id">date-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>date must contain year in the format 0000. Currently it is Currently it is '<xsl:text/>
                  <xsl:value-of select="year"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@iso-8601-date = concat(year,'-',month,'-',day)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="@iso-8601-date = concat(year,'-',month,'-',day)">
               <xsl:attribute name="id">date-test-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>date must have an @iso-8601-date the value of which must be the values of the year-month-day elements. Currently it is <xsl:text/>
                  <xsl:value-of select="@iso-8601-date"/>
                  <xsl:text/>, when it should be <xsl:text/>
                  <xsl:value-of select="concat(year,'-',month,'-',day)"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M55"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M55"/>
   <xsl:template match="@*|node()" priority="-2" mode="M55">
      <xsl:apply-templates select="*" mode="M55"/>
   </xsl:template>

   <!--PATTERN pub-date-tests-1-pattern-->


	  <!--RULE pub-date-tests-1-->
   <xsl:template match="pub-date[not(@pub-type='collection')]"
                 priority="1000"
                 mode="M56">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="pub-date[not(@pub-type='collection')]"
                       id="pub-date-tests-1"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(day,'^[0-9]{2}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(day,'^[0-9]{2}$')">
               <xsl:attribute name="id">final-pub-date-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>pub-date must contain day in the format 00. Currently it is '<xsl:text/>
                  <xsl:value-of select="day"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(month,'^[0-9]{2}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(month,'^[0-9]{2}$')">
               <xsl:attribute name="id">final-pub-date-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>pub-date must contain month in the format 00. Currently it is '<xsl:text/>
                  <xsl:value-of select="month"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(year,'^[0-9]{4}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(year,'^[0-9]{4}$')">
               <xsl:attribute name="id">pub-date-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>pub-date must contain year in the format 0000. Currently it is '<xsl:text/>
                  <xsl:value-of select="year"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M56"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M56"/>
   <xsl:template match="@*|node()" priority="-2" mode="M56">
      <xsl:apply-templates select="*" mode="M56"/>
   </xsl:template>

   <!--PATTERN pub-date-tests-2-pattern-->


	  <!--RULE pub-date-tests-2-->
   <xsl:template match="pub-date[@pub-type='collection']" priority="1000" mode="M57">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="pub-date[@pub-type='collection']"
                       id="pub-date-tests-2"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(year,'^[0-9]{4}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(year,'^[0-9]{4}$')">
               <xsl:attribute name="id">pub-date-test-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>date must contain year in the format 0000. Currently it is '<xsl:text/>
                  <xsl:value-of select="year"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="*/local-name() != 'year'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="*/local-name() != 'year'">
            <xsl:attribute name="id">pub-date-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>pub-date[@pub-type='collection'] can only contain a year element.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="year = parent::*/pub-date[@publication-format='electronic'][@date-type='publication']/year"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="year = parent::*/pub-date[@publication-format='electronic'][@date-type='publication']/year">
               <xsl:attribute name="id">pub-date-test-6</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>pub-date[@pub-type='collection'] year must be the same as pub-date[@publication-format='electronic'][@date-type='publication'] year.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M57"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M57"/>
   <xsl:template match="@*|node()" priority="-2" mode="M57">
      <xsl:apply-templates select="*" mode="M57"/>
   </xsl:template>

   <!--PATTERN front-permissions-tests-pattern-->


	  <!--RULE front-permissions-tests-->
   <xsl:template match="front//permissions" priority="1000" mode="M58">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="front//permissions"
                       id="front-permissions-tests"/>
      <xsl:variable name="author-count"
                    select="count(ancestor::article-meta//contrib[@contrib-type='author'])"/>
      <xsl:variable name="license-type" select="license/@xlink:href"/>

		    <!--REPORT error-->
      <xsl:if test="if (contains($license-type,'creativecommons.org/publicdomain/zero')) then ()       else not(copyright-statement)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if (contains($license-type,'creativecommons.org/publicdomain/zero')) then () else not(copyright-statement)">
            <xsl:attribute name="id">permissions-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>permissions must contain copyright-statement.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if (contains($license-type,'creativecommons.org/publicdomain/zero')) then ()       else not(matches(copyright-year,'^[0-9]{4}$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if (contains($license-type,'creativecommons.org/publicdomain/zero')) then () else not(matches(copyright-year,'^[0-9]{4}$'))">
            <xsl:attribute name="id">permissions-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>permissions must contain copyright-year in the format 0000. Currently it is <xsl:text/>
               <xsl:value-of select="copyright-year"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if (contains($license-type,'creativecommons.org/publicdomain/zero')) then ()       else not(copyright-holder)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if (contains($license-type,'creativecommons.org/publicdomain/zero')) then () else not(copyright-holder)">
            <xsl:attribute name="id">permissions-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>permissions must contain copyright-holder.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="ali:free_to_read"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ali:free_to_read">
               <xsl:attribute name="id">permissions-test-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>permissions must contain an ali:free_to_read element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="license"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="license">
               <xsl:attribute name="id">permissions-test-5</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>permissions must contain license.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="if (contains($license-type,'creativecommons.org/publicdomain/zero')) then ()       else not(copyright-year = ancestor::article-meta/pub-date[@publication-format='electronic'][@date-type='publication']/year)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if (contains($license-type,'creativecommons.org/publicdomain/zero')) then () else not(copyright-year = ancestor::article-meta/pub-date[@publication-format='electronic'][@date-type='publication']/year)">
            <xsl:attribute name="id">permissions-test-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>copyright-year must match the contents of the year in the pub-date[@publication-format='electronic'][@date-type='publication']. Currently, copyright-year=<xsl:text/>
               <xsl:value-of select="copyright-year"/>
               <xsl:text/> and pub-date=<xsl:text/>
               <xsl:value-of select="ancestor::article-meta/pub-date[@publication-format='electronic'][@date-type='publication']/year"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if (contains($license-type,'creativecommons.org/publicdomain/zero')) then ()       else if ($author-count = 1) then copyright-holder != ancestor::article-meta//contrib[@contrib-type='author']//surname      else if ($author-count = 2) then copyright-holder != concat(ancestor::article-meta/descendant::contrib[@contrib-type='author'][1]//surname,' and ',ancestor::article-meta/descendant::contrib[@contrib-type='author'][2]//surname)  else copyright-holder != concat(ancestor::article-meta/descendant::contrib[@contrib-type='author'][1]//surname,' et al')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if (contains($license-type,'creativecommons.org/publicdomain/zero')) then () else if ($author-count = 1) then copyright-holder != ancestor::article-meta//contrib[@contrib-type='author']//surname else if ($author-count = 2) then copyright-holder != concat(ancestor::article-meta/descendant::contrib[@contrib-type='author'][1]//surname,' and ',ancestor::article-meta/descendant::contrib[@contrib-type='author'][2]//surname) else copyright-holder != concat(ancestor::article-meta/descendant::contrib[@contrib-type='author'][1]//surname,' et al')">
            <xsl:attribute name="id">permissions-test-7</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>copyright-holder is incorrect. If the article has one author then it should be their surname. If it has two authors it should be the surname of the first, then ' and ' and then the surname of the second. If three or more, it should be the surname of the first, and then ' et al'. Currently it's <xsl:text/>
               <xsl:value-of select="copyright-holder"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if (contains($license-type,'creativecommons.org/publicdomain/zero')) then ()       else not(copyright-statement = concat('© ',copyright-year,', ',copyright-holder))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if (contains($license-type,'creativecommons.org/publicdomain/zero')) then () else not(copyright-statement = concat('© ',copyright-year,', ',copyright-holder))">
            <xsl:attribute name="id">permissions-test-8</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>copyright-statement must contain a concatenation of '© ', copyright-year, and copyright-holder. Currently it is <xsl:text/>
               <xsl:value-of select="copyright-statement"/>
               <xsl:text/> when according to the other values it should be <xsl:text/>
               <xsl:value-of select="concat('© ',copyright-year,', ',copyright-holder)"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="($license-type = 'http://creativecommons.org/publicdomain/zero/1.0/') or ($license-type = 'http://creativecommons.org/licenses/by/4.0/')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="($license-type = 'http://creativecommons.org/publicdomain/zero/1.0/') or ($license-type = 'http://creativecommons.org/licenses/by/4.0/')">
               <xsl:attribute name="id">permissions-test-9</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>license does not have an @xlink:href which is equal to 'http://creativecommons.org/publicdomain/zero/1.0/' or 'http://creativecommons.org/licenses/by/4.0/'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M58"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M58"/>
   <xsl:template match="@*|node()" priority="-2" mode="M58">
      <xsl:apply-templates select="*" mode="M58"/>
   </xsl:template>

   <!--PATTERN license-tests-pattern-->


	  <!--RULE license-tests-->
   <xsl:template match="front//permissions/license" priority="1000" mode="M59">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="front//permissions/license"
                       id="license-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="ali:license_ref"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ali:license_ref">
               <xsl:attribute name="id">license-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>license must contain ali:license_ref.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(license-p) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(license-p) = 1">
               <xsl:attribute name="id">license-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>license must contain one and only one license-p.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M59"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M59"/>
   <xsl:template match="@*|node()" priority="-2" mode="M59">
      <xsl:apply-templates select="*" mode="M59"/>
   </xsl:template>

   <!--PATTERN abstract-tests-pattern-->


	  <!--RULE abstract-tests-->
   <xsl:template match="front//abstract" priority="1000" mode="M60">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="front//abstract"
                       id="abstract-tests"/>
      <xsl:variable name="article-type" select="ancestor::article/@article-type"/>

		    <!--REPORT error-->
      <xsl:if test="if ($article-type = $features-article-types) then () else count(object-id[@pub-id-type='doi']) != 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($article-type = $features-article-types) then () else count(object-id[@pub-id-type='doi']) != 1">
            <xsl:attribute name="id">abstract-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>object-id[@pub-id-type='doi'] must be present in abstract in <xsl:text/>
               <xsl:value-of select="$article-type"/>
               <xsl:text/> content.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(count(p) + count(sec[descendant::p])) lt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(count(p) + count(sec[descendant::p])) lt 1">
            <xsl:attribute name="id">abstract-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>At least 1 p element or sec element (with descendant p) must be present in abstract.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::disp-formula">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::disp-formula">
            <xsl:attribute name="id">abstract-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>abstracts cannot contain display formulas.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M60"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M60"/>
   <xsl:template match="@*|node()" priority="-2" mode="M60">
      <xsl:apply-templates select="*" mode="M60"/>
   </xsl:template>

   <!--PATTERN aff-tests-pattern-->


	  <!--RULE aff-tests-->
   <xsl:template match="article-meta/contrib-group/aff" priority="1000" mode="M61">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-meta/contrib-group/aff"
                       id="aff-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="parent::contrib-group//contrib//xref/@rid = @id"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="parent::contrib-group//contrib//xref/@rid = @id">
               <xsl:attribute name="id">aff-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>aff elements that are direct children of contrib-group must have an xref in that contrib-group pointing to them.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M61"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M61"/>
   <xsl:template match="@*|node()" priority="-2" mode="M61">
      <xsl:apply-templates select="*" mode="M61"/>
   </xsl:template>

   <!--PATTERN funding-group-tests-pattern-->


	  <!--RULE funding-group-tests-->
   <xsl:template match="article-meta/funding-group" priority="1000" mode="M62">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-meta/funding-group"
                       id="funding-group-tests"/>
      <xsl:variable name="author-count"
                    select="count(parent::article-meta//contrib[@contrib-type='author'])"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(funding-statement) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(funding-statement) = 1">
               <xsl:attribute name="id">funding-group-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>One funding-statement should be present in funding-group.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="count(award-group) = 0">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(award-group) = 0">
            <xsl:attribute name="id">funding-group-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>funding-group contains no award-groups. Is this correct? Please check with eLife staff.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="if (count(award-group) = 0) then                     if ($author-count = 1) then funding-statement != 'The author declares that there was no funding for this work.'                     else if ($author-count gt 1) then funding-statement != 'The authors declare that there was no funding for this work.'                    else ()                  else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if (count(award-group) = 0) then if ($author-count = 1) then funding-statement != 'The author declares that there was no funding for this work.' else if ($author-count gt 1) then funding-statement != 'The authors declare that there was no funding for this work.' else () else ()">
            <xsl:attribute name="id">funding-group-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Is funding-statement this correct? Please check with eLife staff. Usually it should be 'The author[s] declare[s] that there was no funding for this work.'</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M62"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M62"/>
   <xsl:template match="@*|node()" priority="-2" mode="M62">
      <xsl:apply-templates select="*" mode="M62"/>
   </xsl:template>

   <!--PATTERN award-group-tests-pattern-->


	  <!--RULE award-group-tests-->
   <xsl:template match="funding-group/award-group" priority="1000" mode="M63">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="funding-group/award-group"
                       id="award-group-tests"/>
      <xsl:variable name="id" select="@id"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="funding-source"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="funding-source">
               <xsl:attribute name="id">award-group-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>award-group must contain a funding-source.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="principal-award-recipient"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="principal-award-recipient">
               <xsl:attribute name="id">award-group-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>award-group must contain a principal-award-recipient.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="count(award-id) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(award-id) gt 1">
            <xsl:attribute name="id">award-group-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>award-group may contain one and only one award-id.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="funding-source/institution-wrap"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="funding-source/institution-wrap">
               <xsl:attribute name="id">award-group-test-5</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>funding-source must contain an institution-wrap.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(funding-source/institution-wrap/institution) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(funding-source/institution-wrap/institution) = 1">
               <xsl:attribute name="id">award-group-test-6</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>One and only one institution must be present.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="ancestor::article//article-meta//contrib//xref/@rid = $id"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="ancestor::article//article-meta//contrib//xref/@rid = $id">
               <xsl:attribute name="id">award-group-test-7</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>There is no xref from a contrib pointing to this award-group. This is incorrect.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M63"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M63"/>
   <xsl:template match="@*|node()" priority="-2" mode="M63">
      <xsl:apply-templates select="*" mode="M63"/>
   </xsl:template>

   <!--PATTERN award-id-tests-pattern-->


	  <!--RULE award-id-tests-->
   <xsl:template match="funding-group/award-group/award-id"
                 priority="1000"
                 mode="M64">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="funding-group/award-group/award-id"
                       id="award-id-tests"/>
      <xsl:variable name="id" select="parent::award-group/@id"/>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,',|;')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,',|;')">
            <xsl:attribute name="id">award-id-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Funding entry with id <xsl:text/>
               <xsl:value-of select="$id"/>
               <xsl:text/> has a comma or semi-colon in the award id. Should this be separated out into several funding entries? - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'^\s?[Nn][/]?[\.]?[Aa][.]?\s?$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'^\s?[Nn][/]?[\.]?[Aa][.]?\s?$')">
            <xsl:attribute name="id">award-id-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Award id contains - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - This entry should be empty.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'^\s?[Nn]one[\.]?\s?$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'^\s?[Nn]one[\.]?\s?$')">
            <xsl:attribute name="id">award-id-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Award id contains - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - This entry should be empty.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M64"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M64"/>
   <xsl:template match="@*|node()" priority="-2" mode="M64">
      <xsl:apply-templates select="*" mode="M64"/>
   </xsl:template>

   <!--PATTERN institution-wrap-tests-pattern-->


	  <!--RULE institution-wrap-tests-->
   <xsl:template match="article-meta//award-group//institution-wrap"
                 priority="1000"
                 mode="M65">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-meta//award-group//institution-wrap"
                       id="institution-wrap-tests"/>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="institution-id[@institution-id-type='FundRef']"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="institution-id[@institution-id-type='FundRef']">
               <xsl:attribute name="id">institution-id-test</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>Whenever possible, institution-id[@institution-id-type="FundRef"] should be present in institution-wrap; warn staff if not</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M65"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M65"/>
   <xsl:template match="@*|node()" priority="-2" mode="M65">
      <xsl:apply-templates select="*" mode="M65"/>
   </xsl:template>

   <!--PATTERN kwd-group-tests-pattern-->


	  <!--RULE kwd-group-tests-->
   <xsl:template match="article-meta/kwd-group[not(@kwd-group-type='research-organism')]"
                 priority="1000"
                 mode="M66">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-meta/kwd-group[not(@kwd-group-type='research-organism')]"
                       id="kwd-group-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@kwd-group-type='author-keywords'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="@kwd-group-type='author-keywords'">
               <xsl:attribute name="id">kwd-group-type</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>kwd-group must have a @kwd-group-type 'research-organism', or 'author-keywords'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="kwd"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="kwd">
               <xsl:attribute name="id">non-ro-kwd-presence-test</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>kwd-group must contain at least one kwd</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M66"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M66"/>
   <xsl:template match="@*|node()" priority="-2" mode="M66">
      <xsl:apply-templates select="*" mode="M66"/>
   </xsl:template>

   <!--PATTERN ro-kwd-group-tests-pattern-->


	  <!--RULE ro-kwd-group-tests-->
   <xsl:template match="article-meta/kwd-group[@kwd-group-type='research-organism']"
                 priority="1000"
                 mode="M67">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-meta/kwd-group[@kwd-group-type='research-organism']"
                       id="ro-kwd-group-tests"/>
      <xsl:variable name="subj"
                    select="ancestor::article//subj-group[@subj-group-type='display-channel']/subject"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="title = 'Research organism'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="title = 'Research organism'">
               <xsl:attribute name="id">kwd-group-title</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>kwd-group title is <xsl:text/>
                  <xsl:value-of select="title"/>
                  <xsl:text/>, which is wrong. It should be 'Research organism'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="kwd"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="kwd">
               <xsl:attribute name="id">ro-kwd-presence-test</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>kwd-group must contain at least one kwd</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M67"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M67"/>
   <xsl:template match="@*|node()" priority="-2" mode="M67">
      <xsl:apply-templates select="*" mode="M67"/>
   </xsl:template>

   <!--PATTERN ro-kwd-tests-pattern-->


	  <!--RULE ro-kwd-tests-->
   <xsl:template match="article-meta/kwd-group[@kwd-group-type='research-organism']/kwd"
                 priority="1000"
                 mode="M68">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-meta/kwd-group[@kwd-group-type='research-organism']/kwd"
                       id="ro-kwd-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="substring(.,1,1) = upper-case(substring(.,1,1))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="substring(.,1,1) = upper-case(substring(.,1,1))">
               <xsl:attribute name="id">kwd-upper-case</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>research-organism kwd elements should start with an upper-case letter.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="*[local-name() != 'italic']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="*[local-name() != 'italic']">
            <xsl:attribute name="id">kwd-child-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>research-organism keywords cannot have child elements such as <xsl:text/>
               <xsl:value-of select="*/local-name()"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M68"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M68"/>
   <xsl:template match="@*|node()" priority="-2" mode="M68">
      <xsl:apply-templates select="*" mode="M68"/>
   </xsl:template>

   <!--PATTERN custom-meta-group-tests-pattern-->


	  <!--RULE custom-meta-group-tests-->
   <xsl:template match="article-meta/custom-meta-group" priority="1000" mode="M69">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-meta/custom-meta-group"
                       id="custom-meta-group-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(custom-meta[@specific-use='meta-only']) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(custom-meta[@specific-use='meta-only']) = 1">
               <xsl:attribute name="id">custom-meta-presence</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>custom-meta[@specific-use='meta-only'] must be present in custom-meta-group.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M69"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M69"/>
   <xsl:template match="@*|node()" priority="-2" mode="M69">
      <xsl:apply-templates select="*" mode="M69"/>
   </xsl:template>

   <!--PATTERN custom-meta-tests-pattern-->


	  <!--RULE custom-meta-tests-->
   <xsl:template match="article-meta/custom-meta-group/custom-meta"
                 priority="1000"
                 mode="M70">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-meta/custom-meta-group/custom-meta"
                       id="custom-meta-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(meta-name) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(meta-name) = 1">
               <xsl:attribute name="id">custom-meta-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>One meta-name must be present in custom-meta.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="meta-name = 'Author impact statement'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="meta-name = 'Author impact statement'">
               <xsl:attribute name="id">custom-meta-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>The value of meta-name can only be 'Author impact statement'. Currently it is <xsl:text/>
                  <xsl:value-of select="meta-name"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(meta-value) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(meta-value) = 1">
               <xsl:attribute name="id">custom-meta-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>One meta-value must be present in custom-meta.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M70"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M70"/>
   <xsl:template match="@*|node()" priority="-2" mode="M70">
      <xsl:apply-templates select="*" mode="M70"/>
   </xsl:template>

   <!--PATTERN meta-value-tests-pattern-->


	  <!--RULE meta-value-tests-->
   <xsl:template match="article-meta/custom-meta-group/custom-meta/meta-value"
                 priority="1000"
                 mode="M71">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-meta/custom-meta-group/custom-meta/meta-value"
                       id="meta-value-tests"/>
      <xsl:variable name="subj"
                    select="ancestor::article-meta//subj-group[@subj-group-type='display-channel']/subject"/>

		    <!--REPORT error-->
      <xsl:if test="not(child::*) and normalize-space(.)=''">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="not(child::*) and normalize-space(.)=''">
            <xsl:attribute name="id">custom-meta-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>The value of meta-value cannot be empty</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(for $x in tokenize(normalize-space(replace(.,'\p{P}','')),' ') return $x) gt 30">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="count(for $x in tokenize(normalize-space(replace(.,'\p{P}','')),' ') return $x) gt 30">
            <xsl:attribute name="id">final-custom-meta-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Impact statement contains more than 30 words. This is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'[\.|\?]$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[\.|\?]$')">
               <xsl:attribute name="id">final-custom-meta-test-6</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>Impact statement must end with a full stop or question mark.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[\p{L}][\p{L}]+\. .*$|[\p{L}\p{N}][\p{L}\p{N}]+\? .*$|[\p{L}\p{N}][\p{L}\p{N}]+! .*$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'[\p{L}][\p{L}]+\. .*$|[\p{L}\p{N}][\p{L}\p{N}]+\? .*$|[\p{L}\p{N}][\p{L}\p{N}]+! .*$')">
            <xsl:attribute name="id">custom-meta-test-7</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Impact statement appears to be made up of more than one sentence. Please check, as more than one sentence is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not($subj = 'Replication Study') and matches(.,'[:;]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="not($subj = 'Replication Study') and matches(.,'[:;]')">
            <xsl:attribute name="id">custom-meta-test-8</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Impact statement contains a colon or semi-colon, which is likely incorrect. It needs to be a proper sentence.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'[Ww]e show|[Tt]his study|[Tt]his paper')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'[Ww]e show|[Tt]his study|[Tt]his paper')">
            <xsl:attribute name="id">final-custom-meta-test-9</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Impact statement contains non-descriptive phrase. This is not allowed</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'^[\d]+$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^[\d]+$')">
            <xsl:attribute name="id">custom-meta-test-10</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Impact statement is comprised entirely of letters, which must be incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,' [Oo]ur |^[Oo]ur ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,' [Oo]ur |^[Oo]ur ')">
            <xsl:attribute name="id">final-custom-meta-test-12</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Impact statement contains 'our'. This is not allowed</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($subj = 'Replication Study') and not(matches(.,'^Editors[\p{Po}] Summary: '))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($subj = 'Replication Study') and not(matches(.,'^Editors[\p{Po}] Summary: '))">
            <xsl:attribute name="id">rep-study-custom-meta-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Impact statement in Replication studies must begin with 'Editors' summary: '. This does not - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M71"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M71"/>
   <xsl:template match="@*|node()" priority="-2" mode="M71">
      <xsl:apply-templates select="*" mode="M71"/>
   </xsl:template>

   <!--PATTERN meta-value-child-tests-pattern-->


	  <!--RULE meta-value-child-tests-->
   <xsl:template match="article-meta/custom-meta-group/custom-meta/meta-value/*"
                 priority="1000"
                 mode="M72">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-meta/custom-meta-group/custom-meta/meta-value/*"
                       id="meta-value-child-tests"/>
      <xsl:variable name="allowed-elements" select="('italic','sup','sub')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="local-name() = $allowed-elements"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="local-name() = $allowed-elements">
               <xsl:attribute name="id">custom-meta-child-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>
                  <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> is not allowed in impact statement.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M72"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M72"/>
   <xsl:template match="@*|node()" priority="-2" mode="M72">
      <xsl:apply-templates select="*" mode="M72"/>
   </xsl:template>

   <!--PATTERN elocation-id-tests-pattern-->


	  <!--RULE elocation-id-tests-->
   <xsl:template match="article-meta/elocation-id" priority="1000" mode="M73">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-meta/elocation-id"
                       id="elocation-id-tests"/>
      <xsl:variable name="article-id"
                    select="parent::article-meta/article-id[@pub-id-type='publisher-id']"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test=". = concat('e' , $article-id)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test=". = concat('e' , $article-id)">
               <xsl:attribute name="id">test-elocation-conformance</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>elocation-id is incorrect. It's value should be a concatenation of 'e' and the article id, in this case <xsl:text/>
                  <xsl:value-of select="concat('e',$article-id)"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M73"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M73"/>
   <xsl:template match="@*|node()" priority="-2" mode="M73">
      <xsl:apply-templates select="*" mode="M73"/>
   </xsl:template>

   <!--PATTERN volume-test-pattern-->


	  <!--RULE volume-test-->
   <xsl:template match="article-meta/volume" priority="1000" mode="M74">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-meta/volume"
                       id="volume-test"/>
      <xsl:variable name="pub-date"
                    select="parent::article-meta/pub-date[@publication-format='electronic'][@date-type='publication']/year"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test=". = number($pub-date) - 2011"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test=". = number($pub-date) - 2011">
               <xsl:attribute name="id">volume-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>Journal volume is incorrect. It should be <xsl:text/>
                  <xsl:value-of select="number($pub-date) - 2011"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M74"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M74"/>
   <xsl:template match="@*|node()" priority="-2" mode="M74">
      <xsl:apply-templates select="*" mode="M74"/>
   </xsl:template>

   <!--PATTERN equal-author-tests-pattern-->


	  <!--RULE equal-author-tests-->
   <xsl:template match="article-meta//contrib[@contrib-type='author']"
                 priority="1000"
                 mode="M75">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-meta//contrib[@contrib-type='author']"
                       id="equal-author-tests"/>

		    <!--REPORT error-->
      <xsl:if test="@equal-contrib='yes' and not(xref[matches(@rid,'^equal-contrib[0-9]$')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="@equal-contrib='yes' and not(xref[matches(@rid,'^equal-contrib[0-9]$')])">
            <xsl:attribute name="id">equal-author-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Equal authors must contain an xref[@ref-type='fn'] with an @rid that starts with 'equal-contrib' and ends in a digit.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="xref[matches(@rid,'^equal-contrib[0-9]$')] and not(@equal-contrib='yes')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="xref[matches(@rid,'^equal-contrib[0-9]$')] and not(@equal-contrib='yes')">
            <xsl:attribute name="id">equal-author-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>author contains an xref[@ref-type='fn'] with a 'equal-contrib0' type @rid, but the contrib has no @equal-contrib='yes'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M75"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M75"/>
   <xsl:template match="@*|node()" priority="-2" mode="M75">
      <xsl:apply-templates select="*" mode="M75"/>
   </xsl:template>

   <!--PATTERN object-id-tests-pattern-->


	  <!--RULE object-id-tests-->
   <xsl:template match="object-id[@pub-id-type='doi']" priority="1000" mode="M76">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="object-id[@pub-id-type='doi']"
                       id="object-id-tests"/>
      <xsl:variable name="article-id"
                    select="ancestor::article/front//article-id[@pub-id-type='publisher-id']"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="starts-with(.,concat('10.7554/eLife.' , $article-id))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="starts-with(.,concat('10.7554/eLife.' , $article-id))">
               <xsl:attribute name="id">object-id-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>object-id must start with the elife doi prefix, '10.7554/eLife.' and the article id <xsl:text/>
                  <xsl:value-of select="$article-id"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'^10.7554/eLife\.[\d]{5}\.[0-9]{3}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(.,'^10.7554/eLife\.[\d]{5}\.[0-9]{3}$')">
               <xsl:attribute name="id">object-id-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>object-id must follow this convention - '10.7554/eLife.00000.000'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="(. = preceding::object-id[@pub-id-type='doi']) or (. = following::object-id[@pub-id-type='doi'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(. = preceding::object-id[@pub-id-type='doi']) or (. = following::object-id[@pub-id-type='doi'])">
            <xsl:attribute name="id">object-id-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>object-ids must always be distinct. <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> is not distinct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M76"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M76"/>
   <xsl:template match="@*|node()" priority="-2" mode="M76">
      <xsl:apply-templates select="*" mode="M76"/>
   </xsl:template>

   <!--PATTERN p-tests-pattern-->


	  <!--RULE p-tests-->
   <xsl:template match="p" priority="1000" mode="M77">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="p" id="p-tests"/>
      <xsl:variable name="article-type" select="ancestor::article/@article-type"/>
      <xsl:variable name="text-tokens"
                    select="for $x in tokenize(.,' ') return if (matches($x,'±[Ss][Dd]|±standard|±SEM|±S\.E\.M|±s\.e\.m|\+[Ss][Dd]|\+standard|\+SEM|\+S\.E\.M|\+s\.e\.m')) then $x else ()"/>

		    <!--REPORT error-->
      <xsl:if test="@*">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@*">
            <xsl:attribute name="id">p-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>p element must not have any attributes.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count($text-tokens) = 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count($text-tokens) = 0">
               <xsl:attribute name="id">p-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>p element contains <xsl:text/>
                  <xsl:value-of select="string-join($text-tokens,', ')"/>
                  <xsl:text/> - The spacing is incorrect.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="(ancestor::body) and (descendant::*[1]/local-name() = 'bold') and not(ancestor::caption) and not(descendant::*[1]/preceding-sibling::text()) and matches(descendant::bold[1],'\p{L}') and (descendant::bold[1] != 'Related research article')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(ancestor::body) and (descendant::*[1]/local-name() = 'bold') and not(ancestor::caption) and not(descendant::*[1]/preceding-sibling::text()) and matches(descendant::bold[1],'\p{L}') and (descendant::bold[1] != 'Related research article')">
            <xsl:attribute name="id">p-test-5</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>p element starts with bolded text - <xsl:text/>
               <xsl:value-of select="descendant::*[1]"/>
               <xsl:text/> - Should it be a header?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(ancestor::body) and (string-length(.) le 100) and (preceding-sibling::*[1]/local-name() = 'p') and (string-length(preceding-sibling::p[1]) le 100) and (($article-type != 'correction') or ($article-type != 'retraction')) and not(ancestor::sub-article[@article-type='reply']) and ((count(*) != 1) and child::*/local-name() = 'supplementary-material')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(ancestor::body) and (string-length(.) le 100) and (preceding-sibling::*[1]/local-name() = 'p') and (string-length(preceding-sibling::p[1]) le 100) and (($article-type != 'correction') or ($article-type != 'retraction')) and not(ancestor::sub-article[@article-type='reply']) and ((count(*) != 1) and child::*/local-name() = 'supplementary-material')">
            <xsl:attribute name="id">p-test-6</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>p element is less than 100 characters long, and is preceded by another p element less thank 100 characters long. Should this be captured as a list-item in a list?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'^\s?•')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\s?•')">
            <xsl:attribute name="id">p-test-7</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>p element starts with a bullet point. It is very likely that this should instead be captured as a list-item in a list[@list-type='bullet']. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M77"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M77"/>
   <xsl:template match="@*|node()" priority="-2" mode="M77">
      <xsl:apply-templates select="*" mode="M77"/>
   </xsl:template>

   <!--PATTERN p-child-tests-pattern-->


	  <!--RULE p-child-tests-->
   <xsl:template match="p/*" priority="1000" mode="M78">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="p/*"
                       id="p-child-tests"/>
      <xsl:variable name="allowed-p-blocks"
                    select="('bold', 'sup', 'sub', 'sc', 'italic', 'underline', 'xref','inline-formula', 'disp-formula','supplementary-material', 'code', 'ext-link', 'named-content', 'inline-graphic', 'monospace', 'related-object', 'table-wrap')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="if (ancestor::sec[@sec-type='data-availability']) then self::*/local-name() = ($allowed-p-blocks,'element-citation')                     else self::*/local-name() = $allowed-p-blocks"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="if (ancestor::sec[@sec-type='data-availability']) then self::*/local-name() = ($allowed-p-blocks,'element-citation') else self::*/local-name() = $allowed-p-blocks">
               <xsl:attribute name="id">allowed-p-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>p element cannot contain <xsl:text/>
                  <xsl:value-of select="self::*/local-name()"/>
                  <xsl:text/>. only contain the following elements are allowed - bold, sup, sub, sc, italic, xref, inline-formula, disp-formula, supplementary-material, code, ext-link, named-content, inline-graphic, monospace, related-object.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M78"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M78"/>
   <xsl:template match="@*|node()" priority="-2" mode="M78">
      <xsl:apply-templates select="*" mode="M78"/>
   </xsl:template>

   <!--PATTERN xref-target-tests-pattern-->


	  <!--RULE xref-target-tests-->
   <xsl:template match="xref" priority="1000" mode="M79">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="xref"
                       id="xref-target-tests"/>
      <xsl:variable name="rid" select="@rid"/>
      <xsl:variable name="target" select="self::*/ancestor::article//*[@id = $rid]"/>

		    <!--REPORT error-->
      <xsl:if test="if (@ref-type='aff') then $target/local-name() != 'aff'                     else if (@ref-type='fn') then $target/local-name() != 'fn'                     else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if (@ref-type='aff') then $target/local-name() != 'aff' else if (@ref-type='fn') then $target/local-name() != 'fn' else ()">
            <xsl:attribute name="id">xref-target-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>xref with @ref-type='<xsl:text/>
               <xsl:value-of select="@ref-type"/>
               <xsl:text/>' points to <xsl:text/>
               <xsl:value-of select="$target/local-name()"/>
               <xsl:text/>. This is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M79"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M79"/>
   <xsl:template match="@*|node()" priority="-2" mode="M79">
      <xsl:apply-templates select="*" mode="M79"/>
   </xsl:template>

   <!--PATTERN ext-link-tests-pattern-->


	  <!--RULE ext-link-tests-->
   <xsl:template match="ext-link[@ext-link-type='uri']" priority="1000" mode="M80">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="ext-link[@ext-link-type='uri']"
                       id="ext-link-tests"/>
      <xsl:variable name="formatting-elems"
                    select="('bold','fixed-case','italic','monospace','overline','overline-start','overline-end','roman','sans-serif','sc','strike','underline','underline-start','underline-end','ruby','sub','sup')"/>
      <xsl:variable name="parent" select="parent::*/local-name()"/>
      <xsl:variable name="child" select="child::*/local-name()"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@xlink:href castable as xs:anyURI"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="@xlink:href castable as xs:anyURI">
               <xsl:attribute name="id">broken-uri-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>Broken URI in @xlink:href</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="matches(@xlink:href,'^https?:..(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}([-a-zA-Z0-9@:%_\+.~#?&amp;//=]*)$|^ftp://.|^git://.|^tel:.|^mailto:.')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(@xlink:href,'^https?:..(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}([-a-zA-Z0-9@:%_\+.~#?&amp;//=]*)$|^ftp://.|^git://.|^tel:.|^mailto:.')">
               <xsl:attribute name="id">url-conformance-test</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>@xlink:href doesn't look like a URL. Is this correct?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="matches(@xlink:href,'\.$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(@xlink:href,'\.$')">
            <xsl:attribute name="id">url-fullstop-report</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>'<xsl:text/>
               <xsl:value-of select="@xlink:href"/>
               <xsl:text/>' - Link ends in a fullstop which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(@xlink:href,'scicrunch\.org.*resolver') and not(matches(@xlink:href,'[0-9]$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(@xlink:href,'scicrunch\.org.*resolver') and not(matches(@xlink:href,'[0-9]$'))">
            <xsl:attribute name="id">rrid-number-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ext-link links to scicrunch but, the link does not end with a number - '<xsl:text/>
               <xsl:value-of select="@xlink:href"/>
               <xsl:text/>' - this is almost certainly incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="$parent = $formatting-elems">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="$parent = $formatting-elems">
            <xsl:attribute name="id">ext-link-parent-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ext-link - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - has a formatting parent element - <xsl:text/>
               <xsl:value-of select="$parent"/>
               <xsl:text/> - which almost certainly unnecessary.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="$child = $formatting-elems">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="$child = $formatting-elems">
            <xsl:attribute name="id">ext-link-child-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>xref - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - has a formatting child element - <xsl:text/>
               <xsl:value-of select="$child"/>
               <xsl:text/> - which is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M80"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M80"/>
   <xsl:template match="@*|node()" priority="-2" mode="M80">
      <xsl:apply-templates select="*" mode="M80"/>
   </xsl:template>

   <!--PATTERN fig-tests-pattern-->


	  <!--RULE fig-tests-->
   <xsl:template match="fig[not(ancestor::sub-article[@article-type='reply'])]"
                 priority="1000"
                 mode="M81">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="fig[not(ancestor::sub-article[@article-type='reply'])]"
                       id="fig-tests"/>
      <xsl:variable name="article-type" select="ancestor::article/@article-type"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@position"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@position">
               <xsl:attribute name="id">fig-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>fig must have a @position.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="if ($article-type = ($features-article-types,'correction','retraction')) then ()         else not(label)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($article-type = ($features-article-types,'correction','retraction')) then () else not(label)">
            <xsl:attribute name="id">fig-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>fig must have a label.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($article-type = $features-article-types) and not(label)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($article-type = $features-article-types) and not(label)">
            <xsl:attribute name="id">feat-fig-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>fig doesn't have a label. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if ($article-type = ('correction','retraction')) then ()          else not(caption)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($article-type = ('correction','retraction')) then () else not(caption)">
            <xsl:attribute name="id">fig-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>fig must have a caption.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if ($article-type = ('correction','retraction')) then ()          else not(caption/title)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($article-type = ('correction','retraction')) then () else not(caption/title)">
            <xsl:attribute name="id">final-fig-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>fig caption must have a title.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="if ($article-type = ('correction','retraction')) then ()          else (matches(@id,'^fig[0-9]{1,3}$') and not(caption/p))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($article-type = ('correction','retraction')) then () else (matches(@id,'^fig[0-9]{1,3}$') and not(caption/p))">
            <xsl:attribute name="id">fig-test-6</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Figure does not have a legend, which is very unorthadox. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="graphic"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="graphic">
               <xsl:attribute name="id">final-fig-test-7</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>fig must have a graphic.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M81"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M81"/>
   <xsl:template match="@*|node()" priority="-2" mode="M81">
      <xsl:apply-templates select="*" mode="M81"/>
   </xsl:template>

   <!--PATTERN ar-fig-tests-pattern-->


	  <!--RULE ar-fig-tests-->
   <xsl:template match="fig[ancestor::sub-article[@article-type='reply']]"
                 priority="1000"
                 mode="M82">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="fig[ancestor::sub-article[@article-type='reply']]"
                       id="ar-fig-tests"/>
      <xsl:variable name="article-type" select="ancestor::article/@article-type"/>

		    <!--REPORT error-->
      <xsl:if test="if ($article-type = ($features-article-types,'correction','retraction')) then ()         else not(label)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($article-type = ($features-article-types,'correction','retraction')) then () else not(label)">
            <xsl:attribute name="id">ar-fig-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Author Response fig must have a label.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="graphic"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="graphic">
               <xsl:attribute name="id">final-ar-fig-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>Author Response fig must have a graphic.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M82"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M82"/>
   <xsl:template match="@*|node()" priority="-2" mode="M82">
      <xsl:apply-templates select="*" mode="M82"/>
   </xsl:template>

   <!--PATTERN graphic-tests-pattern-->


	  <!--RULE graphic-tests-->
   <xsl:template match="graphic" priority="1000" mode="M83">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="graphic"
                       id="graphic-tests"/>
      <xsl:variable name="file" select="@xlink:href"/>

		    <!--REPORT error-->
      <xsl:if test="contains(@mime-subtype,'tiff') and not(ends-with($file,'.tif'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="contains(@mime-subtype,'tiff') and not(ends-with($file,'.tif'))">
            <xsl:attribute name="id">graphic-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>graphic has tif mime-subtype but filename does not end with '.tif'. This cannot be correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains(@mime-subtype,'postscript') and not(ends-with($file,'.eps'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="contains(@mime-subtype,'postscript') and not(ends-with($file,'.eps'))">
            <xsl:attribute name="id">graphic-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>graphic has postscript mime-subtype but filename does not end with '.eps'. This cannot be correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains(@mime-subtype,'jpeg') and not(ends-with($file,'.jpg'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="contains(@mime-subtype,'jpeg') and not(ends-with($file,'.jpg'))">
            <xsl:attribute name="id">graphic-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>graphic has jpeg mime-subtype but filename does not end with '.jpg'. This cannot be correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M83"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M83"/>
   <xsl:template match="@*|node()" priority="-2" mode="M83">
      <xsl:apply-templates select="*" mode="M83"/>
   </xsl:template>

   <!--PATTERN media-tests-pattern-->


	  <!--RULE media-tests-->
   <xsl:template match="media" priority="1000" mode="M84">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="media"
                       id="media-tests"/>
      <xsl:variable name="file" select="@mime-subtype"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@mimetype"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@mimetype">
               <xsl:attribute name="id">media-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>media must have @mimetype.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@mime-subtype"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@mime-subtype">
               <xsl:attribute name="id">media-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>media must have @mime-subtype.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@xlink:href"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@xlink:href">
               <xsl:attribute name="id">media-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>media must have @xlink:href.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="if ($file='octet-stream') then ()                     else if ($file = 'msword') then not(matches(@xlink:href,'\.doc[x]?$'))                     else if ($file = 'excel') then not(matches(@xlink:href,'\.xl[s|t|m][x|m|b]?$'))                     else if ($file='x-m') then not(matches(@xlink:href,'\.m$'))                     else if ($file='tab-separated-values') then not(matches(@xlink:href,'\.tsv$'))                     else if ($file='jpeg') then not(matches(@xlink:href,'\.[Jj][Pp][Gg]$'))                     else if ($file='postscript') then not(matches(@xlink:href,'\.[Aa][Ii]$|\.[Pp][Ss]$'))                     else if ($file='x-tex') then not(matches(@xlink:href,'\.tex$'))                     else if ($file='x-gzip') then not(matches(@xlink:href,'\.tsv\.gz$'))                     else if ($file='html') then not(matches(@xlink:href,'\.html$'))                     else if (@mimetype='text') then not(matches(@xlink:href,'\.txt$|\.py$|\.xml$|\.sh$'))                     else not(ends-with(@xlink:href,concat('.',$file)))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($file='octet-stream') then () else if ($file = 'msword') then not(matches(@xlink:href,'\.doc[x]?$')) else if ($file = 'excel') then not(matches(@xlink:href,'\.xl[s|t|m][x|m|b]?$')) else if ($file='x-m') then not(matches(@xlink:href,'\.m$')) else if ($file='tab-separated-values') then not(matches(@xlink:href,'\.tsv$')) else if ($file='jpeg') then not(matches(@xlink:href,'\.[Jj][Pp][Gg]$')) else if ($file='postscript') then not(matches(@xlink:href,'\.[Aa][Ii]$|\.[Pp][Ss]$')) else if ($file='x-tex') then not(matches(@xlink:href,'\.tex$')) else if ($file='x-gzip') then not(matches(@xlink:href,'\.tsv\.gz$')) else if ($file='html') then not(matches(@xlink:href,'\.html$')) else if (@mimetype='text') then not(matches(@xlink:href,'\.txt$|\.py$|\.xml$|\.sh$')) else not(ends-with(@xlink:href,concat('.',$file)))">
            <xsl:attribute name="id">media-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>media must have a file reference in @xlink:href which is equivalent to its @mime-subtype.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(label,'^Animation [0-9]{1,3}') and not(@mime-subtype='gif')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(label,'^Animation [0-9]{1,3}') and not(@mime-subtype='gif')">
            <xsl:attribute name="id">media-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>media whose label is in the format 'Animation 0' must have a @mime-subtype='gif'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(@xlink:href,'\.doc[x]?$|\.pdf$|\.xlsx$|\.xml$|\.xlsx$|\.mp4$|\.gif$')  and (@mime-subtype='octet-stream')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(@xlink:href,'\.doc[x]?$|\.pdf$|\.xlsx$|\.xml$|\.xlsx$|\.mp4$|\.gif$') and (@mime-subtype='octet-stream')">
            <xsl:attribute name="id">media-test-6</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>media has @mime-subtype='octet-stream', but the file reference ends with a recognised mime-type. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if (child::label) then not(matches(label,'^Video \d{1,4}\.$|^Figure \d{1,4}—video \d{1,4}\.$|^Table \d{1,4}—video \d{1,4}\.$|^Appendix \d{1,4}—video \d{1,4}\.$|^Animation \d{1,4}\.$|^Author response video \d{1,4}\.$'))         else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if (child::label) then not(matches(label,'^Video \d{1,4}\.$|^Figure \d{1,4}—video \d{1,4}\.$|^Table \d{1,4}—video \d{1,4}\.$|^Appendix \d{1,4}—video \d{1,4}\.$|^Animation \d{1,4}\.$|^Author response video \d{1,4}\.$')) else ()">
            <xsl:attribute name="id">media-test-7</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>video label does not conform to eLife's usual label format.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if (ancestor::sec[@sec-type='supplementary-material']) then ()         else if (@mimetype='video') then (not(label))         else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if (ancestor::sec[@sec-type='supplementary-material']) then () else if (@mimetype='video') then (not(label)) else ()">
            <xsl:attribute name="id">media-test-8</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>video does not contain a label, which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(lower-case(@xlink:href),'\.xml$|\.html$|\.json$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(lower-case(@xlink:href),'\.xml$|\.html$|\.json$')">
            <xsl:attribute name="id">media-test-9</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>media points to an xml, html or json file. This cannot be handled by Kriya currently. Please download the file, place it in a zip and replace the file with this zip (otherwise the file will be erroenously overwritten before publication).</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M84"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M84"/>
   <xsl:template match="@*|node()" priority="-2" mode="M84">
      <xsl:apply-templates select="*" mode="M84"/>
   </xsl:template>

   <!--PATTERN video-test-pattern-->


	  <!--RULE video-test-->
   <xsl:template match="media[child::label]" priority="1000" mode="M85">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="media[child::label]"
                       id="video-test"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="caption/title"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="caption/title">
               <xsl:attribute name="id">final-video-title</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>
                  <xsl:text/>
                  <xsl:value-of select="label"/>
                  <xsl:text/> does not have a title, which is incorrect.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M85"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M85"/>
   <xsl:template match="@*|node()" priority="-2" mode="M85">
      <xsl:apply-templates select="*" mode="M85"/>
   </xsl:template>

   <!--PATTERN supplementary-material-tests-pattern-->


	  <!--RULE supplementary-material-tests-->
   <xsl:template match="supplementary-material" priority="1000" mode="M86">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="supplementary-material"
                       id="supplementary-material-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="label"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="label">
               <xsl:attribute name="id">supplementary-material-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>supplementary-material must have a label.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="if (contains(label,'Transparent reporting form')) then ()                      else not(caption)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if (contains(label,'Transparent reporting form')) then () else not(caption)">
            <xsl:attribute name="id">supplementary-material-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>supplementary-material have a child caption.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="if (caption) then not(caption/title)         else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if (caption) then not(caption/title) else ()">
            <xsl:attribute name="id">final-supplementary-material-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="label"/>
               <xsl:text/> doesn't have a title. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="media"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="media">
               <xsl:attribute name="id">supplementary-material-test-5</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>supplementary-material must have a media.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(label,'^Transparent reporting form$|^Figure \d{1,4}—source data \d{1,4}\.$|^Figure \d{1,4}—figure supplement \d{1,4}—source data \d{1,4}\.$|^Table \d{1,4}—source data \d{1,4}\.$|^Video \d{1,4}—source data \d{1,4}\.$|^Figure \d{1,4}—source code \d{1,4}\.$|^Figure \d{1,4}—figure supplement \d{1,4}—source code \d{1,4}\.$|^Table \d{1,4}—source code \d{1,4}\.$|^Video \d{1,4}—source code \d{1,4}\.$|^Supplementary file \d{1,4}\.$|^Source data \d{1,4}\.$|^Source code \d{1,4}\.$|^Reporting standard \d{1,4}\.$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(label,'^Transparent reporting form$|^Figure \d{1,4}—source data \d{1,4}\.$|^Figure \d{1,4}—figure supplement \d{1,4}—source data \d{1,4}\.$|^Table \d{1,4}—source data \d{1,4}\.$|^Video \d{1,4}—source data \d{1,4}\.$|^Figure \d{1,4}—source code \d{1,4}\.$|^Figure \d{1,4}—figure supplement \d{1,4}—source code \d{1,4}\.$|^Table \d{1,4}—source code \d{1,4}\.$|^Video \d{1,4}—source code \d{1,4}\.$|^Supplementary file \d{1,4}\.$|^Source data \d{1,4}\.$|^Source code \d{1,4}\.$|^Reporting standard \d{1,4}\.$')">
               <xsl:attribute name="id">supplementary-material-test-6</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>supplementary-material label does not conform to eLife's usual label format.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="(ancestor::sec[@sec-type='supplementary-material']) and (media[@mimetype='video'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(ancestor::sec[@sec-type='supplementary-material']) and (media[@mimetype='video'])">
            <xsl:attribute name="id">supplementary-material-test-7</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>supplementary-material in additional files sections cannot have the a media element with the attribute mimetype='video'. This should be mimetype='application'</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(label,'^Transparent reporting form$|^Supplementary file \d{1,4}\.$|^Source data \d{1,4}\.$|^Source code \d{1,4}\.$|^Reporting standard \d{1,4}\.$') and not(ancestor::sec[@sec-type='supplementary-material'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(label,'^Transparent reporting form$|^Supplementary file \d{1,4}\.$|^Source data \d{1,4}\.$|^Source code \d{1,4}\.$|^Reporting standard \d{1,4}\.$') and not(ancestor::sec[@sec-type='supplementary-material'])">
            <xsl:attribute name="id">supplementary-material-test-8</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="label"/>
               <xsl:text/> has an article level label but it is not captured in the additional files section - This must be incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M86"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M86"/>
   <xsl:template match="@*|node()" priority="-2" mode="M86">
      <xsl:apply-templates select="*" mode="M86"/>
   </xsl:template>

   <!--PATTERN source-data-specific-tests-pattern-->


	  <!--RULE source-data-specific-tests-->
   <xsl:template match="supplementary-material[(ancestor::fig) or (ancestor::media) or (ancestor::table-wrap)]"
                 priority="1000"
                 mode="M87">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="supplementary-material[(ancestor::fig) or (ancestor::media) or (ancestor::table-wrap)]"
                       id="source-data-specific-tests"/>

		    <!--REPORT warning-->
      <xsl:if test="matches(label,'^Figure \d{1,4}—source data \d{1,4}') and (descendant::xref[contains(.,'upplement')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(label,'^Figure \d{1,4}—source data \d{1,4}') and (descendant::xref[contains(.,'upplement')])">
            <xsl:attribute name="id">fig-data-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="label"/>
               <xsl:text/> is figure level source data, but contains a link to a figure supplement - should it be figure supplement source data?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M87"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M87"/>
   <xsl:template match="@*|node()" priority="-2" mode="M87">
      <xsl:apply-templates select="*" mode="M87"/>
   </xsl:template>

   <!--PATTERN disp-formula-tests-pattern-->


	  <!--RULE disp-formula-tests-->
   <xsl:template match="disp-formula" priority="1000" mode="M88">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="disp-formula"
                       id="disp-formula-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="mml:math"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="mml:math">
               <xsl:attribute name="id">disp-formula-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>disp-formula must contain an mml:math element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M88"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M88"/>
   <xsl:template match="@*|node()" priority="-2" mode="M88">
      <xsl:apply-templates select="*" mode="M88"/>
   </xsl:template>

   <!--PATTERN inline-formula-tests-pattern-->


	  <!--RULE inline-formula-tests-->
   <xsl:template match="inline-formula" priority="1000" mode="M89">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="inline-formula"
                       id="inline-formula-tests"/>
      <xsl:variable name="pre-text" select="preceding-sibling::text()[1]"/>
      <xsl:variable name="post-text" select="following-sibling::text()[1]"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="mml:math"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="mml:math">
               <xsl:attribute name="id">inline-formula-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>inline-formula must contain an mml:math element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-text,'[\p{L}\p{N}\p{M}]$') and not(matches(.,'^\s+'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($pre-text,'[\p{L}\p{N}\p{M}]$') and not(matches(.,'^\s+'))">
            <xsl:attribute name="id">inline-formula-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>There is no space between inline-formula and the preceding text - <xsl:text/>
               <xsl:value-of select="concat(substring($pre-text,string-length($pre-text)-15),.)"/>
               <xsl:text/> - Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($post-text,'^[\p{L}\p{N}\p{M}]') and not(matches(.,'\s+$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($post-text,'^[\p{L}\p{N}\p{M}]') and not(matches(.,'\s+$'))">
            <xsl:attribute name="id">inline-formula-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>There is no space between inline-formula and the following text - <xsl:text/>
               <xsl:value-of select="concat(.,substring($post-text,1,15))"/>
               <xsl:text/> - Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M89"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M89"/>
   <xsl:template match="@*|node()" priority="-2" mode="M89">
      <xsl:apply-templates select="*" mode="M89"/>
   </xsl:template>

   <!--PATTERN math-tests-pattern-->


	  <!--RULE math-tests-->
   <xsl:template match="mml:math" priority="1000" mode="M90">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="mml:math"
                       id="math-tests"/>
      <xsl:variable name="data" select="replace(normalize-space(.),'\s','')"/>
      <xsl:variable name="children"
                    select="string-join(for $x in .//*[(local-name()!='mo') and (local-name()!='mn') and (normalize-space(.)!='')] return $x/local-name(),'')"/>

		    <!--REPORT error-->
      <xsl:if test="$data = ''">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$data = ''">
            <xsl:attribute name="id">math-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>mml:math must not be empty.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::mml:merror">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::mml:merror">
            <xsl:attribute name="id">math-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>math contains an mml:merror with '<xsl:text/>
               <xsl:value-of select="descendant::mml:merror[1]/*"/>
               <xsl:text/>'. This will almost certainly not render correctly.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(matches($data,'^±$|^±[\d]+$|^±[\d]+\.[\d]+$|^×$|^~$|^~[\d]+$|^~[\d]+\.[\d]+$|^%[\d]+$|^%[\d]+\.[\d]+$|^%$|^±\d+%$|^+\d+%$|^-\d+%$|^\d+%$|^±\d+$|^+\d+$|^-\d+$')) and ($children='')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="not(matches($data,'^±$|^±[\d]+$|^±[\d]+\.[\d]+$|^×$|^~$|^~[\d]+$|^~[\d]+\.[\d]+$|^%[\d]+$|^%[\d]+\.[\d]+$|^%$|^±\d+%$|^+\d+%$|^-\d+%$|^\d+%$|^±\d+$|^+\d+$|^-\d+$')) and ($children='')">
            <xsl:attribute name="id">math-test-14</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>mml:math only contains numbers and/or operators - '<xsl:text/>
               <xsl:value-of select="$data"/>
               <xsl:text/>'. Is it necessary for this to be set as a formlua, or can it be captured with as normal text instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="$data = '±'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$data = '±'">
            <xsl:attribute name="id">math-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>mml:math only contains '±', which is unnecessary. Cature this as a normal text '±' instead.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($data,'^±[\d]+$|^±[\d]+\.[\d]+$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($data,'^±[\d]+$|^±[\d]+\.[\d]+$')">
            <xsl:attribute name="id">math-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>mml:math only contains '±' followed by digits, which is unnecessary. Cature this as a normal text instead.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="$data = '×'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$data = '×'">
            <xsl:attribute name="id">math-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>mml:math only contains '×', which is unnecessary. Cature this as a normal text '×' instead.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="$data = '~'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$data = '~'">
            <xsl:attribute name="id">math-test-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>mml:math only contains '~', which is unnecessary. Cature this as a normal text '~' instead.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($data,'^~[\d]+$|^~[\d]+\.[\d]+$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($data,'^~[\d]+$|^~[\d]+\.[\d]+$')">
            <xsl:attribute name="id">math-test-7</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>mml:math only contains '~' and digits, which is unnecessary. Cature this as a normal text instead.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="$data = 'μ'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$data = 'μ'">
            <xsl:attribute name="id">math-test-8</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>mml:math only contains 'μ', which is likely unnecessary. Should this be captured as a normal text 'μ' instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($data,'^[\d]+%$|^[\d]+\.[\d]+%$|^%$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($data,'^[\d]+%$|^[\d]+\.[\d]+%$|^%$')">
            <xsl:attribute name="id">math-test-9</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>mml:math only contains '%' and digits, which is unnecessary. Cature this as a normal text instead.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($data,'^%$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($data,'^%$')">
            <xsl:attribute name="id">math-test-12</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>mml:math only contains '%', which is unnecessary. Cature this as a normal text instead.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="$data = '°'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$data = '°'">
            <xsl:attribute name="id">math-test-10</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>mml:math only contains '°', which is likely unnecessary. This should be captured as a normal text '°' instead.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($data,'○')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches($data,'○')">
            <xsl:attribute name="id">math-test-11</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>mml:math contains '○' (the white circle symbol). Should this be the degree symbol instead - '°', or '∘' (the ring operator symbol)?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($data,'^±\d+%$|^+\d+%$|^-\d+%$|^\d+%$|^±\d+$|^+\d+$|^-\d+$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($data,'^±\d+%$|^+\d+%$|^-\d+%$|^\d+%$|^±\d+$|^+\d+$|^-\d+$')">
            <xsl:attribute name="id">math-test-13</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>mml:math only contains '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>', which is likely unnecessary. Should this be captured as normal text instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($data,'^Na[2]?\+$|^Ca2\+$|^K\+$|^Cu[2]?\+$|^Ag\+$|^Hg[2]?\+$|^H\+$|^Mg2\+$|^Ba2\+$|^Pb2\+$|^Fe2\+$|^Co2\+$|^Ni2\+$|^Mn2\+$|^Zn2\+$|^Al3\+$|^Fe3\+$|^Cr3\+$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($data,'^Na[2]?\+$|^Ca2\+$|^K\+$|^Cu[2]?\+$|^Ag\+$|^Hg[2]?\+$|^H\+$|^Mg2\+$|^Ba2\+$|^Pb2\+$|^Fe2\+$|^Co2\+$|^Ni2\+$|^Mn2\+$|^Zn2\+$|^Al3\+$|^Fe3\+$|^Cr3\+$')">
            <xsl:attribute name="id">math-test-15</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>mml:math seems to only contain the formula for a cation - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' - which is likely unnecessary. Should this be captured as normal text instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($data,'^H\-$|^Cl\-$|^Br\-$|^I\-$|^OH\-$|^NO3\-$|^NO2\-$|^HCO3\-$|^HSO4\-$|^CN\-$|^MnO4\-$|^ClO[3]?\-$|^O2\-$|^S2\-$|^SO42\-$|^SO32\-$|^S2O32\-$|^SiO32\-$|^CO32\-$|^CrO42\-$|^Cr2O72\-$|^N3\-$|^P3\-$|^PO43\-$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($data,'^H\-$|^Cl\-$|^Br\-$|^I\-$|^OH\-$|^NO3\-$|^NO2\-$|^HCO3\-$|^HSO4\-$|^CN\-$|^MnO4\-$|^ClO[3]?\-$|^O2\-$|^S2\-$|^SO42\-$|^SO32\-$|^S2O32\-$|^SiO32\-$|^CO32\-$|^CrO42\-$|^Cr2O72\-$|^N3\-$|^P3\-$|^PO43\-$')">
            <xsl:attribute name="id">math-test-16</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>mml:math seems to only contain the formula for an anion - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' - which is likely unnecessary. Should this be captured as normal text instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M90"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M90"/>
   <xsl:template match="@*|node()" priority="-2" mode="M90">
      <xsl:apply-templates select="*" mode="M90"/>
   </xsl:template>

   <!--PATTERN table-wrap-tests-pattern-->


	  <!--RULE table-wrap-tests-->
   <xsl:template match="table-wrap" priority="1000" mode="M91">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="table-wrap"
                       id="table-wrap-tests"/>
      <xsl:variable name="id" select="@id"/>
      <xsl:variable name="lab" select="label"/>
      <xsl:variable name="article-type" select="ancestor::article/@article-type"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="table"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="table">
               <xsl:attribute name="id">table-wrap-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>table-wrap must have one table.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="count(table) &gt; 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(table) &gt; 1">
            <xsl:attribute name="id">table-wrap-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>table-wrap has more than one table - Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(contains($id,'inline')) and (normalize-space($lab) != '')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(contains($id,'inline')) and (normalize-space($lab) != '')">
            <xsl:attribute name="id">table-wrap-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>table-wrap has an inline id <xsl:text/>
               <xsl:value-of select="$id"/>
               <xsl:text/> but it has a label - <xsl:text/>
               <xsl:value-of select="$lab"/>
               <xsl:text/>, which is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(matches($id,'^table[0-9]{1,3}$')) and (normalize-space($lab) = '')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(matches($id,'^table[0-9]{1,3}$')) and (normalize-space($lab) = '')">
            <xsl:attribute name="id">table-wrap-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>table-wrap with id <xsl:text/>
               <xsl:value-of select="$id"/>
               <xsl:text/> has no label which is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($id = 'keyresource') and ($lab != 'Key resources table')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($id = 'keyresource') and ($lab != 'Key resources table')">
            <xsl:attribute name="id">kr-table-wrap-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>table-wrap has an id <xsl:text/>
               <xsl:value-of select="$id"/>
               <xsl:text/> but it's label is not 'Key resources table', which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if ($id = 'keyresource') then ()         else if (contains($id,'inline')) then ()         else if ($article-type = ($features-article-types,'correction','retraction')) then ()         else if (ancestor::app) then ()         else not(ancestor::article//xref[@rid = $id])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($id = 'keyresource') then () else if (contains($id,'inline')) then () else if ($article-type = ($features-article-types,'correction','retraction')) then () else if (ancestor::app) then () else not(ancestor::article//xref[@rid = $id])">
            <xsl:attribute name="id">final-table-wrap-cite-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>There is no citation to <xsl:text/>
               <xsl:value-of select="$lab"/>
               <xsl:text/> Ensure this is added.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="if (contains($id,'inline')) then ()          else if ($article-type = $features-article-types) then (not(ancestor::article//xref[@rid = $id]))         else if (ancestor::app) then (not(ancestor::article//xref[@rid = $id]))         else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if (contains($id,'inline')) then () else if ($article-type = $features-article-types) then (not(ancestor::article//xref[@rid = $id])) else if (ancestor::app) then (not(ancestor::article//xref[@rid = $id])) else ()">
            <xsl:attribute name="id">feat-table-wrap-cite-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>There is no citation to <xsl:text/>
               <xsl:value-of select="if (label) then label else 'table.'"/>
               <xsl:text/> Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($id != 'keyresource') and matches(descendant::thead[1],'[Rr]eagent\s?type\s?\(species\)\s?or resource\s?[Dd]esignation\s?[Ss]ource\s?or\s?reference\s?[Ii]dentifiers\s?[Aa]dditional\s?information')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($id != 'keyresource') and matches(descendant::thead[1],'[Rr]eagent\s?type\s?\(species\)\s?or resource\s?[Dd]esignation\s?[Ss]ource\s?or\s?reference\s?[Ii]dentifiers\s?[Aa]dditional\s?information')">
            <xsl:attribute name="id">kr-table-not-tagged</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="$lab"/>
               <xsl:text/> has headings that are for the Key reources table, but it does not have an @id='keyresource'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M91"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M91"/>
   <xsl:template match="@*|node()" priority="-2" mode="M91">
      <xsl:apply-templates select="*" mode="M91"/>
   </xsl:template>

   <!--PATTERN body-table-label-tests-pattern-->


	  <!--RULE body-table-label-tests-->
   <xsl:template match="body//table-wrap/label" priority="1000" mode="M92">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="body//table-wrap/label"
                       id="body-table-label-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'^Table \d{1,4}\.$|^Key resources table$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(.,'^Table \d{1,4}\.$|^Key resources table$')">
               <xsl:attribute name="id">body-table-label-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>
                  <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> - Table label does not conform to the usual format.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M92"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M92"/>
   <xsl:template match="@*|node()" priority="-2" mode="M92">
      <xsl:apply-templates select="*" mode="M92"/>
   </xsl:template>

   <!--PATTERN app-table-label-tests-pattern-->


	  <!--RULE app-table-label-tests-->
   <xsl:template match="app//table-wrap/label" priority="1000" mode="M93">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="app//table-wrap/label"
                       id="app-table-label-tests"/>
      <xsl:variable name="app" select="ancestor::app/title"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'^Appendix \d{1,4}—table \d{1,4}\.$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(.,'^Appendix \d{1,4}—table \d{1,4}\.$')">
               <xsl:attribute name="id">app-table-label-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>
                  <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> - Table label does not conform to the usual format.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="starts-with(.,$app)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="starts-with(.,$app)">
               <xsl:attribute name="id">app-table-label-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>
                  <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> - Table label does not begin with the title of the appendix it sits in. Either the table is in the incorrect appendix or the table has been labelled incorrectly.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M93"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M93"/>
   <xsl:template match="@*|node()" priority="-2" mode="M93">
      <xsl:apply-templates select="*" mode="M93"/>
   </xsl:template>

   <!--PATTERN table-tests-pattern-->


	  <!--RULE table-tests-->
   <xsl:template match="table" priority="1000" mode="M94">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="table"
                       id="table-tests"/>

		    <!--REPORT error-->
      <xsl:if test="count(tbody) = 0">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(tbody) = 0">
            <xsl:attribute name="id">table-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>table must have at least one tbody.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="thead"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="thead">
               <xsl:attribute name="id">table-test-2</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>table doesn't have a thead. Is this correct?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M94"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M94"/>
   <xsl:template match="@*|node()" priority="-2" mode="M94">
      <xsl:apply-templates select="*" mode="M94"/>
   </xsl:template>

   <!--PATTERN tbody-tests-pattern-->


	  <!--RULE tbody-tests-->
   <xsl:template match="table/tbody" priority="1000" mode="M95">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="table/tbody"
                       id="tbody-tests"/>

		    <!--REPORT error-->
      <xsl:if test="count(tr) = 0">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(tr) = 0">
            <xsl:attribute name="id">tbody-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>tbody must have at least one tr.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M95"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M95"/>
   <xsl:template match="@*|node()" priority="-2" mode="M95">
      <xsl:apply-templates select="*" mode="M95"/>
   </xsl:template>

   <!--PATTERN thead-tests-pattern-->


	  <!--RULE thead-tests-->
   <xsl:template match="table/thead" priority="1000" mode="M96">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="table/thead"
                       id="thead-tests"/>

		    <!--REPORT error-->
      <xsl:if test="count(tr) = 0">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(tr) = 0">
            <xsl:attribute name="id">thead-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>thead must have at least one tr.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M96"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M96"/>
   <xsl:template match="@*|node()" priority="-2" mode="M96">
      <xsl:apply-templates select="*" mode="M96"/>
   </xsl:template>

   <!--PATTERN tr-tests-pattern-->


	  <!--RULE tr-tests-->
   <xsl:template match="tr" priority="1000" mode="M97">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="tr" id="tr-tests"/>
      <xsl:variable name="count" select="count(th) + count(td)"/>

		    <!--REPORT error-->
      <xsl:if test="$count = 0">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$count = 0">
            <xsl:attribute name="id">tr-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>tr must contain at least one th or td.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="th and (tr/parent::tbody)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="th and (tr/parent::tbody)">
            <xsl:attribute name="id">tr-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>table row in body contains a th element (a header), which is unusual. Please check that this is correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="td and (tr/parent::thead)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="td and (tr/parent::thead)">
            <xsl:attribute name="id">tr-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>table row in body contains a td element (table data), which is unusual. Please check that this is correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M97"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M97"/>
   <xsl:template match="@*|node()" priority="-2" mode="M97">
      <xsl:apply-templates select="*" mode="M97"/>
   </xsl:template>

   <!--PATTERN td-child-tests-pattern-->


	  <!--RULE td-child-tests-->
   <xsl:template match="td/*" priority="1000" mode="M98">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="td/*"
                       id="td-child-tests"/>
      <xsl:variable name="allowed-blocks"
                    select="('bold','italic','sup','sub','sc','ext-link','xref', 'break', 'named-content', 'monospace', 'code','inline-graphic','underline','inline-formula')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="self::*/local-name() = $allowed-blocks"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="self::*/local-name() = $allowed-blocks">
               <xsl:attribute name="id">td-child-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>td cannot contain <xsl:text/>
                  <xsl:value-of select="self::*/local-name()"/>
                  <xsl:text/>. Only the following elements are allowed - 'bold','italic','sup','sub','sc','ext-link', 'break', 'named-content', 'monospace', and 'xref'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M98"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M98"/>
   <xsl:template match="@*|node()" priority="-2" mode="M98">
      <xsl:apply-templates select="*" mode="M98"/>
   </xsl:template>

   <!--PATTERN th-child-tests-pattern-->


	  <!--RULE th-child-tests-->
   <xsl:template match="th/*" priority="1000" mode="M99">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="th/*"
                       id="th-child-tests"/>
      <xsl:variable name="allowed-blocks"
                    select="('italic','sup','sub','sc','ext-link','xref', 'break', 'named-content', 'monospace','inline-formula')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="self::*/local-name() = ($allowed-blocks,'bold')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="self::*/local-name() = ($allowed-blocks,'bold')">
               <xsl:attribute name="id">th-child-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>th cannot contain <xsl:text/>
                  <xsl:value-of select="self::*/local-name()"/>
                  <xsl:text/>. Only the following elements are allowed - 'italic','sup','sub','sc','ext-link', 'break', 'named-content', 'monospace' and 'xref'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="self::*/local-name() = 'bold'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="self::*/local-name() = 'bold'">
            <xsl:attribute name="id">th-child-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>th contains bold. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M99"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M99"/>
   <xsl:template match="@*|node()" priority="-2" mode="M99">
      <xsl:apply-templates select="*" mode="M99"/>
   </xsl:template>

   <!--PATTERN fn-tests-pattern-->


	  <!--RULE fn-tests-->
   <xsl:template match="fn[@id][not(@fn-type='other')]" priority="1000" mode="M100">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="fn[@id][not(@fn-type='other')]"
                       id="fn-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="ancestor::article//xref/@rid = @id"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="ancestor::article//xref/@rid = @id">
               <xsl:attribute name="id">fn-xref-presence-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>fn element with an id must have at least one xref element pointing to it.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M100"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M100"/>
   <xsl:template match="@*|node()" priority="-2" mode="M100">
      <xsl:apply-templates select="*" mode="M100"/>
   </xsl:template>

   <!--PATTERN list-item-tests-pattern-->


	  <!--RULE list-item-tests-->
   <xsl:template match="list-item" priority="1000" mode="M101">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="list-item"
                       id="list-item-tests"/>
      <xsl:variable name="type" select="ancestor::list[1]/@list-type"/>

		    <!--REPORT error-->
      <xsl:if test="($type='bullet') and matches(.,'^\s?•')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($type='bullet') and matches(.,'^\s?•')">
            <xsl:attribute name="id">bullet-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>list-item is part of bullet list, but it also begins with a '•', which means that two will output. Remove the unnecessary '•' from the beginning of the list-item.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($type='simple') and matches(.,'^\s?•')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($type='simple') and matches(.,'^\s?•')">
            <xsl:attribute name="id">bullet-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>list-item is part of simple list, but it begins with a '•'. Remove the unnecessary '•' and capture the list as a bullet type list.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type='order') and matches(.,'^\s?\d+')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($type='order') and matches(.,'^\s?\d+')">
            <xsl:attribute name="id">order-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>list-item is part of an ordered list, but it begins with a number. Is this correct? <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type='alpha-lower') and matches(.,'^\s?[a-h|j-w|y-z][\.|\)]? ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($type='alpha-lower') and matches(.,'^\s?[a-h|j-w|y-z][\.|\)]? ')">
            <xsl:attribute name="id">alpha-lower-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>list-item is part of an alpha-lower list, but it begins with a single lower-case letter. Is this correct? <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type='alpha-upper') and matches(.,'^\s?[A-H|J-W|Y-Z][\.|\)]? ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($type='alpha-upper') and matches(.,'^\s?[A-H|J-W|Y-Z][\.|\)]? ')">
            <xsl:attribute name="id">alpha-upper-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>list-item is part of an alpha-upper list, but it begins with a single upper-case letter. Is this correct? <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type='roman-lower') and matches(.,'^\s?(i|ii|iii|iv|v|vi|vii|viii|ix|x)[\.|\)]? ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($type='roman-lower') and matches(.,'^\s?(i|ii|iii|iv|v|vi|vii|viii|ix|x)[\.|\)]? ')">
            <xsl:attribute name="id">roman-lower-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>list-item is part of an roman-lower list, but it begins with a single roman-lower letter. Is this correct? <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type='roman-upper') and matches(.,'^\s?(I|II|III|IV|V|VI|VII|VIII|IX|X)[\.|\)]? ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($type='roman-upper') and matches(.,'^\s?(I|II|III|IV|V|VI|VII|VIII|IX|X)[\.|\)]? ')">
            <xsl:attribute name="id">roman-upper-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>list-item is part of an roman-upper list, but it begins with a single roman-upper letter. Is this correct? <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type='simple') and matches(.,'^\s?[1-9][\.|\)]? ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($type='simple') and matches(.,'^\s?[1-9][\.|\)]? ')">
            <xsl:attribute name="id">simple-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>list-item is part of a simple list, but it begins with a number. Should the list-type be updated to ordered and this number removed? <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type='simple') and matches(.,'^\s?[a-h|j-w|y-z][\.|\)] ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($type='simple') and matches(.,'^\s?[a-h|j-w|y-z][\.|\)] ')">
            <xsl:attribute name="id">simple-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>list-item is part of a simple list, but it begins with a single lower-case letter. Should the list-type be updated to 'alpha-lower' and this first letter removed? <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type='simple') and matches(.,'^\s?[A-H|J-W|Y-Z][\.|\)] ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($type='simple') and matches(.,'^\s?[A-H|J-W|Y-Z][\.|\)] ')">
            <xsl:attribute name="id">simple-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>list-item is part of a simple list, but it begins with a single upper-case letter. Should the list-type be updated to 'alpha-upper' and this first letter removed? <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type='simple') and matches(.,'^\s?(i|ii|iii|iv|v|vi|vii|viii|ix|x)[\.|\)]? ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($type='simple') and matches(.,'^\s?(i|ii|iii|iv|v|vi|vii|viii|ix|x)[\.|\)]? ')">
            <xsl:attribute name="id">simple-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>list-item is part of a simple list, but it begins with a single roman-lower letter. Should the list-type be updated to 'roman-lower' and this first letter removed? <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type='simple') and matches(.,'^\s?(I|II|III|IV|V|VI|VII|VIII|IX|X)[\.|\)]? ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($type='simple') and matches(.,'^\s?(I|II|III|IV|V|VI|VII|VIII|IX|X)[\.|\)]? ')">
            <xsl:attribute name="id">simple-test-5</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>list-item is part of a simple list, but it begins with a single roman-upper letter. Should the list-type be updated to 'roman-upper' and this first letter removed? <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'^\s?\p{Ll}')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\s?\p{Ll}')">
            <xsl:attribute name="id">list-item-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>list-item begins with lowercase letter, is this correct? - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M101"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M101"/>
   <xsl:template match="@*|node()" priority="-2" mode="M101">
      <xsl:apply-templates select="*" mode="M101"/>
   </xsl:template>

   <!--PATTERN general-video-pattern-->


	  <!--RULE general-video-->
   <xsl:template match="media[@mimetype='video'][matches(@id,'^video[0-9]{1,3}$')]"
                 priority="1000"
                 mode="M102">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="media[@mimetype='video'][matches(@id,'^video[0-9]{1,3}$')]"
                       id="general-video"/>
      <xsl:variable name="id" select="@id"/>
      <xsl:variable name="xref1"
                    select="ancestor::article/descendant::xref[(@rid = $id) and not(ancestor::caption)][1]"/>
      <xsl:variable name="cap-xref1"
                    select="ancestor::article/descendant::xref[(@rid = $id) and (ancestor::caption)][1]"/>
      <xsl:variable name="xref-sib"
                    select="$xref1/parent::*/following-sibling::*[1]/local-name()"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="ancestor::article//xref[@rid = $id]"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="ancestor::article//xref[@rid = $id]">
               <xsl:attribute name="id">final-video-cite</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>There is no citation to <xsl:text/>
                  <xsl:value-of select="label"/>
                  <xsl:text/> Ensure this is added.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="if ((count($cap-xref1) = 1) and (count($xref1) = 0)) then (ancestor::sec[1]/@id != ($cap-xref1/ancestor::sec[1]/@id))         else (ancestor::sec[1]/@id != ($xref1/ancestor::sec[1]/@id))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ((count($cap-xref1) = 1) and (count($xref1) = 0)) then (ancestor::sec[1]/@id != ($cap-xref1/ancestor::sec[1]/@id)) else (ancestor::sec[1]/@id != ($xref1/ancestor::sec[1]/@id))">
            <xsl:attribute name="id">video-placement-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="replace(label,'\.$','')"/>
               <xsl:text/> does not appear in the same section as where it is first cited, which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($xref-sib = 'p') and ($xref1//following::media/@id = $id)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($xref-sib = 'p') and ($xref1//following::media/@id = $id)">
            <xsl:attribute name="id">video-placement-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="replace(label,'\.$','')"/>
               <xsl:text/> appears after it's first citation but not directly after it's first citation. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if ((count($cap-xref1) = 1) and (count($xref1) = 0)) then ($cap-xref1//preceding::media/@id = $id)         else ($xref1//preceding::media/@id = $id)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ((count($cap-xref1) = 1) and (count($xref1) = 0)) then ($cap-xref1//preceding::media/@id = $id) else ($xref1//preceding::media/@id = $id)">
            <xsl:attribute name="id">video-placement-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="replace(label,'\.$','')"/>
               <xsl:text/> appears before its citation, which must be incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M102"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M102"/>
   <xsl:template match="@*|node()" priority="-2" mode="M102">
      <xsl:apply-templates select="*" mode="M102"/>
   </xsl:template>

   <!--PATTERN body-video-specific-pattern-->


	  <!--RULE body-video-specific-->
   <xsl:template match="article/body//media[@mimetype='video']"
                 priority="1000"
                 mode="M103">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article/body//media[@mimetype='video']"
                       id="body-video-specific"/>
      <xsl:variable name="count"
                    select="count(ancestor::body//media[@mimetype='video'][matches(label,'^Video [\d]+\.$')])"/>
      <xsl:variable name="pos"
                    select="$count - count(following::media[@mimetype='video'][matches(label,'^Video [\d]+\.$')][ancestor::body])"/>
      <xsl:variable name="no" select="substring-after(@id,'video')"/>
      <xsl:variable name="fig-label"
                    select="replace(ancestor::fig-group/fig[1]/label,'\.','')"/>
      <xsl:variable name="fig-pos"
                    select="count(ancestor::fig-group//media[@mimetype='video'][starts-with(label,$fig-label)]) - count(following::media[@mimetype='video'][starts-with(label,$fig-label)])"/>

		    <!--REPORT error-->
      <xsl:if test="not(ancestor::fig-group) and (matches(label,'[Vv]ideo')) and ($no != string($pos))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="not(ancestor::fig-group) and (matches(label,'[Vv]ideo')) and ($no != string($pos))">
            <xsl:attribute name="id">body-video-position-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="label"/>
               <xsl:text/> does not appear in sequence which is incorrect. Relative to the other videos it is placed in position <xsl:text/>
               <xsl:value-of select="$pos"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="starts-with(label,$fig-label)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="starts-with(label,$fig-label)">
               <xsl:attribute name="id">fig-video-label-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>
                  <xsl:text/>
                  <xsl:value-of select="label"/>
                  <xsl:text/> does not begin with its parent figure label - <xsl:text/>
                  <xsl:value-of select="$fig-label"/>
                  <xsl:text/> - which is incorrect.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="(ancestor::fig-group) and ($no != string($fig-pos))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(ancestor::fig-group) and ($no != string($fig-pos))">
            <xsl:attribute name="id">fig-video-position-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="label"/>
               <xsl:text/> does not appear in sequence which is incorrect. Relative to the other fig-level videos it is placed in position <xsl:text/>
               <xsl:value-of select="$fig-pos"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(not(ancestor::fig-group)) and (descendant::xref[@ref-type='fig'][contains(.,'igure') and not(contains(.,'supplement'))])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(not(ancestor::fig-group)) and (descendant::xref[@ref-type='fig'][contains(.,'igure') and not(contains(.,'supplement'))])">
            <xsl:attribute name="id">fig-video-check-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="label"/>
               <xsl:text/> contains a link to <xsl:text/>
               <xsl:value-of select="descendant::xref[@ref-type='fig'][contains(.,'igure') and not(contains(.,'supplement'))][1]"/>
               <xsl:text/>, but it is not a captured as a child of that fig. Should it be captured as <xsl:text/>
               <xsl:value-of select="concat(descendant::xref[@ref-type='fig'][contains(.,'igure') and not(contains(.,'supplement'))][1],'—video x')"/>
               <xsl:text/> instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M103"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M103"/>
   <xsl:template match="@*|node()" priority="-2" mode="M103">
      <xsl:apply-templates select="*" mode="M103"/>
   </xsl:template>

   <!--PATTERN body-table-pos-conformance-pattern-->


	  <!--RULE body-table-pos-conformance-->
   <xsl:template match="article/body//table-wrap[matches(@id,'^table[\d]+$')]"
                 priority="1000"
                 mode="M104">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article/body//table-wrap[matches(@id,'^table[\d]+$')]"
                       id="body-table-pos-conformance"/>
      <xsl:variable name="count"
                    select="count(ancestor::body//table-wrap[matches(@id,'^table[\d]+$')])"/>
      <xsl:variable name="pos"
                    select="$count - count(following::table-wrap[(matches(@id,'^table[\d]+$')) and (ancestor::body) and not(ancestor::sub-article)])"/>
      <xsl:variable name="no" select="substring-after(@id,'table')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="($no = string($pos))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($no = string($pos))">
               <xsl:attribute name="id">final-body-table-report</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>
                  <xsl:text/>
                  <xsl:value-of select="label"/>
                  <xsl:text/> does not appear in sequence which is incorrect. Relative to the other numbered tables it is placed in position <xsl:text/>
                  <xsl:value-of select="$pos"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M104"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M104"/>
   <xsl:template match="@*|node()" priority="-2" mode="M104">
      <xsl:apply-templates select="*" mode="M104"/>
   </xsl:template>

   <!--PATTERN app-table-pos-conformance-pattern-->


	  <!--RULE app-table-pos-conformance-->
   <xsl:template match="article//app//table-wrap[matches(@id,'^app[\d]+table[\d]+$')]"
                 priority="1000"
                 mode="M105">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article//app//table-wrap[matches(@id,'^app[\d]+table[\d]+$')]"
                       id="app-table-pos-conformance"/>
      <xsl:variable name="app-id" select="ancestor::app/@id"/>
      <xsl:variable name="app-no" select="substring-after($app-id,'appendix-')"/>
      <xsl:variable name="id-regex" select="concat('^app',$app-no,'table[\d]+$')"/>
      <xsl:variable name="count"
                    select="count(ancestor::app//table-wrap[matches(@id,$id-regex)])"/>
      <xsl:variable name="pos"
                    select="$count - count(following::table-wrap[matches(@id,$id-regex)])"/>
      <xsl:variable name="no" select="substring-after(@id,concat($app-no,'table'))"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="($no = string($pos))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($no = string($pos))">
               <xsl:attribute name="id">final-app-table-report</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>
                  <xsl:text/>
                  <xsl:value-of select="label"/>
                  <xsl:text/> does not appear in sequence which is incorrect. Relative to the other numbered tables in the same appendix it is placed in position <xsl:text/>
                  <xsl:value-of select="$pos"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M105"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M105"/>
   <xsl:template match="@*|node()" priority="-2" mode="M105">
      <xsl:apply-templates select="*" mode="M105"/>
   </xsl:template>

   <!--PATTERN fig-specific-tests-pattern-->


	  <!--RULE fig-specific-tests-->
   <xsl:template match="article/body//fig[not(@specific-use='child-fig')][not(ancestor::boxed-text)]"
                 priority="1000"
                 mode="M106">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article/body//fig[not(@specific-use='child-fig')][not(ancestor::boxed-text)]"
                       id="fig-specific-tests"/>
      <xsl:variable name="article-type" select="ancestor::article/@article-type"/>
      <xsl:variable name="id" select="@id"/>
      <xsl:variable name="count"
                    select="count(ancestor::article//fig[matches(label,'^Figure \d{1,4}\.$')])"/>
      <xsl:variable name="pos"
                    select="$count - count(following::fig[matches(label,'^Figure \d{1,4}\.$')])"/>
      <xsl:variable name="no" select="substring-after($id,'fig')"/>
      <xsl:variable name="pre-sib" select="preceding-sibling::*[1]"/>
      <xsl:variable name="fol-sib" select="following-sibling::*[1]"/>
      <xsl:variable name="lab" select="replace(label,'\.','')"/>

		    <!--REPORT error-->
      <xsl:if test="label[contains(lower-case(.),'supplement')]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="label[contains(lower-case(.),'supplement')]">
            <xsl:attribute name="id">fig-specific-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>fig label contains 'supplement', but it does not have a @specific-use='child-fig'. If it is a figure supplement it needs the attribute, if it isn't then it cannot contain 'supplement' in the label.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if ($count = 0) then ()                     else if (not(matches($id,'^fig[0-9]{1,3}$'))) then ()                     else $no != string($pos)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($count = 0) then () else if (not(matches($id,'^fig[0-9]{1,3}$'))) then () else $no != string($pos)">
            <xsl:attribute name="id">fig-specific-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="$lab"/>
               <xsl:text/> does not appear in sequence which is incorrect. Relative to the other figures it is placed in position <xsl:text/>
               <xsl:value-of select="$pos"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="if ($article-type = ('correction','retraction')) then ()          else not((preceding::p[1]//xref[@rid = $id]) or (preceding::p[parent::sec][1]//xref[@rid = $id]))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($article-type = ('correction','retraction')) then () else not((preceding::p[1]//xref[@rid = $id]) or (preceding::p[parent::sec][1]//xref[@rid = $id]))">
            <xsl:attribute name="id">fig-specific-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="$lab"/>
               <xsl:text/> does not appear directly after a paragraph citing it. Is that correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if ($article-type = ($features-article-types,'correction','retraction')) then ()         else not(ancestor::article//xref[@rid = $id])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($article-type = ($features-article-types,'correction','retraction')) then () else not(ancestor::article//xref[@rid = $id])">
            <xsl:attribute name="id">final-fig-specific-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>There is no citation to <xsl:text/>
               <xsl:value-of select="$lab"/>
               <xsl:text/> Ensure this is added.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="if ($article-type = $features-article-types) then (not(ancestor::article//xref[@rid = $id]))         else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($article-type = $features-article-types) then (not(ancestor::article//xref[@rid = $id])) else ()">
            <xsl:attribute name="id">feat-fig-specific-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>There is no citation to <xsl:text/>
               <xsl:value-of select="if (label) then label else 'figure.'"/>
               <xsl:text/> Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($fol-sib/local-name() = 'p') and ($fol-sib/*/local-name() = 'disp-formula') and (count($fol-sib/*[1]/preceding-sibling::text()) = 0) and (not(matches($pre-sib,'\.\s*?$|\?\s*?$|!\s*?$')))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($fol-sib/local-name() = 'p') and ($fol-sib/*/local-name() = 'disp-formula') and (count($fol-sib/*[1]/preceding-sibling::text()) = 0) and (not(matches($pre-sib,'\.\s*?$|\?\s*?$|!\s*?$')))">
            <xsl:attribute name="id">fig-specific-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="$lab"/>
               <xsl:text/> is immediately followed by a display formula, and preceded by a paragraph which does not end with punctuation. Should it should be moved after the display formula or after the para following the display formula?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($fol-sib/local-name() = 'disp-formula') and (not(matches($pre-sib,'\.\s*?$|\?\s*?$|!\s*?$')))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($fol-sib/local-name() = 'disp-formula') and (not(matches($pre-sib,'\.\s*?$|\?\s*?$|!\s*?$')))">
            <xsl:attribute name="id">fig-specific-test-5</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="$lab"/>
               <xsl:text/> is immediately followed by a display formula, and preceded by a paragraph which does not end with punctuation. Should it should be moved after the display formula or after the para following the display formula?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M106"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M106"/>
   <xsl:template match="@*|node()" priority="-2" mode="M106">
      <xsl:apply-templates select="*" mode="M106"/>
   </xsl:template>

   <!--PATTERN fig-label-tests-pattern-->


	  <!--RULE fig-label-tests-->
   <xsl:template match="article/body//fig[not(@specific-use='child-fig')][not(ancestor::boxed-text)]/label"
                 priority="1000"
                 mode="M107">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article/body//fig[not(@specific-use='child-fig')][not(ancestor::boxed-text)]/label"
                       id="fig-label-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'^Figure \d{1,4}\.$|^Chemical structure \d{1,4}\.$|^Scheme \d{1,4}\.$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(.,'^Figure \d{1,4}\.$|^Chemical structure \d{1,4}\.$|^Scheme \d{1,4}\.$')">
               <xsl:attribute name="id">fig-label-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>fig label must be in the format 'Figure 0.', 'Chemical structure 0.', or 'Scheme 0'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M107"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M107"/>
   <xsl:template match="@*|node()" priority="-2" mode="M107">
      <xsl:apply-templates select="*" mode="M107"/>
   </xsl:template>

   <!--PATTERN fig-sup-tests-pattern-->


	  <!--RULE fig-sup-tests-->
   <xsl:template match="article/body//fig[@specific-use='child-fig']"
                 priority="1000"
                 mode="M108">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article/body//fig[@specific-use='child-fig']"
                       id="fig-sup-tests"/>
      <xsl:variable name="count"
                    select="count(parent::fig-group/fig[@specific-use='child-fig'])"/>
      <xsl:variable name="pos"
                    select="$count - count(following-sibling::fig[@specific-use='child-fig'])"/>
      <xsl:variable name="no" select="substring-after(@id,'s')"/>
      <xsl:variable name="parent-fig-no"
                    select="substring-after(parent::fig-group/fig[not(@specific-use='child-fig')]/@id,'fig')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="parent::fig-group"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="parent::fig-group">
               <xsl:attribute name="id">fig-sup-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>fig supplement is not a child of fig-group. This cannot be correct.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="label[matches(.,'^Figure [\d]+—figure supplement [\d]+\.$')]"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="label[matches(.,'^Figure [\d]+—figure supplement [\d]+\.$')]">
               <xsl:attribute name="id">fig-sup-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>fig in the body of the article which has a @specific-use='child-fig' must have a label in the format 'Figure X—figure supplement X.' (where X is one or more digits).</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="starts-with(label,concat('Figure ',$parent-fig-no))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="starts-with(label,concat('Figure ',$parent-fig-no))">
               <xsl:attribute name="id">fig-sup-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>
                  <xsl:text/>
                  <xsl:value-of select="label"/>
                  <xsl:text/> does not start with the main figure number it is associated with - <xsl:text/>
                  <xsl:value-of select="concat('Figure ',$parent-fig-no)"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$no = string($pos)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$no = string($pos)">
               <xsl:attribute name="id">fig-sup-test-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>
                  <xsl:text/>
                  <xsl:value-of select="label"/>
                  <xsl:text/> does not appear in sequence which is incorrect. Relative to the other figures it is placed in position <xsl:text/>
                  <xsl:value-of select="$pos"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M108"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M108"/>
   <xsl:template match="@*|node()" priority="-2" mode="M108">
      <xsl:apply-templates select="*" mode="M108"/>
   </xsl:template>

   <!--PATTERN rep-fig-tests-pattern-->


	  <!--RULE rep-fig-tests-->
   <xsl:template match="sub-article[@article-type='reply']//fig"
                 priority="1000"
                 mode="M109">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="sub-article[@article-type='reply']//fig"
                       id="rep-fig-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="label"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="label">
               <xsl:attribute name="id">resp-fig-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>fig must have a label.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(label,'^Author response image [0-9]{1,3}\.$|^Chemical structure \d{1,4}\.$|^Scheme \d{1,4}\.$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(label,'^Author response image [0-9]{1,3}\.$|^Chemical structure \d{1,4}\.$|^Scheme \d{1,4}\.$')">
               <xsl:attribute name="id">reply-fig-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>fig label in author response must be in the format 'Author response image 1.', or 'Chemical Structure 1.', or 'Scheme 1.'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M109"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M109"/>
   <xsl:template match="@*|node()" priority="-2" mode="M109">
      <xsl:apply-templates select="*" mode="M109"/>
   </xsl:template>

   <!--PATTERN box-fig-tests-pattern-->


	  <!--RULE box-fig-tests-->
   <xsl:template match="article/body//boxed-text//fig[not(@specific-use='child-fig')]/label"
                 priority="1000"
                 mode="M110">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article/body//boxed-text//fig[not(@specific-use='child-fig')]/label"
                       id="box-fig-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'^Box \d{1,4}—figure \d{1,4}\.$|^Chemical structure \d{1,4}\.$|^Scheme \d{1,4}\.$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(.,'^Box \d{1,4}—figure \d{1,4}\.$|^Chemical structure \d{1,4}\.$|^Scheme \d{1,4}\.$')">
               <xsl:attribute name="id">box-fig-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>label for fig inside boxed-text must be in the format 'Box 1—figure 1.', or 'Chemical structure 1.', or 'Scheme 1'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M110"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M110"/>
   <xsl:template match="@*|node()" priority="-2" mode="M110">
      <xsl:apply-templates select="*" mode="M110"/>
   </xsl:template>

   <!--PATTERN app-fig-tests-pattern-->


	  <!--RULE app-fig-tests-->
   <xsl:template match="article//app//fig[not(@specific-use='child-fig')]/label"
                 priority="1000"
                 mode="M111">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article//app//fig[not(@specific-use='child-fig')]/label"
                       id="app-fig-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'^Appendix \d{1,4}—figure \d{1,4}\.$|^Appendix—figure \d{1,4}\.$|^Chemical structure \d{1,4}\.$|^Scheme \d{1,4}\.$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(.,'^Appendix \d{1,4}—figure \d{1,4}\.$|^Appendix—figure \d{1,4}\.$|^Chemical structure \d{1,4}\.$|^Scheme \d{1,4}\.$')">
               <xsl:attribute name="id">app-fig-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>label for fig inside appendix must be in the format 'Appendix 1—figure 1.', or 'Chemical structure 1.', or 'Scheme 1'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'^Appendix \d{1,4}—figure \d{1,4}\.$|^Appendix—figure \d{1,4}\.$') and not(starts-with(.,ancestor::app/title))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'^Appendix \d{1,4}—figure \d{1,4}\.$|^Appendix—figure \d{1,4}\.$') and not(starts-with(.,ancestor::app/title))">
            <xsl:attribute name="id">app-fig-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>label for <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> does not start with the correct appendix prefix. Either the figure is placed in the incorrect appendix or the label is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M111"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M111"/>
   <xsl:template match="@*|node()" priority="-2" mode="M111">
      <xsl:apply-templates select="*" mode="M111"/>
   </xsl:template>

   <!--PATTERN app-fig-sup-tests-pattern-->


	  <!--RULE app-fig-sup-tests-->
   <xsl:template match="article//app//fig[@specific-use='child-fig']/label"
                 priority="1000"
                 mode="M112">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article//app//fig[@specific-use='child-fig']/label"
                       id="app-fig-sup-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'^Appendix \d{1,4}—figure \d{1,4}—figure supplement \d{1,4}\.$|^Appendix—figure \d{1,4}—figure supplement \d{1,4}\.$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(.,'^Appendix \d{1,4}—figure \d{1,4}—figure supplement \d{1,4}\.$|^Appendix—figure \d{1,4}—figure supplement \d{1,4}\.$')">
               <xsl:attribute name="id">app-fig-sup-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>label for fig inside appendix must be in the format 'Appendix 1—figure 1—figure supplement 1.'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="starts-with(.,ancestor::app/title)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="starts-with(.,ancestor::app/title)">
               <xsl:attribute name="id">app-fig-sup-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>label for <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> does not start with the correct appendix prefix. Either the figure is placed in the incorrect appendix or the label is incorrect.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M112"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M112"/>
   <xsl:template match="@*|node()" priority="-2" mode="M112">
      <xsl:apply-templates select="*" mode="M112"/>
   </xsl:template>

   <!--PATTERN ra-body-tests-pattern-->


	  <!--RULE ra-body-tests-->
   <xsl:template match="article/body[ancestor::article/@article-type='research-article']"
                 priority="1000"
                 mode="M113">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article/body[ancestor::article/@article-type='research-article']"
                       id="ra-body-tests"/>
      <xsl:variable name="type"
                    select="ancestor::article//subj-group[@subj-group-type='display-channel']/subject"/>
      <xsl:variable name="method-count"
                    select="count(sec[@sec-type='materials|methods']) + count(sec[@sec-type='methods']) + count(sec[@sec-type='model'])"/>
      <xsl:variable name="res-disc-count"
                    select="count(sec[@sec-type='results']) + count(sec[@sec-type='discussion'])"/>

		    <!--REPORT error-->
      <xsl:if test="count(sec) = 0">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(sec) = 0">
            <xsl:attribute name="id">ra-sec-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>At least one sec should be present in body for research-article content.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="if ($type = ('Short Report','Scientific Correspondence')) then ()                     else count(sec[@sec-type='intro']) != 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($type = ('Short Report','Scientific Correspondence')) then () else count(sec[@sec-type='intro']) != 1">
            <xsl:attribute name="id">ra-sec-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/> doesn't have child sec[@sec-type='intro'] in the main body. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="if ($type = ('Short Report','Scientific Correspondence')) then ()                     else $method-count != 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($type = ('Short Report','Scientific Correspondence')) then () else $method-count != 1">
            <xsl:attribute name="id">ra-sec-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>main body in <xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/> content doesn't have a child sec with @sec-type whose value is either 'material|methods', 'methods' or 'model'. Is this correct?.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="if ($type = ('Short Report','Scientific Correspondence')) then ()         else if (sec[@sec-type='results|discussion']) then ()         else $res-disc-count != 2">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($type = ('Short Report','Scientific Correspondence')) then () else if (sec[@sec-type='results|discussion']) then () else $res-disc-count != 2">
            <xsl:attribute name="id">ra-sec-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>main body in <xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/> content doesn't have either a child sec[@sec-type='results|discussion'] or a sec[@sec-type='results'] and a sec[@sec-type='discussion']. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M113"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M113"/>
   <xsl:template match="@*|node()" priority="-2" mode="M113">
      <xsl:apply-templates select="*" mode="M113"/>
   </xsl:template>

   <!--PATTERN top-level-sec-tests-pattern-->


	  <!--RULE top-level-sec-tests-->
   <xsl:template match="body/sec" priority="1000" mode="M114">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="body/sec"
                       id="top-level-sec-tests"/>
      <xsl:variable name="type"
                    select="ancestor::article//subj-group[@subj-group-type='display-channel']/subject"/>
      <xsl:variable name="pos"
                    select="count(parent::body/sec) - count(following-sibling::sec)"/>
      <xsl:variable name="allowed-titles"
                    select="('Introduction', 'Results', 'Discussion', 'Materials and methods', 'Results and discussion', 'Conclusion', 'Introduction and results', 'Results and conclusions', 'Discussion and conclusions', 'Model and methods')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@id = concat('s', $pos)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@id = concat('s', $pos)">
               <xsl:attribute name="id">top-sec-id</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>top-level must have @id in the format 's0', where 0 relates to the position of the sec. It should be <xsl:text/>
                  <xsl:value-of select="concat('s', $pos)"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="not($type = ($features-subj,'Review Article')) and not(replace(title,' ',' ') = $allowed-titles)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="not($type = ($features-subj,'Review Article')) and not(replace(title,' ',' ') = $allowed-titles)">
            <xsl:attribute name="id">sec-conformity</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>top level sec with title - <xsl:text/>
               <xsl:value-of select="title"/>
               <xsl:text/> - is not a usual title for <xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/> content. Should this be captured as a sub-level of <xsl:text/>
               <xsl:value-of select="preceding-sibling::sec[1]/title"/>
               <xsl:text/>?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M114"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M114"/>
   <xsl:template match="@*|node()" priority="-2" mode="M114">
      <xsl:apply-templates select="*" mode="M114"/>
   </xsl:template>

   <!--PATTERN lower-level-sec-tests-pattern-->


	  <!--RULE lower-level-sec-tests-->
   <xsl:template match="body/sec//sec" priority="1000" mode="M115">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="body/sec//sec"
                       id="lower-level-sec-tests"/>
      <xsl:variable name="parent-id" select="parent::sec/@id"/>
      <xsl:variable name="pos"
                    select="count(parent::sec/sec) - count(following-sibling::sec)"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@id = concat($parent-id,'-',$pos)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="@id = concat($parent-id,'-',$pos)">
               <xsl:attribute name="id">lower-sec-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>This sec @id must be a concatenation of the parent sec @id, '-', and the position of this sec relative to other sibling secs - <xsl:text/>
                  <xsl:value-of select="concat($parent-id,'-',$pos)"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M115"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M115"/>
   <xsl:template match="@*|node()" priority="-2" mode="M115">
      <xsl:apply-templates select="*" mode="M115"/>
   </xsl:template>

   <!--PATTERN article-title-tests-pattern-->


	  <!--RULE article-title-tests-->
   <xsl:template match="article-meta//article-title" priority="1000" mode="M116">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-meta//article-title"
                       id="article-title-tests"/>
      <xsl:variable name="type"
                    select="ancestor::article-meta//subj-group[@subj-group-type='display-channel']/subject"/>
      <xsl:variable name="string" select="e:article-type2title($type)"/>
      <xsl:variable name="specifics"
                    select="('Replication Study','Registered Report','Correction','Retraction')"/>

		    <!--REPORT error-->
      <xsl:if test="if ($type = $specifics) then not(starts-with(.,$string))                     else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($type = $specifics) then not(starts-with(.,$string)) else ()">
            <xsl:attribute name="id">article-type-title-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>title of a '<xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/>' must start with '<xsl:text/>
               <xsl:value-of select="$string"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($type = 'Scientific Correspondence') and not(matches(.,'^Comment on|^Response to comment on'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($type = 'Scientific Correspondence') and not(matches(.,'^Comment on|^Response to comment on'))">
            <xsl:attribute name="id">article-type-title-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>title of a '<xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/>' must start with 'Comment on' or 'Response to comment on', but this starts with something else - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($type = 'Scientific Correspondence') and matches(.,'^Comment on “|^Response to comment on “')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($type = 'Scientific Correspondence') and matches(.,'^Comment on “|^Response to comment on “')">
            <xsl:attribute name="id">sc-title-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>title of a '<xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/>' contains a left double quotation mark. The original article title must be surrounded by a single roman apostrophe - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type = 'Scientific Correspondence') and matches(.,'”')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($type = 'Scientific Correspondence') and matches(.,'”')">
            <xsl:attribute name="id">sc-title-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>title of a '<xsl:text/>
               <xsl:value-of select="$type"/>
               <xsl:text/>' contains a right double quotation mark. Is this correct? The original article title must be surrounded by a single roman apostrophe - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M116"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M116"/>
   <xsl:template match="@*|node()" priority="-2" mode="M116">
      <xsl:apply-templates select="*" mode="M116"/>
   </xsl:template>

   <!--PATTERN sec-title-tests-pattern-->


	  <!--RULE sec-title-tests-->
   <xsl:template match="sec[@sec-type]/title" priority="1000" mode="M117">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="sec[@sec-type]/title"
                       id="sec-title-tests"/>
      <xsl:variable name="title" select="e:sec-type2title(parent::sec/@sec-type)"/>

		    <!--REPORT warning-->
      <xsl:if test="if ($title = 'undefined') then ()          else . != $title">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($title = 'undefined') then () else . != $title">
            <xsl:attribute name="id">sec-type-title-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>title of a sec with an @sec-type='<xsl:text/>
               <xsl:value-of select="parent::sec/@sec-type"/>
               <xsl:text/>' should usually be '<xsl:text/>
               <xsl:value-of select="$title"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M117"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M117"/>
   <xsl:template match="@*|node()" priority="-2" mode="M117">
      <xsl:apply-templates select="*" mode="M117"/>
   </xsl:template>

   <!--PATTERN fig-title-tests-pattern-->


	  <!--RULE fig-title-tests-->
   <xsl:template match="fig/caption/title" priority="1000" mode="M118">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="fig/caption/title"
                       id="fig-title-tests"/>
      <xsl:variable name="label" select="parent::caption/preceding-sibling::label"/>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'^\([A-Za-z]|^[A-Za-z]\)')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'^\([A-Za-z]|^[A-Za-z]\)')">
            <xsl:attribute name="id">fig-title-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>'<xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/>' appears to have a title which is the begining of a caption. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'\.$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\.$')">
               <xsl:attribute name="id">fig-title-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>title for <xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/> must end with a fullstop.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,' vs\.$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,' vs\.$')">
            <xsl:attribute name="id">fig-title-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>title for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> ends with 'vs.', which indicates that the title sentence may be split across title and caption.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'^\s')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\s')">
            <xsl:attribute name="id">fig-title-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>title for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> begins with a space, which is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'^\p{P}')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\p{P}')">
            <xsl:attribute name="id">fig-title-test-5</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>title for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> begins with punctuation. Is this correct? - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M118"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M118"/>
   <xsl:template match="@*|node()" priority="-2" mode="M118">
      <xsl:apply-templates select="*" mode="M118"/>
   </xsl:template>

   <!--PATTERN supplementary-material-title-tests-pattern-->


	  <!--RULE supplementary-material-title-tests-->
   <xsl:template match="supplementary-material/caption/title"
                 priority="1000"
                 mode="M119">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="supplementary-material/caption/title"
                       id="supplementary-material-title-tests"/>
      <xsl:variable name="label" select="parent::caption/preceding-sibling::label"/>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'^\([A-Za-z]|^[A-Za-z]\)')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'^\([A-Za-z]|^[A-Za-z]\)')">
            <xsl:attribute name="id">supplementary-material-title-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>'<xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/>' appears to have a title which is the begining of a caption. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'\.$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\.$')">
               <xsl:attribute name="id">supplementary-material-title-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>title for <xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/> must end with a fullstop.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,' vs\.$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,' vs\.$')">
            <xsl:attribute name="id">supplementary-material-title-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>title for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> ends with 'vs.', which indicates that the title sentence may be split across title and caption.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'^\s')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\s')">
            <xsl:attribute name="id">supplementary-material-title-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>title for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> begins with a space, which is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M119"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M119"/>
   <xsl:template match="@*|node()" priority="-2" mode="M119">
      <xsl:apply-templates select="*" mode="M119"/>
   </xsl:template>

   <!--PATTERN video-title-tests-pattern-->


	  <!--RULE video-title-tests-->
   <xsl:template match="media/caption/title" priority="1000" mode="M120">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="media/caption/title"
                       id="video-title-tests"/>
      <xsl:variable name="label" select="parent::caption/preceding-sibling::label"/>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'^\([A-Za-z]|^[A-Za-z]\)')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'^\([A-Za-z]|^[A-Za-z]\)')">
            <xsl:attribute name="id">video-title-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>'<xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/>' appears to have a title which is the begining of a caption. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'\.$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\.$')">
               <xsl:attribute name="id">video-title-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>title for <xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/> must end with a fullstop.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,' vs\.$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,' vs\.$')">
            <xsl:attribute name="id">video-title-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>title for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> ends with 'vs.', which indicates that the title sentence may be split across title and caption.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'^\s')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'^\s')">
            <xsl:attribute name="id">video-title-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>title for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> begins with a space, which is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M120"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M120"/>
   <xsl:template match="@*|node()" priority="-2" mode="M120">
      <xsl:apply-templates select="*" mode="M120"/>
   </xsl:template>

   <!--PATTERN ack-title-tests-pattern-->


	  <!--RULE ack-title-tests-->
   <xsl:template match="ack" priority="1000" mode="M121">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="ack"
                       id="ack-title-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="title = 'Acknowledgements'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="title = 'Acknowledgements'">
               <xsl:attribute name="id">ack-title-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>ack must have a title that contains 'Acknowledgements'. Currently it is '<xsl:text/>
                  <xsl:value-of select="title"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M121"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M121"/>
   <xsl:template match="@*|node()" priority="-2" mode="M121">
      <xsl:apply-templates select="*" mode="M121"/>
   </xsl:template>

   <!--PATTERN ack-content-tests-pattern-->


	  <!--RULE ack-content-tests-->
   <xsl:template match="ack//p" priority="1000" mode="M122">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="ack//p"
                       id="ack-content-tests"/>
      <xsl:variable name="hit"
                    select="string-join(for $x in tokenize(.,' ') return          if (matches($x,'^[A-Z]{1}\.$')) then $x         else (),', ')"/>
      <xsl:variable name="hit-count"
                    select="count(for $x in tokenize(.,' ') return          if (matches($x,'^[A-Z]{1}\.$')) then $x         else ())"/>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,' [A-Z]\. |^[A-Z]\. ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,' [A-Z]\. |^[A-Z]\. ')">
            <xsl:attribute name="id">ack-full-stop-intial-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>p element in Acknowledgements contains what looks like <xsl:text/>
               <xsl:value-of select="$hit-count"/>
               <xsl:text/> intial(s) followed by a full stop. Is it correct? - <xsl:text/>
               <xsl:value-of select="$hit"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M122"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M122"/>
   <xsl:template match="@*|node()" priority="-2" mode="M122">
      <xsl:apply-templates select="*" mode="M122"/>
   </xsl:template>

   <!--PATTERN ref-list-title-tests-pattern-->


	  <!--RULE ref-list-title-tests-->
   <xsl:template match="ref-list" priority="1000" mode="M123">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="ref-list"
                       id="ref-list-title-tests"/>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="title = 'References'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="title = 'References'">
               <xsl:attribute name="id">ref-list-title-test</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>reference list usually has a title that is 'References', but currently it is '<xsl:text/>
                  <xsl:value-of select="title"/>
                  <xsl:text/>' - is that correct?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M123"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M123"/>
   <xsl:template match="@*|node()" priority="-2" mode="M123">
      <xsl:apply-templates select="*" mode="M123"/>
   </xsl:template>

   <!--PATTERN app-title-tests-pattern-->


	  <!--RULE app-title-tests-->
   <xsl:template match="app/title" priority="1000" mode="M124">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="app/title"
                       id="app-title-tests"/>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="matches(.,'Appendix [0-9]{1,2}?')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(.,'Appendix [0-9]{1,2}?')">
               <xsl:attribute name="id">app-title-test</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>app title should usually be in the format 'Appendix 1'. Currently it is '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M124"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M124"/>
   <xsl:template match="@*|node()" priority="-2" mode="M124">
      <xsl:apply-templates select="*" mode="M124"/>
   </xsl:template>

   <!--PATTERN comp-int-title-tests-pattern-->


	  <!--RULE comp-int-title-tests-->
   <xsl:template match="fn-group[@content-type='competing-interest']"
                 priority="1000"
                 mode="M125">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="fn-group[@content-type='competing-interest']"
                       id="comp-int-title-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="title = 'Competing interests'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="title = 'Competing interests'">
               <xsl:attribute name="id">comp-int-title-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>fn-group[@content-type='competing-interests'] must have a title that contains 'Competing interests'. Currently it is '<xsl:text/>
                  <xsl:value-of select="title"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M125"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M125"/>
   <xsl:template match="@*|node()" priority="-2" mode="M125">
      <xsl:apply-templates select="*" mode="M125"/>
   </xsl:template>

   <!--PATTERN auth-cont-title-tests-pattern-->


	  <!--RULE auth-cont-title-tests-->
   <xsl:template match="fn-group[@content-type='author-contribution']"
                 priority="1000"
                 mode="M126">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="fn-group[@content-type='author-contribution']"
                       id="auth-cont-title-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="title = 'Author contributions'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="title = 'Author contributions'">
               <xsl:attribute name="id">auth-cont-title-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>fn-group[@content-type='author-contribution'] must have a title that contains 'Author contributions'. Currently it is '<xsl:text/>
                  <xsl:value-of select="title"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M126"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M126"/>
   <xsl:template match="@*|node()" priority="-2" mode="M126">
      <xsl:apply-templates select="*" mode="M126"/>
   </xsl:template>

   <!--PATTERN ethics-title-tests-pattern-->


	  <!--RULE ethics-title-tests-->
   <xsl:template match="fn-group[@content-type='ethics-information']"
                 priority="1000"
                 mode="M127">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="fn-group[@content-type='ethics-information']"
                       id="ethics-title-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="title = 'Ethics'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="title = 'Ethics'">
               <xsl:attribute name="id">ethics-title-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>fn-group[@content-type='ethics-information'] must have a title that contains 'Author contributions'. Currently it is '<xsl:text/>
                  <xsl:value-of select="title"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M127"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M127"/>
   <xsl:template match="@*|node()" priority="-2" mode="M127">
      <xsl:apply-templates select="*" mode="M127"/>
   </xsl:template>

   <!--PATTERN dec-letter-title-tests-pattern-->


	  <!--RULE dec-letter-title-tests-->
   <xsl:template match="sub-article[@article-type='decision-letter']/front-stub/title-group"
                 priority="1000"
                 mode="M128">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="sub-article[@article-type='decision-letter']/front-stub/title-group"
                       id="dec-letter-title-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="article-title = 'Decision letter'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="article-title = 'Decision letter'">
               <xsl:attribute name="id">dec-letter-title-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>title-group must contain article-title which contains 'Decision letter'. Currently it is <xsl:text/>
                  <xsl:value-of select="article-title"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M128"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M128"/>
   <xsl:template match="@*|node()" priority="-2" mode="M128">
      <xsl:apply-templates select="*" mode="M128"/>
   </xsl:template>

   <!--PATTERN reply-title-tests-pattern-->


	  <!--RULE reply-title-tests-->
   <xsl:template match="sub-article[@article-type='reply']/front-stub/title-group"
                 priority="1000"
                 mode="M129">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="sub-article[@article-type='reply']/front-stub/title-group"
                       id="reply-title-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="article-title = 'Author response'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="article-title = 'Author response'">
               <xsl:attribute name="id">reply-title-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>title-group must contain article-title which contains 'Author response'. Currently it is <xsl:text/>
                  <xsl:value-of select="article-title"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M129"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M129"/>
   <xsl:template match="@*|node()" priority="-2" mode="M129">
      <xsl:apply-templates select="*" mode="M129"/>
   </xsl:template>

   <!--PATTERN author-contrib-ids-pattern-->


	  <!--RULE author-contrib-ids-->
   <xsl:template match="article-meta//contrib[@contrib-type='author']"
                 priority="1000"
                 mode="M130">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-meta//contrib[@contrib-type='author']"
                       id="author-contrib-ids"/>

		    <!--REPORT error-->
      <xsl:if test="if (collab) then ()         else if (ancestor::collab) then ()         else not(matches(@id,'^[a-z]+-[0-9]+$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if (collab) then () else if (ancestor::collab) then () else not(matches(@id,'^[a-z]+-[0-9]+$'))">
            <xsl:attribute name="id">author-id-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>contrib[@contrib-type="author"] must have an @id which is an alpha-numeric string.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M130"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M130"/>
   <xsl:template match="@*|node()" priority="-2" mode="M130">
      <xsl:apply-templates select="*" mode="M130"/>
   </xsl:template>

   <!--PATTERN award-group-ids-pattern-->


	  <!--RULE award-group-ids-->
   <xsl:template match="funding-group/award-group" priority="1000" mode="M131">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="funding-group/award-group"
                       id="award-group-ids"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(substring-after(@id,'fund'),'^[0-9]{1,2}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(substring-after(@id,'fund'),'^[0-9]{1,2}$')">
               <xsl:attribute name="id">award-group-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>award-group must have an @id, the value of which conforms to the convention 'fund', followed by a digit.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M131"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M131"/>
   <xsl:template match="@*|node()" priority="-2" mode="M131">
      <xsl:apply-templates select="*" mode="M131"/>
   </xsl:template>

   <!--PATTERN fig-ids-pattern-->


	  <!--RULE fig-ids-->
   <xsl:template match="article/body//fig[not(@specific-use='child-fig')][not(ancestor::boxed-text)]"
                 priority="1000"
                 mode="M132">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article/body//fig[not(@specific-use='child-fig')][not(ancestor::boxed-text)]"
                       id="fig-ids"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^fig[0-9]{1,3}$|^C[0-9]{1,3}$|^S[0-9]{1,3}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(@id,'^fig[0-9]{1,3}$|^C[0-9]{1,3}$|^S[0-9]{1,3}$')">
               <xsl:attribute name="id">fig-id-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>fig must have an @id in the format fig0 (or C0 for chemical structures, or S0 for Schemes).</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="matches(label,'[Ff]igure') and not(matches(@id,'^fig[0-9]{1,3}$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(label,'[Ff]igure') and not(matches(@id,'^fig[0-9]{1,3}$'))">
            <xsl:attribute name="id">fig-id-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>fig must have an @id in the format fig0.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(label,'[Cc]hemical [Ss]tructure') and not(matches(@id,'^C[0-9]{1,3}$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(label,'[Cc]hemical [Ss]tructure') and not(matches(@id,'^C[0-9]{1,3}$'))">
            <xsl:attribute name="id">fig-id-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Chemical structures must have an @id in the format C0.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(label,'[Ss]cheme') and not(matches(@id,'^S[0-9]{1,3}$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(label,'[Ss]cheme') and not(matches(@id,'^S[0-9]{1,3}$'))">
            <xsl:attribute name="id">fig-id-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Schemes must have an @id in the format S0.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M132"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M132"/>
   <xsl:template match="@*|node()" priority="-2" mode="M132">
      <xsl:apply-templates select="*" mode="M132"/>
   </xsl:template>

   <!--PATTERN fig-sup-ids-pattern-->


	  <!--RULE fig-sup-ids-->
   <xsl:template match="article/body//fig[@specific-use='child-fig'][not(ancestor::boxed-text)]"
                 priority="1000"
                 mode="M133">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article/body//fig[@specific-use='child-fig'][not(ancestor::boxed-text)]"
                       id="fig-sup-ids"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^fig[0-9]{1,3}s[0-9]{1,3}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(@id,'^fig[0-9]{1,3}s[0-9]{1,3}$')">
               <xsl:attribute name="id">fig-sup-id-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>figure supplement must have an @id in the format fig0s0.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M133"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M133"/>
   <xsl:template match="@*|node()" priority="-2" mode="M133">
      <xsl:apply-templates select="*" mode="M133"/>
   </xsl:template>

   <!--PATTERN box-fig-ids-pattern-->


	  <!--RULE box-fig-ids-->
   <xsl:template match="article/body//boxed-text//fig[not(@specific-use='child-fig')]"
                 priority="1000"
                 mode="M134">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article/body//boxed-text//fig[not(@specific-use='child-fig')]"
                       id="box-fig-ids"/>
      <xsl:variable name="box-id" select="ancestor::boxed-text/@id"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^box[0-9]{1,3}fig[0-9]{1,3}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(@id,'^box[0-9]{1,3}fig[0-9]{1,3}$')">
               <xsl:attribute name="id">box-fig-id-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>fig must have @id in the format box0fig0.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="contains(@id,$box-id)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(@id,$box-id)">
               <xsl:attribute name="id">box-fig-id-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>fig id does not contain its ancestor boxed-text id. Please ensure the first part of the id contains '<xsl:text/>
                  <xsl:value-of select="$box-id"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M134"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M134"/>
   <xsl:template match="@*|node()" priority="-2" mode="M134">
      <xsl:apply-templates select="*" mode="M134"/>
   </xsl:template>

   <!--PATTERN app-fig-ids-pattern-->


	  <!--RULE app-fig-ids-->
   <xsl:template match="article/back//app//fig[not(@specific-use='child-fig')]"
                 priority="1000"
                 mode="M135">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article/back//app//fig[not(@specific-use='child-fig')]"
                       id="app-fig-ids"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^app[0-9]{1,3}fig[0-9]{1,3}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(@id,'^app[0-9]{1,3}fig[0-9]{1,3}$')">
               <xsl:attribute name="id">app-fig-id-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>figures in appendices must have an @id in the format app0fig0.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M135"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M135"/>
   <xsl:template match="@*|node()" priority="-2" mode="M135">
      <xsl:apply-templates select="*" mode="M135"/>
   </xsl:template>

   <!--PATTERN app-fig-sup-ids-pattern-->


	  <!--RULE app-fig-sup-ids-->
   <xsl:template match="article/back//app//fig[@specific-use='child-fig']"
                 priority="1000"
                 mode="M136">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article/back//app//fig[@specific-use='child-fig']"
                       id="app-fig-sup-ids"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^app[0-9]{1,3}fig[0-9]{1,3}s[0-9]{1,3}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(@id,'^app[0-9]{1,3}fig[0-9]{1,3}s[0-9]{1,3}$')">
               <xsl:attribute name="id">app-fig-sup-id-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>figure supplements in appendices must have an @id in the format app0fig0s0.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M136"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M136"/>
   <xsl:template match="@*|node()" priority="-2" mode="M136">
      <xsl:apply-templates select="*" mode="M136"/>
   </xsl:template>

   <!--PATTERN rep-fig-ids-pattern-->


	  <!--RULE rep-fig-ids-->
   <xsl:template match="sub-article[@article-type='reply']//fig[not(@specific-use='child-fig')]"
                 priority="1000"
                 mode="M137">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="sub-article[@article-type='reply']//fig[not(@specific-use='child-fig')]"
                       id="rep-fig-ids"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^respfig[0-9]{1,3}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(@id,'^respfig[0-9]{1,3}$')">
               <xsl:attribute name="id">resp-fig-id-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>author response fig must have @id in the format respfig0.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M137"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M137"/>
   <xsl:template match="@*|node()" priority="-2" mode="M137">
      <xsl:apply-templates select="*" mode="M137"/>
   </xsl:template>

   <!--PATTERN rep-fig-sup-ids-pattern-->


	  <!--RULE rep-fig-sup-ids-->
   <xsl:template match="sub-article[@article-type='reply']//fig[@specific-use='child-fig']"
                 priority="1000"
                 mode="M138">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="sub-article[@article-type='reply']//fig[@specific-use='child-fig']"
                       id="rep-fig-sup-ids"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^respfig[0-9]{1,3}s[0-9]{1,3}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(@id,'^respfig[0-9]{1,3}s[0-9]{1,3}$')">
               <xsl:attribute name="id">resp-fig-sup-id-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>author response figure supplement must have @id in the format respfig0s0.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M138"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M138"/>
   <xsl:template match="@*|node()" priority="-2" mode="M138">
      <xsl:apply-templates select="*" mode="M138"/>
   </xsl:template>

   <!--PATTERN related-articles-ids-pattern-->


	  <!--RULE related-articles-ids-->
   <xsl:template match="related-article" priority="1000" mode="M139">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="related-article"
                       id="related-articles-ids"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^ra\d$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(@id,'^ra\d$')">
               <xsl:attribute name="id">related-articles-test-7</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>related-article element must contain a @id, the value of which should be in the form ra0.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M139"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M139"/>
   <xsl:template match="@*|node()" priority="-2" mode="M139">
      <xsl:apply-templates select="*" mode="M139"/>
   </xsl:template>

   <!--PATTERN aff-ids-pattern-->


	  <!--RULE aff-ids-->
   <xsl:template match="aff[not(parent::contrib)]" priority="1000" mode="M140">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="aff[not(parent::contrib)]"
                       id="aff-ids"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="if (label) then @id = concat('aff',label)                     else starts-with(@id,'aff')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="if (label) then @id = concat('aff',label) else starts-with(@id,'aff')">
               <xsl:attribute name="id">aff-id-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>aff @id must be a concatenation of 'aff' and the child label value. In this instance it should be <xsl:text/>
                  <xsl:value-of select="concat('aff',label)"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M140"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M140"/>
   <xsl:template match="@*|node()" priority="-2" mode="M140">
      <xsl:apply-templates select="*" mode="M140"/>
   </xsl:template>

   <!--PATTERN fn-ids-pattern-->


	  <!--RULE fn-ids-->
   <xsl:template match="fn" priority="1000" mode="M141">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="fn" id="fn-ids"/>
      <xsl:variable name="type" select="@fn-type"/>
      <xsl:variable name="parent" select="self::*/parent::*/local-name()"/>

		    <!--REPORT error-->
      <xsl:if test="if ($parent = 'table-wrap-foot') then ()         else if ($type = 'conflict') then not(matches(@id,'^conf[0-9]{1,3}$'))         else if ($type = 'con') then           if ($parent = 'author-notes') then not(matches(@id,'^equal-contrib[0-9]{1,3}$'))           else not(matches(@id,'^con[0-9]{1,3}$'))         else if ($type = 'present-address') then not(matches(@id,'^pa[0-9]{1,3}$'))         else if ($type = 'COI-statement') then not(matches(@id,'^conf[0-9]{1,3}$'))         else if ($type = 'fn') then not(matches(@id,'^fn[0-9]{1,3}$'))         else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($parent = 'table-wrap-foot') then () else if ($type = 'conflict') then not(matches(@id,'^conf[0-9]{1,3}$')) else if ($type = 'con') then if ($parent = 'author-notes') then not(matches(@id,'^equal-contrib[0-9]{1,3}$')) else not(matches(@id,'^con[0-9]{1,3}$')) else if ($type = 'present-address') then not(matches(@id,'^pa[0-9]{1,3}$')) else if ($type = 'COI-statement') then not(matches(@id,'^conf[0-9]{1,3}$')) else if ($type = 'fn') then not(matches(@id,'^fn[0-9]{1,3}$')) else ()">
            <xsl:attribute name="id">fn-id-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>fn @id is not in the correct format. Refer to eLife kitchen sink for correct format.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M141"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M141"/>
   <xsl:template match="@*|node()" priority="-2" mode="M141">
      <xsl:apply-templates select="*" mode="M141"/>
   </xsl:template>

   <!--PATTERN disp-formula-ids-pattern-->


	  <!--RULE disp-formula-ids-->
   <xsl:template match="disp-formula" priority="1000" mode="M142">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="disp-formula"
                       id="disp-formula-ids"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^equ[0-9]{1,9}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(@id,'^equ[0-9]{1,9}$')">
               <xsl:attribute name="id">disp-formula-id-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>disp-formula @id must be in the format 'equ0'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M142"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M142"/>
   <xsl:template match="@*|node()" priority="-2" mode="M142">
      <xsl:apply-templates select="*" mode="M142"/>
   </xsl:template>

   <!--PATTERN mml-math-ids-pattern-->


	  <!--RULE mml-math-ids-->
   <xsl:template match="disp-formula/mml:math" priority="1000" mode="M143">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="disp-formula/mml:math"
                       id="mml-math-ids"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id,'^m[0-9]{1,9}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(@id,'^m[0-9]{1,9}$')">
               <xsl:attribute name="id">mml-math-id-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>disp-formula @id must be in the format 'm0'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M143"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M143"/>
   <xsl:template match="@*|node()" priority="-2" mode="M143">
      <xsl:apply-templates select="*" mode="M143"/>
   </xsl:template>

   <!--PATTERN app-table-wrap-ids-pattern-->


	  <!--RULE app-table-wrap-ids-->
   <xsl:template match="app/table-wrap" priority="1000" mode="M144">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="app/table-wrap"
                       id="app-table-wrap-ids"/>
      <xsl:variable name="app-no" select="substring-after(ancestor::app/@id,'-')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@id, '^app[0-9]{1,3}table[0-9]{1,3}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(@id, '^app[0-9]{1,3}table[0-9]{1,3}$')">
               <xsl:attribute name="id">app-table-wrap-id-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>table-wrap @id in appendix must be in the format 'app0table0'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="starts-with(@id, concat('app' , $app-no))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="starts-with(@id, concat('app' , $app-no))">
               <xsl:attribute name="id">app-table-wrap-id-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>table-wrap @id must start with <xsl:text/>
                  <xsl:value-of select="concat('app' , $app-no)"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M144"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M144"/>
   <xsl:template match="@*|node()" priority="-2" mode="M144">
      <xsl:apply-templates select="*" mode="M144"/>
   </xsl:template>

   <!--PATTERN resp-table-wrap-ids-pattern-->


	  <!--RULE resp-table-wrap-ids-->
   <xsl:template match="sub-article[@article-type='reply']//table-wrap"
                 priority="1000"
                 mode="M145">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="sub-article[@article-type='reply']//table-wrap"
                       id="resp-table-wrap-ids"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="if (label) then matches(@id, '^resptable[0-9]{1,3}$')         else matches(@id, '^respinlinetable[0-9]{1,3}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="if (label) then matches(@id, '^resptable[0-9]{1,3}$') else matches(@id, '^respinlinetable[0-9]{1,3}$')">
               <xsl:attribute name="id">resp-table-wrap-id-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>table-wrap @id in author reply must be in the format 'resptable0' if it has a label or in the format 'respinlinetable0' if it does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M145"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M145"/>
   <xsl:template match="@*|node()" priority="-2" mode="M145">
      <xsl:apply-templates select="*" mode="M145"/>
   </xsl:template>

   <!--PATTERN table-wrap-ids-pattern-->


	  <!--RULE table-wrap-ids-->
   <xsl:template match="article//table-wrap[not(ancestor::app) and not(ancestor::sub-article[@article-type='reply'])]"
                 priority="1000"
                 mode="M146">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article//table-wrap[not(ancestor::app) and not(ancestor::sub-article[@article-type='reply'])]"
                       id="table-wrap-ids"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="if (label = 'Key resources table') then @id='keyresource'                     else if (label) then matches(@id, '^table[0-9]{1,3}$')                     else matches(@id, '^inlinetable[0-9]{1,3}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="if (label = 'Key resources table') then @id='keyresource' else if (label) then matches(@id, '^table[0-9]{1,3}$') else matches(@id, '^inlinetable[0-9]{1,3}$')">
               <xsl:attribute name="id">table-wrap-id-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>table-wrap @id must be in the format 'table0', unless it doesn't have a label, in which case it must be 'inlinetable0' or it is the key resource table which must be 'keyresource'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M146"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M146"/>
   <xsl:template match="@*|node()" priority="-2" mode="M146">
      <xsl:apply-templates select="*" mode="M146"/>
   </xsl:template>

   <!--PATTERN body-top-level-sec-ids-pattern-->


	  <!--RULE body-top-level-sec-ids-->
   <xsl:template match="article/body/sec" priority="1000" mode="M147">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article/body/sec"
                       id="body-top-level-sec-ids"/>
      <xsl:variable name="pos"
                    select="count(parent::body/sec) - count(following-sibling::sec)"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@id = concat('s',$pos)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@id = concat('s',$pos)">
               <xsl:attribute name="id">body-top-level-sec-id-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>This sec id must be a concatenation of 's' and this element's position relative to it's siblings. It must be <xsl:text/>
                  <xsl:value-of select="concat('s',$pos)"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M147"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M147"/>
   <xsl:template match="@*|node()" priority="-2" mode="M147">
      <xsl:apply-templates select="*" mode="M147"/>
   </xsl:template>

   <!--PATTERN back-top-level-sec-ids-pattern-->


	  <!--RULE back-top-level-sec-ids-->
   <xsl:template match="article/back/sec" priority="1000" mode="M148">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article/back/sec"
                       id="back-top-level-sec-ids"/>
      <xsl:variable name="pos"
                    select="count(ancestor::article/body/sec) + count(parent::back/sec) - count(following-sibling::sec)"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@id = concat('s',$pos)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@id = concat('s',$pos)">
               <xsl:attribute name="id">back-top-level-sec-id-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>This sec id must be a concatenation of 's' and this element's position relative to other top level secs. It must be <xsl:text/>
                  <xsl:value-of select="concat('s',$pos)"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M148"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M148"/>
   <xsl:template match="@*|node()" priority="-2" mode="M148">
      <xsl:apply-templates select="*" mode="M148"/>
   </xsl:template>

   <!--PATTERN low-level-sec-ids-pattern-->


	  <!--RULE low-level-sec-ids-->
   <xsl:template match="article/body/sec//sec|article/back/sec//sec"
                 priority="1000"
                 mode="M149">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article/body/sec//sec|article/back/sec//sec"
                       id="low-level-sec-ids"/>
      <xsl:variable name="parent-sec" select="parent::sec/@id"/>
      <xsl:variable name="pos"
                    select="count(parent::sec/sec) - count(following-sibling::sec)"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@id = concat($parent-sec,'-',$pos)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="@id = concat($parent-sec,'-',$pos)">
               <xsl:attribute name="id">low-level-sec-id-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>sec id must be a concatenation of it's parent sec id and this element's position relative to it's sibling secs. It must be <xsl:text/>
                  <xsl:value-of select="concat($parent-sec,'-',$pos)"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M149"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M149"/>
   <xsl:template match="@*|node()" priority="-2" mode="M149">
      <xsl:apply-templates select="*" mode="M149"/>
   </xsl:template>

   <!--PATTERN sec-tests-pattern-->


	  <!--RULE sec-tests-->
   <xsl:template match="sec" priority="1000" mode="M150">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="sec"
                       id="sec-tests"/>
      <xsl:variable name="child-count"
                    select="count(p) + count(sec) + count(fig) + count(fig-group) + count(media) + count(table-wrap) + count(boxed-text) + count(list) + count(fn-group) + count(supplementary-material)"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="title"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="title">
               <xsl:attribute name="id">sec-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>sec must have a title</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$child-count gt 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$child-count gt 0">
               <xsl:attribute name="id">sec-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>sec appears to contain no content. This cannot be correct.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M150"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M150"/>
   <xsl:template match="@*|node()" priority="-2" mode="M150">
      <xsl:apply-templates select="*" mode="M150"/>
   </xsl:template>

   <!--PATTERN back-tests-pattern-->


	  <!--RULE back-tests-->
   <xsl:template match="back" priority="1000" mode="M151">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="back"
                       id="back-tests"/>
      <xsl:variable name="article-type" select="parent::article/@article-type"/>
      <xsl:variable name="subj-type"
                    select="parent::article//subj-group[@subj-group-type='display-channel']/subject"/>

		    <!--REPORT error-->
      <xsl:if test="if ($article-type = ($features-article-types,'retraction','correction')) then ()                     else count(sec[@sec-type='additional-information']) != 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($article-type = ($features-article-types,'retraction','correction')) then () else count(sec[@sec-type='additional-information']) != 1">
            <xsl:attribute name="id">back-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>One and only one sec[@sec-type="additional-information"] must be present in back.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(sec[@sec-type='supplementary-material']) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="count(sec[@sec-type='supplementary-material']) gt 1">
            <xsl:attribute name="id">back-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>More than one sec[@sec-type="supplementary-material"] cannot be present in back.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if (($article-type != 'research-article') or ($subj-type = 'Scientific Correspondence') ) then ()         else count(sec[@sec-type='data-availability']) != 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if (($article-type != 'research-article') or ($subj-type = 'Scientific Correspondence') ) then () else count(sec[@sec-type='data-availability']) != 1">
            <xsl:attribute name="id">back-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>One and only one sec[@sec-type="data-availability"] must be present as a child of back for '<xsl:text/>
               <xsl:value-of select="$article-type"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(ack) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(ack) gt 1">
            <xsl:attribute name="id">back-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>One and only one ack may be present in back.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if ($article-type = ('research-article','article-commentary')) then (count(ref-list) != 1)                                           else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($article-type = ('research-article','article-commentary')) then (count(ref-list) != 1) else ()">
            <xsl:attribute name="id">back-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>One and only one ref-list must be present in <xsl:text/>
               <xsl:value-of select="$article-type"/>
               <xsl:text/> content.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(app-group) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(app-group) gt 1">
            <xsl:attribute name="id">back-test-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>One and only one app-group may be present in back.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if ($article-type = 'article-commentary') then ()         else (count(sec[@sec-type='additional-information']/fn-group[@content-type='competing-interest']) != 1)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($article-type = 'article-commentary') then () else (count(sec[@sec-type='additional-information']/fn-group[@content-type='competing-interest']) != 1)">
            <xsl:attribute name="id">back-test-7</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>One and only one fn-group[@content-type='competing-interest'] must be present in back in <xsl:text/>
               <xsl:value-of select="$article-type"/>
               <xsl:text/> content.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="if ($article-type = ($features-article-types,'retraction','correction')) then ()         else if ($subj-type = 'Scientific Correspondence') then ()         else (not(ack))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($article-type = ($features-article-types,'retraction','correction')) then () else if ($subj-type = 'Scientific Correspondence') then () else (not(ack))">
            <xsl:attribute name="id">back-test-8</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>'<xsl:text/>
               <xsl:value-of select="$article-type"/>
               <xsl:text/>' usually have acknowledgement sections, but there isn't one here. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M151"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M151"/>
   <xsl:template match="@*|node()" priority="-2" mode="M151">
      <xsl:apply-templates select="*" mode="M151"/>
   </xsl:template>

   <!--PATTERN data-content-tests-pattern-->


	  <!--RULE data-content-tests-->
   <xsl:template match="back/sec[@sec-type='data-availability']"
                 priority="1000"
                 mode="M152">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="back/sec[@sec-type='data-availability']"
                       id="data-content-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(p) gt 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(p) gt 0">
               <xsl:attribute name="id">data-p-presence</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>At least one p element must be present in sec[@sec-type='data=availability'].</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M152"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M152"/>
   <xsl:template match="@*|node()" priority="-2" mode="M152">
      <xsl:apply-templates select="*" mode="M152"/>
   </xsl:template>

   <!--PATTERN ack-tests-pattern-->


	  <!--RULE ack-tests-->
   <xsl:template match="back/ack" priority="1000" mode="M153">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="back/ack"
                       id="ack-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(title) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(title) = 1">
               <xsl:attribute name="id">ack-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>ack must have only 1 title.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M153"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M153"/>
   <xsl:template match="@*|node()" priority="-2" mode="M153">
      <xsl:apply-templates select="*" mode="M153"/>
   </xsl:template>

   <!--PATTERN ack-child-tests-pattern-->


	  <!--RULE ack-child-tests-->
   <xsl:template match="back/ack/*" priority="1000" mode="M154">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="back/ack/*"
                       id="ack-child-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="local-name() = ('p','sec','title')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="local-name() = ('p','sec','title')">
               <xsl:attribute name="id">ack-child-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>Only p, sec or title can be children of ack. <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> is not allowed.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M154"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M154"/>
   <xsl:template match="@*|node()" priority="-2" mode="M154">
      <xsl:apply-templates select="*" mode="M154"/>
   </xsl:template>

   <!--PATTERN app-tests-pattern-->


	  <!--RULE app-tests-->
   <xsl:template match="back//app" priority="1000" mode="M155">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="back//app"
                       id="app-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="parent::app-group"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="parent::app-group">
               <xsl:attribute name="id">app-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>app must be captured as a child of an app-group element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(title) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(title) = 1">
               <xsl:attribute name="id">app-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>app must have one title.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M155"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M155"/>
   <xsl:template match="@*|node()" priority="-2" mode="M155">
      <xsl:apply-templates select="*" mode="M155"/>
   </xsl:template>

   <!--PATTERN additional-info-tests-pattern-->


	  <!--RULE additional-info-tests-->
   <xsl:template match="sec[@sec-type='additional-information']"
                 priority="1000"
                 mode="M156">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="sec[@sec-type='additional-information']"
                       id="additional-info-tests"/>
      <xsl:variable name="article-type" select="ancestor::article/@article-type"/>
      <xsl:variable name="author-count"
                    select="count(ancestor::article//article-meta//contrib[@contrib-type='author'])"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="parent::back"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="parent::back">
               <xsl:attribute name="id">additional-info-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>sec[@sec-type='additional-information'] must be a child of back.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="if ($author-count = 0) then ()                     else not(fn-group[@content-type='competing-interest'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($author-count = 0) then () else not(fn-group[@content-type='competing-interest'])">
            <xsl:attribute name="id">additional-info-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>This type of sec must have a child fn-group[@content-type='competing-interest'].</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if ($article-type = 'research-article') then (not(fn-group[@content-type='author-contribution']))                     else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ($article-type = 'research-article') then (not(fn-group[@content-type='author-contribution'])) else ()">
            <xsl:attribute name="id">additional-info-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>This type of sec in research content must have a child fn-group[@content-type='author-contribution'].</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M156"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M156"/>
   <xsl:template match="@*|node()" priority="-2" mode="M156">
      <xsl:apply-templates select="*" mode="M156"/>
   </xsl:template>

   <!--PATTERN comp-int-fn-group-tests-pattern-->


	  <!--RULE comp-int-fn-group-tests-->
   <xsl:template match="fn-group[@content-type='competing-interest']"
                 priority="1000"
                 mode="M157">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="fn-group[@content-type='competing-interest']"
                       id="comp-int-fn-group-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(fn) gt 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(fn) gt 0">
               <xsl:attribute name="id">comp-int-fn-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>At least one child fn element should be present in fn-group[@content-type='competing-interest'].</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="ancestor::back"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ancestor::back">
               <xsl:attribute name="id">comp-int-fn-group-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>This fn-group must be a descendant of back.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M157"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M157"/>
   <xsl:template match="@*|node()" priority="-2" mode="M157">
      <xsl:apply-templates select="*" mode="M157"/>
   </xsl:template>

   <!--PATTERN comp-int-fn-tests-pattern-->


	  <!--RULE comp-int-fn-tests-->
   <xsl:template match="fn-group[@content-type='competing-interest']/fn"
                 priority="1000"
                 mode="M158">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="fn-group[@content-type='competing-interest']/fn"
                       id="comp-int-fn-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@fn-type='COI-statement'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@fn-type='COI-statement'">
               <xsl:attribute name="id">comp-int-fn-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>fn element must have an @fn-type='COI-statement' as it is a child of fn-group[@content-type='competing-interest'].</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M158"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M158"/>
   <xsl:template match="@*|node()" priority="-2" mode="M158">
      <xsl:apply-templates select="*" mode="M158"/>
   </xsl:template>

   <!--PATTERN auth-cont-tests-pattern-->


	  <!--RULE auth-cont-tests-->
   <xsl:template match="fn-group[@content-type='author-contribution']"
                 priority="1000"
                 mode="M159">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="fn-group[@content-type='author-contribution']"
                       id="auth-cont-tests"/>
      <xsl:variable name="author-count"
                    select="count(ancestor::article//article-meta/contrib-group[1]/contrib[@contrib-type='author'])"/>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="$author-count = count(fn)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="$author-count = count(fn)">
               <xsl:attribute name="id">auth-cont-test-1</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>fn-group does not contain one fn for each author. Currently there are <xsl:text/>
                  <xsl:value-of select="$author-count"/>
                  <xsl:text/> authors but <xsl:text/>
                  <xsl:value-of select="count(fn)"/>
                  <xsl:text/> footnotes. Is this correct?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M159"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M159"/>
   <xsl:template match="@*|node()" priority="-2" mode="M159">
      <xsl:apply-templates select="*" mode="M159"/>
   </xsl:template>

   <!--PATTERN auth-cont-fn-tests-pattern-->


	  <!--RULE auth-cont-fn-tests-->
   <xsl:template match="fn-group[@content-type='author-contribution']/fn"
                 priority="1000"
                 mode="M160">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="fn-group[@content-type='author-contribution']/fn"
                       id="auth-cont-fn-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@fn-type='con'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@fn-type='con'">
               <xsl:attribute name="id">auth-cont-fn-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>This fn must have an @fn-type='con'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M160"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M160"/>
   <xsl:template match="@*|node()" priority="-2" mode="M160">
      <xsl:apply-templates select="*" mode="M160"/>
   </xsl:template>

   <!--PATTERN ethics-tests-pattern-->


	  <!--RULE ethics-tests-->
   <xsl:template match="fn-group[@content-type='ethics-information']"
                 priority="1000"
                 mode="M161">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="fn-group[@content-type='ethics-information']"
                       id="ethics-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="parent::sec[@sec-type='additional-information']"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="parent::sec[@sec-type='additional-information']">
               <xsl:attribute name="id">ethics-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>Ethics fn-group can only be captured as a child of a sec [@sec-type='additional-information']</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="count(fn) gt 3">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(fn) gt 3">
            <xsl:attribute name="id">ethics-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Ethics fn-group may not have more than 3 fn elements. Currently there are <xsl:text/>
               <xsl:value-of select="count(fn)"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(fn) = 0">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(fn) = 0">
            <xsl:attribute name="id">ethics-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Ethics fn-group must have at least one fn element.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M161"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M161"/>
   <xsl:template match="@*|node()" priority="-2" mode="M161">
      <xsl:apply-templates select="*" mode="M161"/>
   </xsl:template>

   <!--PATTERN ethics-fn-tests-pattern-->


	  <!--RULE ethics-fn-tests-->
   <xsl:template match="fn-group[@content-type='ethics-information']/fn"
                 priority="1000"
                 mode="M162">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="fn-group[@content-type='ethics-information']/fn"
                       id="ethics-fn-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@fn-type='other'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@fn-type='other'">
               <xsl:attribute name="id">ethics-test-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>This fn must have an @fn-type='other'</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M162"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M162"/>
   <xsl:template match="@*|node()" priority="-2" mode="M162">
      <xsl:apply-templates select="*" mode="M162"/>
   </xsl:template>

   <!--PATTERN dec-letter-reply-tests-pattern-->


	  <!--RULE dec-letter-reply-tests-->
   <xsl:template match="article/sub-article" priority="1000" mode="M163">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article/sub-article"
                       id="dec-letter-reply-tests"/>
      <xsl:variable name="pos"
                    select="count(parent::article/sub-article) - count(following-sibling::sub-article)"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="if ($pos = 1) then @article-type='decision-letter'                     else @article-type='reply'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="if ($pos = 1) then @article-type='decision-letter' else @article-type='reply'">
               <xsl:attribute name="id">dec-letter-reply-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>1st sub-article must be the decision letter. 2nd sub-article must be the author response.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@id = concat('SA',$pos)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@id = concat('SA',$pos)">
               <xsl:attribute name="id">dec-letter-reply-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>sub-article id must be in the format 'SA0', where '0' is it's position (1 or 2).</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(front-stub) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(front-stub) = 1">
               <xsl:attribute name="id">dec-letter-reply-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>sub-article contain one and only one front-stub.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(body) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(body) = 1">
               <xsl:attribute name="id">dec-letter-reply-test-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>sub-article contain one and only one body.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'&lt;[/]?[Aa]uthor response')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'&lt;[/]?[Aa]uthor response')">
            <xsl:attribute name="id">dec-letter-reply-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="@article-type"/>
               <xsl:text/> contains what looks like pseudo-code, search - '&lt;/Author response' or '&lt;Author response'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M163"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M163"/>
   <xsl:template match="@*|node()" priority="-2" mode="M163">
      <xsl:apply-templates select="*" mode="M163"/>
   </xsl:template>

   <!--PATTERN dec-letter-front-tests-pattern-->


	  <!--RULE dec-letter-front-tests-->
   <xsl:template match="sub-article[@article-type='decision-letter']/front-stub"
                 priority="1000"
                 mode="M164">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="sub-article[@article-type='decision-letter']/front-stub"
                       id="dec-letter-front-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(article-id[@pub-id-type='doi']) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(article-id[@pub-id-type='doi']) = 1">
               <xsl:attribute name="id">dec-letter-front-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>sub-article front-stub must contain article-id[@pub-id-type='doi'].</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(contrib-group) gt 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(contrib-group) gt 0">
               <xsl:attribute name="id">dec-letter-front-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>sub-article front-stub must contain at least 1 contrib-group element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M164"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M164"/>
   <xsl:template match="@*|node()" priority="-2" mode="M164">
      <xsl:apply-templates select="*" mode="M164"/>
   </xsl:template>

   <!--PATTERN dec-letter-body-tests-pattern-->


	  <!--RULE dec-letter-body-tests-->
   <xsl:template match="sub-article[@article-type='decision-letter']/body"
                 priority="1000"
                 mode="M165">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="sub-article[@article-type='decision-letter']/body"
                       id="dec-letter-body-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="child::*[1]/local-name() = 'boxed-text'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="child::*[1]/local-name() = 'boxed-text'">
               <xsl:attribute name="id">dec-letter-body-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>First child element in decision letter is not boxed-text. This is certainly incorrect.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M165"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M165"/>
   <xsl:template match="@*|node()" priority="-2" mode="M165">
      <xsl:apply-templates select="*" mode="M165"/>
   </xsl:template>

   <!--PATTERN reply-front-tests-pattern-->


	  <!--RULE reply-front-tests-->
   <xsl:template match="sub-article[@article-type='reply']/front-stub"
                 priority="1000"
                 mode="M166">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="sub-article[@article-type='reply']/front-stub"
                       id="reply-front-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(article-id[@pub-id-type='doi']) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(article-id[@pub-id-type='doi']) = 1">
               <xsl:attribute name="id">reply-front-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>sub-article front-stub must contain article-id[@pub-id-type='doi'].</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M166"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M166"/>
   <xsl:template match="@*|node()" priority="-2" mode="M166">
      <xsl:apply-templates select="*" mode="M166"/>
   </xsl:template>

   <!--PATTERN reply-body-tests-pattern-->


	  <!--RULE reply-body-tests-->
   <xsl:template match="sub-article[@article-type='reply']/body"
                 priority="1000"
                 mode="M167">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="sub-article[@article-type='reply']/body"
                       id="reply-body-tests"/>

		    <!--REPORT error-->
      <xsl:if test="count(disp-quote[@content-type='editor-comment']) = 0">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="count(disp-quote[@content-type='editor-comment']) = 0">
            <xsl:attribute name="id">reply-body-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>author response doesn't contain a disp-quote. This has to be incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(p) = 0">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(p) = 0">
            <xsl:attribute name="id">reply-body-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>author response doesn't contain a p. This has to be incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M167"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M167"/>
   <xsl:template match="@*|node()" priority="-2" mode="M167">
      <xsl:apply-templates select="*" mode="M167"/>
   </xsl:template>

   <!--PATTERN reply-disp-quote-tests-pattern-->


	  <!--RULE reply-disp-quote-tests-->
   <xsl:template match="sub-article[@article-type='reply']/body//disp-quote"
                 priority="1000"
                 mode="M168">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="sub-article[@article-type='reply']/body//disp-quote"
                       id="reply-disp-quote-tests"/>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="@content-type='editor-comment'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="@content-type='editor-comment'">
               <xsl:attribute name="id">reply-disp-quote-test-1</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>disp-quote in author reply does not have @content-type='editor-comment'. This is almost certainly incorrect.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M168"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M168"/>
   <xsl:template match="@*|node()" priority="-2" mode="M168">
      <xsl:apply-templates select="*" mode="M168"/>
   </xsl:template>

   <!--PATTERN research-advance-test-pattern-->


	  <!--RULE research-advance-test-->
   <xsl:template match="article[$disp-channel = 'Research Advance']//article-meta"
                 priority="1000"
                 mode="M169">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article[$disp-channel = 'Research Advance']//article-meta"
                       id="research-advance-test"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(related-article[@related-article-type='article-reference']) gt 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(related-article[@related-article-type='article-reference']) gt 0">
               <xsl:attribute name="id">related-articles-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>Research Advance must contain an article-reference link to the original article it is building upon.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M169"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M169"/>
   <xsl:template match="@*|node()" priority="-2" mode="M169">
      <xsl:apply-templates select="*" mode="M169"/>
   </xsl:template>

   <!--PATTERN insight-test-pattern-->


	  <!--RULE insight-test-->
   <xsl:template match="article[$disp-channel = 'Insight']//article-meta"
                 priority="1000"
                 mode="M170">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article[$disp-channel = 'Insight']//article-meta"
                       id="insight-test"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(related-article) gt 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(related-article) gt 0">
               <xsl:attribute name="id">related-articles-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>Insight must contain an article-reference link to the original article it is discussing.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M170"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M170"/>
   <xsl:template match="@*|node()" priority="-2" mode="M170">
      <xsl:apply-templates select="*" mode="M170"/>
   </xsl:template>

   <!--PATTERN related-articles-conformance-pattern-->


	  <!--RULE related-articles-conformance-->
   <xsl:template match="related-article" priority="1000" mode="M171">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="related-article"
                       id="related-articles-conformance"/>
      <xsl:variable name="allowed-values"
                    select="('article-reference', 'commentary', 'commentary-article', 'corrected-article', 'retracted-article')"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@related-article-type"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@related-article-type">
               <xsl:attribute name="id">related-articles-test-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>related-article element must contain a @related-article-type.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@related-article-type = $allowed-values"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="@related-article-type = $allowed-values">
               <xsl:attribute name="id">related-articles-test-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>@related-article-type must be equal to one of the allowed values, ('article-reference', 'commentary', 'commentary-article', 'corrected-article', and 'retracted-article').</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@ext-link-type='doi'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@ext-link-type='doi'">
               <xsl:attribute name="id">related-articles-test-5</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>related-article element must contain a @ext-link-type='doi'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(@xlink:href,'^10\.7554/eLife\.[\d]{5}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(@xlink:href,'^10\.7554/eLife\.[\d]{5}$')">
               <xsl:attribute name="id">related-articles-test-6</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>related-article element must contain a @xlink:href, the value of which should be in the form 10.7554/eLife.00000.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M171"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M171"/>
   <xsl:template match="@*|node()" priority="-2" mode="M171">
      <xsl:apply-templates select="*" mode="M171"/>
   </xsl:template>

   <!--PATTERN elem-citation-general-pattern-->


	  <!--RULE elem-citation-general-->
   <xsl:template match="element-citation" priority="1000" mode="M172">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation"
                       id="elem-citation-general"/>

		    <!--REPORT error-->
      <xsl:if test="person-group/name[not(surname)]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="person-group/name[not(surname)]">
            <xsl:attribute name="id">err-elem-cit-gen-name-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-gen-name-2]
        Each &lt;name&gt; element in a reference must contain a &lt;surname&gt; element. 
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' does not.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::etal">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::etal">
            <xsl:attribute name="id">err-elem-cit-gen-name-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-gen-name-5]
        The &lt;etal&gt; element in a reference is not allowed.
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' contains it.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(year)&gt;1 ">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(year)&gt;1">
            <xsl:attribute name="id">err-elem-cit-gen-date-1-9</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-gen-date-1-9]
        There may be at most one &lt;year&gt; element.
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has <xsl:text/>
               <xsl:value-of select="count(year)"/>
               <xsl:text/>
        &lt;year&gt; elements.
      </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M172"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M172"/>
   <xsl:template match="@*|node()" priority="-2" mode="M172">
      <xsl:apply-templates select="*" mode="M172"/>
   </xsl:template>

   <!--PATTERN elem-citation-gen-name-3-1-pattern-->


	  <!--RULE elem-citation-gen-name-3-1-->
   <xsl:template match="element-citation/person-group" priority="1000" mode="M173">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation/person-group"
                       id="elem-citation-gen-name-3-1"/>

		    <!--REPORT error-->
      <xsl:if test=".[not (name or collab)]">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test=".[not (name or collab)]">
            <xsl:attribute name="id">err-elem-cit-gen-name-3-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-gen-name-3-1]
        Each &lt;person-group&gt; element in a reference must contain at least one
        &lt;name&gt; or, if allowed, &lt;collab&gt; element. 
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' does not.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M173"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M173"/>
   <xsl:template match="@*|node()" priority="-2" mode="M173">
      <xsl:apply-templates select="*" mode="M173"/>
   </xsl:template>

   <!--PATTERN elem-citation-gen-name-3-2-pattern-->


	  <!--RULE elem-citation-gen-name-3-2-->
   <xsl:template match="element-citation/person-group/collab"
                 priority="1000"
                 mode="M174">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation/person-group/collab"
                       id="elem-citation-gen-name-3-2"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(italic | sub | sup)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*) = count(italic | sub | sup)">
               <xsl:attribute name="id">err-elem-cit-gen-name-3-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-gen-name-3-2]
        A &lt;collab&gt; element in a reference may contain characters and &lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. 
        No other elements are allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' contains addiitonal elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M174"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M174"/>
   <xsl:template match="@*|node()" priority="-2" mode="M174">
      <xsl:apply-templates select="*" mode="M174"/>
   </xsl:template>

   <!--PATTERN elem-citation-gen-name-4-pattern-->


	  <!--RULE elem-citation-gen-name-4-->
   <xsl:template match="element-citation/person-group/name"
                 priority="1000"
                 mode="M175">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation/person-group/name"
                       id="elem-citation-gen-name-4"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="not(suffix) or .[suffix=('Jnr', 'Snr', 'I', 'II', 'III', 'VI', 'V', 'VI', 'VII', 'VIII', 'IX', 'X')] "/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="not(suffix) or .[suffix=('Jnr', 'Snr', 'I', 'II', 'III', 'VI', 'V', 'VI', 'VII', 'VIII', 'IX', 'X')]">
               <xsl:attribute name="id">err-elem-cit-gen-name-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-gen-name-4]
        The &lt;suffix&gt; element in a reference may only contain one of the specified values
        Jnr, Snr, I, II, III, VI, V, VI, VII, VIII, IX, X.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement
        as it contains the value '<xsl:text/>
                  <xsl:value-of select="suffix"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M175"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M175"/>
   <xsl:template match="@*|node()" priority="-2" mode="M175">
      <xsl:apply-templates select="*" mode="M175"/>
   </xsl:template>

   <!--PATTERN elem-citation-year-pattern-->


	  <!--RULE elem-citation-year-->
   <xsl:template match="ref/element-citation/year" priority="1000" mode="M176">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="ref/element-citation/year"
                       id="elem-citation-year"/>
      <xsl:variable name="YYYY" select="substring(normalize-space(.), 1, 4)"/>
      <xsl:variable name="current-year" select="year-from-date(current-date())"/>
      <xsl:variable name="citation" select="e:citation-format1(self::*)"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(normalize-space(.),'(^\d{4}[a-z]?)')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(normalize-space(.),'(^\d{4}[a-z]?)')">
               <xsl:attribute name="id">err-elem-cit-gen-date-1-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-gen-date-1-1]
        The &lt;year&gt; element in a reference must contain 4 digits, possibly followed by one (and only one) lower-case letter.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement as it contains
        the value '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'.
      </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="(1700 le number($YYYY)) and (number($YYYY) le ($current-year + 5))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="(1700 le number($YYYY)) and (number($YYYY) le ($current-year + 5))">
               <xsl:attribute name="id">err-elem-cit-gen-date-1-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-gen-date-1-2]
        The numeric value of the first 4 digits of the &lt;year&gt; element must be between 1700 and the current year + 5 years (inclusive).
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement as it contains
        the value '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'.
      </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="./@iso-8601-date"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="./@iso-8601-date">
               <xsl:attribute name="id">err-elem-cit-gen-date-1-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-gen-date-1-3]
        All &lt;year&gt; elements must have @iso-8601-date attributes.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not.
      </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="not(./@iso-8601-date) or (1700 le number(substring(normalize-space(@iso-8601-date),1,4)) and number(substring(normalize-space(@iso-8601-date),1,4)) le ($current-year + 5))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="not(./@iso-8601-date) or (1700 le number(substring(normalize-space(@iso-8601-date),1,4)) and number(substring(normalize-space(@iso-8601-date),1,4)) le ($current-year + 5))">
               <xsl:attribute name="id">err-elem-cit-gen-date-1-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-gen-date-1-4]
        The numeric value of the first 4 digits of the @iso-8601-date attribute on the &lt;year&gt; element must be between 
        1700 and the current year + 5 years (inclusive).
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement as the attribute contains the value 
        '<xsl:text/>
                  <xsl:value-of select="./@iso-8601-date"/>
                  <xsl:text/>'.
      </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="not(./@iso-8601-date) or substring(normalize-space(./@iso-8601-date),1,4) = $YYYY"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="not(./@iso-8601-date) or substring(normalize-space(./@iso-8601-date),1,4) = $YYYY">
               <xsl:attribute name="id">err-elem-cit-gen-date-1-5</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-gen-date-1-5]
        The numeric value of the first 4 digits of the @iso-8601-date attribute must match the first 4 digits on the 
        &lt;year&gt; element.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement as the element contains
        the value '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>' and the attribute contains the value 
        '<xsl:text/>
                  <xsl:value-of select="./@iso-8601-date"/>
                  <xsl:text/>'.
      </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="not(concat($YYYY, 'a')=.) or (concat($YYYY, 'a')=. and        (some $y in //element-citation/descendant::year        satisfies (normalize-space($y) = concat($YYYY,'b'))        and (ancestor::element-citation/person-group[1]/name[1]/surname = $y/ancestor::element-citation/person-group[1]/name[1]/surname       or ancestor::element-citation/person-group[1]/collab[1] = $y/ancestor::element-citation/person-group[1]/collab[1]       )))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="not(concat($YYYY, 'a')=.) or (concat($YYYY, 'a')=. and (some $y in //element-citation/descendant::year satisfies (normalize-space($y) = concat($YYYY,'b')) and (ancestor::element-citation/person-group[1]/name[1]/surname = $y/ancestor::element-citation/person-group[1]/name[1]/surname or ancestor::element-citation/person-group[1]/collab[1] = $y/ancestor::element-citation/person-group[1]/collab[1] )))">
               <xsl:attribute name="id">err-elem-cit-gen-date-1-6</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-gen-date-1-6]
        If the &lt;year&gt; element contains the letter 'a' after the digits, there must be another reference with 
        the same first author surname (or collab) with a letter "b" after the year. 
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not fulfill this requirement.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="not(starts-with(.,$YYYY) and matches(normalize-space(.),('\d{4}[b-z]'))) or       (some $y in //element-citation/descendant::year        satisfies (normalize-space($y) = concat($YYYY,translate(substring(normalize-space(.),5,1),'bcdefghijklmnopqrstuvwxyz',       'abcdefghijklmnopqrstuvwxy')))        and (ancestor::element-citation/person-group[1]/name[1]/surname = $y/ancestor::element-citation/person-group[1]/name[1]/surname       or ancestor::element-citation/person-group[1]/collab[1] = $y/ancestor::element-citation/person-group[1]/collab[1]       ))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="not(starts-with(.,$YYYY) and matches(normalize-space(.),('\d{4}[b-z]'))) or (some $y in //element-citation/descendant::year satisfies (normalize-space($y) = concat($YYYY,translate(substring(normalize-space(.),5,1),'bcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxy'))) and (ancestor::element-citation/person-group[1]/name[1]/surname = $y/ancestor::element-citation/person-group[1]/name[1]/surname or ancestor::element-citation/person-group[1]/collab[1] = $y/ancestor::element-citation/person-group[1]/collab[1] ))">
               <xsl:attribute name="id">err-elem-cit-gen-date-1-7</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-gen-date-1-7]
        If the &lt;year&gt; element contains any letter other than 'a' after the digits, there must be another 
        reference with the same first author surname (or collab) with the preceding letter after the year. 
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not fulfill this requirement.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="some $x in (preceding::year[ancestor::ref-list])       satisfies  e:citation-format1($x) = $citation">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="some $x in (preceding::year[ancestor::ref-list]) satisfies e:citation-format1($x) = $citation">
            <xsl:attribute name="id">err-elem-cit-gen-date-1-8</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-gen-date-1-8]
        Letter suffixes must be unique for the combination of year and author information. 
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' does not fulfill this requirement as it 
        contains the &lt;year&gt; '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' for the author information
        '<xsl:text/>
               <xsl:value-of select="e:stripDiacritics(ancestor::element-citation/person-group[1]/name[1]/surname)"/>
               <xsl:text/>', which occurs in at least one other reference.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M176"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M176"/>
   <xsl:template match="@*|node()" priority="-2" mode="M176">
      <xsl:apply-templates select="*" mode="M176"/>
   </xsl:template>

   <!--PATTERN ref-pattern-->


	  <!--RULE ref-->
   <xsl:template match="ref" priority="1000" mode="M177">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="ref" id="ref"/>
      <xsl:variable name="pre-name"
                    select="lower-case(if (local-name(element-citation/person-group[1]/*[1])='name')       then (element-citation/person-group[1]/name[1]/surname)       else (element-citation/person-group[1]/*[1]))"/>
      <xsl:variable name="name" select="e:stripDiacritics($pre-name)"/>
      <xsl:variable name="pre-name2"
                    select="lower-case(if (local-name(element-citation/person-group[1]/*[2])='name')       then (element-citation/person-group[1]/*[2]/surname)       else (element-citation/person-group[1]/*[2]))"/>
      <xsl:variable name="name2" select="e:stripDiacritics($pre-name2)"/>
      <xsl:variable name="pre-preceding-name"
                    select="lower-case(if (preceding-sibling::ref[1] and       local-name(preceding-sibling::ref[1]/element-citation/person-group[1]/*[1])='name')       then (preceding-sibling::ref[1]/element-citation/person-group[1]/name[1]/surname)       else (preceding-sibling::ref[1]/element-citation/person-group[1]/*[1]))"/>
      <xsl:variable name="preceding-name" select="e:stripDiacritics($pre-preceding-name)"/>
      <xsl:variable name="pre-preceding-name2"
                    select="lower-case(if (preceding-sibling::ref[1] and       local-name(preceding-sibling::ref[1]/element-citation/person-group[1]/*[2])='name')       then (preceding-sibling::ref[1]/element-citation/person-group[1]/*[2]/surname)       else (preceding-sibling::ref[1]/element-citation/person-group[1]/*[2]))"/>
      <xsl:variable name="preceding-name2" select="e:stripDiacritics($pre-preceding-name2)"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(element-citation)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*) = count(element-citation)">
               <xsl:attribute name="id">err-elem-cit-high-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-high-1]
        The only element that is allowed as a child of &lt;ref&gt; is
        &lt;element-citation&gt;. 
        Reference '<xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/>' has other elements.
      </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="if (count(element-citation/person-group[1]/*) != 2)       then (count(preceding-sibling::ref) = 0 or        ($name &gt; $preceding-name) or       ($name = $preceding-name and       element-citation/year &gt;= preceding-sibling::ref[1]/element-citation/year))       else (count(preceding-sibling::ref) = 0        or ($name &gt; $preceding-name) or       ($name = $preceding-name and $name2 &gt; $preceding-name2)        or        ($name = $preceding-name and $name2 = $preceding-name2 and       element-citation/year &gt;= preceding-sibling::ref[1]/element-citation/year)       or       ($name = $preceding-name and       count(preceding-sibling::ref[1]/element-citation/person-group[1]/*) !=2)       )"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="if (count(element-citation/person-group[1]/*) != 2) then (count(preceding-sibling::ref) = 0 or ($name &gt; $preceding-name) or ($name = $preceding-name and element-citation/year &gt;= preceding-sibling::ref[1]/element-citation/year)) else (count(preceding-sibling::ref) = 0 or ($name &gt; $preceding-name) or ($name = $preceding-name and $name2 &gt; $preceding-name2) or ($name = $preceding-name and $name2 = $preceding-name2 and element-citation/year &gt;= preceding-sibling::ref[1]/element-citation/year) or ($name = $preceding-name and count(preceding-sibling::ref[1]/element-citation/person-group[1]/*) !=2) )">
               <xsl:attribute name="id">err-elem-cit-high-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-high-2-2]
        The order of &lt;element-citation&gt;s in the reference list should be name and date, arranged alphabetically 
        by the first author’s surname, or by the value of the first &lt;collab&gt; element. In the case of
        two authors, the sequence should be arranged by both authors' surnames, then date. For
        three or more authors, the sequence should be the first author's surname, then date.
        Reference '<xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/>' appears to be in a different order.
      </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@id"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@id">
               <xsl:attribute name="id">err-elem-cit-high-3-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-high-3-1]
        Each &lt;ref&gt; element must have an @id attribute. 
      </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(normalize-space(@id) ,'^bib\d+$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(normalize-space(@id) ,'^bib\d+$')">
               <xsl:attribute name="id">err-elem-cit-high-3-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-high-3-2]
        Each &lt;ref&gt; element must have an @id attribute that starts with 'bib' and ends with 
        a number. 
        Reference '<xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/>' has the value 
        '<xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/>', which is incorrect.
      </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(preceding-sibling::ref)=0 or number(substring(@id,4)) gt number(substring(preceding-sibling::ref[1]/@id,4))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(preceding-sibling::ref)=0 or number(substring(@id,4)) gt number(substring(preceding-sibling::ref[1]/@id,4))">
               <xsl:attribute name="id">err-elem-cit-high-3-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-high-3-3]
        The sequence of ids in the &lt;ref&gt; elements must increase monotonically
        (e.g. 1,2,3,4,5, . . . ,50,51,52,53, . . . etc).
        Reference '<xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/>' has the value 
        '<xsl:text/>
                  <xsl:value-of select="@id"/>
                  <xsl:text/>', which does not fit this pattern.
      </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:variable name="year-comma" select="', \d{4}\w?$'"/>
      <xsl:variable name="year-paren" select="' \(\d{4}\w?\)$'"/>
      <xsl:apply-templates select="*" mode="M177"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M177"/>
   <xsl:template match="@*|node()" priority="-2" mode="M177">
      <xsl:apply-templates select="*" mode="M177"/>
   </xsl:template>

   <!--PATTERN xref-pattern-->


	  <!--RULE xref-->
   <xsl:template match="xref[@ref-type='bibr']" priority="1000" mode="M178">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="xref[@ref-type='bibr']"
                       id="xref"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="not(matches(substring(normalize-space(.),string-length(.)),'[b-z]')) or        (some $x in preceding::xref       satisfies (substring(normalize-space(.),string-length(.)) gt substring(normalize-space($x),string-length(.))))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="not(matches(substring(normalize-space(.),string-length(.)),'[b-z]')) or (some $x in preceding::xref satisfies (substring(normalize-space(.),string-length(.)) gt substring(normalize-space($x),string-length(.))))">
               <xsl:attribute name="id">err-xref-high-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-xref-high-2-1]
        Citations in the text to references with the same author(s) in the same year must be arranged in the same 
        order as the reference list. The xref with the value '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>' is in the wrong order in the 
        text. Check all the references to citations for the same authors to determine which need to be changed.
      </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M178"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M178"/>
   <xsl:template match="@*|node()" priority="-2" mode="M178">
      <xsl:apply-templates select="*" mode="M178"/>
   </xsl:template>

   <!--PATTERN elem-citation-pattern-->


	  <!--RULE elem-citation-->
   <xsl:template match="element-citation" priority="1000" mode="M179">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation"
                       id="elem-citation"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@publication-type"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@publication-type">
               <xsl:attribute name="id">err-elem-cit-high-6-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-high-6-1]
        The element-citation element must have a publication-type attribute.
        Reference '<xsl:text/>
                  <xsl:value-of select="../@id"/>
                  <xsl:text/>' does not.
      </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@publication-type = 'journal' or                     @publication-type = 'book'    or                     @publication-type = 'data'    or                     @publication-type = 'patent'    or                     @publication-type = 'software'    or                     @publication-type = 'preprint' or                     @publication-type = 'web'    or                     @publication-type = 'periodical' or                     @publication-type = 'report'    or                     @publication-type = 'confproc'    or                     @publication-type = 'thesis'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="@publication-type = 'journal' or @publication-type = 'book' or @publication-type = 'data' or @publication-type = 'patent' or @publication-type = 'software' or @publication-type = 'preprint' or @publication-type = 'web' or @publication-type = 'periodical' or @publication-type = 'report' or @publication-type = 'confproc' or @publication-type = 'thesis'">
               <xsl:attribute name="id">err-elem-cit-high-6-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-high-6-2]
        The publication-type attribute may only take the values 'journal', 'book', 'data', 
        'patent', 'software', 'preprint', 'web', 
        'periodical', 'report', 'confproc', or 'thesis'. 
        Reference '<xsl:text/>
                  <xsl:value-of select="../@id"/>
                  <xsl:text/>' has the publication-type 
        '<xsl:text/>
                  <xsl:value-of select="@publication-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M179"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M179"/>
   <xsl:template match="@*|node()" priority="-2" mode="M179">
      <xsl:apply-templates select="*" mode="M179"/>
   </xsl:template>

   <!--PATTERN elem-citation-journal-pattern-->


	  <!--RULE elem-citation-journal-->
   <xsl:template match="element-citation[@publication-type='journal']"
                 priority="1000"
                 mode="M180">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='journal']"
                       id="elem-citation-journal"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(person-group)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(person-group)=1">
               <xsl:attribute name="id">err-elem-cit-journal-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-journal-2-1]
        Each  &lt;element-citation&gt; of type 'journal' must contain one and
        only one &lt;person-group&gt; element.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(person-group)"/>
                  <xsl:text/> &lt;person-group&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="person-group[@person-group-type='author']"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="person-group[@person-group-type='author']">
               <xsl:attribute name="id">err-elem-cit-journal-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-journal-2-2]
        Each  &lt;element-citation&gt; of type 'journal' must contain one &lt;person-group&gt; 
        with the attribute person-group-type 'author'.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a  &lt;person-group&gt; type of 
        '<xsl:text/>
                  <xsl:value-of select="person-group/@person-group-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(article-title)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(article-title)=1">
               <xsl:attribute name="id">err-elem-cit-journal-3-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-journal-3-1]
        Each  &lt;element-citation&gt; of type 'journal' must contain one and
        only one &lt;article-title&gt; element.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(article-title)"/>
                  <xsl:text/> &lt;article-title&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(source)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(source)=1">
               <xsl:attribute name="id">err-elem-cit-journal-4-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-journal-4-1]
        Each  &lt;element-citation&gt; of type 'journal' must contain one and
        only one &lt;source&gt; element.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(source)"/>
                  <xsl:text/> &lt;source&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(source)=1 and (source/string-length() + sum(descendant::source/*/string-length()) ge 2)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(source)=1 and (source/string-length() + sum(descendant::source/*/string-length()) ge 2)">
               <xsl:attribute name="id">err-elem-cit-journal-4-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-journal-4-2-1]
        A  &lt;source&gt; element within a &lt;element-citation&gt; of type 'journal' must contain 
        at least two characters.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has too few characters.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(source)=1 and count(source/*)=0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(source)=1 and count(source/*)=0">
               <xsl:attribute name="id">err-elem-cit-journal-4-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-journal-4-2-2]
        A  &lt;source&gt; element within a &lt;element-citation&gt; of type 'journal' may not contain child 
        elements.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has disallowed child elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(volume) le 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(volume) le 1">
               <xsl:attribute name="id">err-elem-cit-journal-5-1-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-journal-5-1-3]
        There may be no more than one  &lt;volume&gt; element within a &lt;element-citation&gt; of type 'journal'.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(volume)"/>
                  <xsl:text/>
        &lt;volume&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="(count(fpage) eq 1) or (count(elocation-id) eq 1) or (count(comment/text()='In press') eq 1)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="(count(fpage) eq 1) or (count(elocation-id) eq 1) or (count(comment/text()='In press') eq 1)">
               <xsl:attribute name="id">warning-elem-cit-journal-6-1</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[warning-elem-cit-journal-6-1]
        One of &lt;fpage&gt;, &lt;elocation-id&gt;, or &lt;comment&gt;In press&lt;/comment&gt; should be present. 
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has missing page or elocation information.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="lpage and not(fpage)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="lpage and not(fpage)">
            <xsl:attribute name="id">err-elem-cit-journal-6-5-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-journal-6-5-1]
        &lt;lpage&gt; is only allowed if &lt;fpage&gt; is present. 
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has &lt;lpage&gt; but no &lt;fpage&gt;.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="lpage and (number(fpage[1]) &gt;= number(lpage[1]))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="lpage and (number(fpage[1]) &gt;= number(lpage[1]))">
            <xsl:attribute name="id">err-elem-cit-journal-6-5-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-journal-6-5-2]
        &lt;lpage&gt; must be larger than &lt;fpage&gt;, if present. 
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has first page &lt;fpage&gt; = '<xsl:text/>
               <xsl:value-of select="fpage"/>
               <xsl:text/>' 
        but last page &lt;lpage&gt; = '<xsl:text/>
               <xsl:value-of select="lpage"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(fpage) gt 1 or count(lpage) gt 1 or count(elocation-id) gt 1 or count(comment) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="count(fpage) gt 1 or count(lpage) gt 1 or count(elocation-id) gt 1 or count(comment) gt 1">
            <xsl:attribute name="id">err-elem-cit-journal-6-7</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-journal-6-7]
        The following elements may not occur more than once in an &lt;element-citation&gt;: &lt;fpage&gt;, &lt;lpage&gt;, 
        &lt;elocation-id&gt;, and &lt;comment&gt;In press&lt;/comment&gt;. 
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has 
        <xsl:text/>
               <xsl:value-of select="count(fpage)"/>
               <xsl:text/> &lt;fpage&gt;, <xsl:text/>
               <xsl:value-of select="count(lpage)"/>
               <xsl:text/> &lt;lpage&gt;,
        <xsl:text/>
               <xsl:value-of select="count(elocation-id)"/>
               <xsl:text/> &lt;elocation-id&gt;, and 
        <xsl:text/>
               <xsl:value-of select="count(comment)"/>
               <xsl:text/> &lt;comment&gt; elements.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(person-group| year| article-title| source| volume| fpage| lpage| elocation-id| comment| pub-id)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*) = count(person-group| year| article-title| source| volume| fpage| lpage| elocation-id| comment| pub-id)">
               <xsl:attribute name="id">err-elem-cit-journal-12</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-journal-12]
        The only elements allowed as children of &lt;element-citation&gt; with the publication-type="journal" are:
        &lt;person-group&gt;, &lt;year&gt;, &lt;article-title&gt;, &lt;source&gt;, &lt;volume&gt;, &lt;fpage&gt;, &lt;lpage&gt;, 
        &lt;elocation-id&gt;, &lt;comment&gt;, and &lt;pub-id&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has other elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M180"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M180"/>
   <xsl:template match="@*|node()" priority="-2" mode="M180">
      <xsl:apply-templates select="*" mode="M180"/>
   </xsl:template>

   <!--PATTERN elem-citation-journal-article-title-pattern-->


	  <!--RULE elem-citation-journal-article-title-->
   <xsl:template match="element-citation[@publication-type='journal']/article-title"
                 priority="1000"
                 mode="M181">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='journal']/article-title"
                       id="elem-citation-journal-article-title"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(sub|sup|italic)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*) = count(sub|sup|italic)">
               <xsl:attribute name="id">err-elem-cit-journal-3-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-journal-3-2]
        An &lt;article-title&gt; element in a reference may contain characters and &lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. 
        No other elements are allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M181"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M181"/>
   <xsl:template match="@*|node()" priority="-2" mode="M181">
      <xsl:apply-templates select="*" mode="M181"/>
   </xsl:template>

   <!--PATTERN elem-citation-journal-volume-pattern-->


	  <!--RULE elem-citation-journal-volume-->
   <xsl:template match="element-citation[@publication-type='journal']/volume"
                 priority="1000"
                 mode="M182">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='journal']/volume"
                       id="elem-citation-journal-volume"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=0 and (string-length(text()) ge 1)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*)=0 and (string-length(text()) ge 1)">
               <xsl:attribute name="id">err-elem-cit-journal-5-1-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-journal-5-1-2]
        A  &lt;volume&gt; element within a &lt;element-citation&gt; of type 'journal' must contain 
        at least one character and may not contain child elements.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has too few characters and/or
        child elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M182"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M182"/>
   <xsl:template match="@*|node()" priority="-2" mode="M182">
      <xsl:apply-templates select="*" mode="M182"/>
   </xsl:template>

   <!--PATTERN elem-citation-journal-fpage-pattern-->


	  <!--RULE elem-citation-journal-fpage-->
   <xsl:template match="element-citation[@publication-type='journal']/fpage"
                 priority="1000"
                 mode="M183">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='journal']/fpage"
                       id="elem-citation-journal-fpage"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(../elocation-id) eq 0 and count(../comment) eq 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(../elocation-id) eq 0 and count(../comment) eq 0">
               <xsl:attribute name="id">err-elem-cit-journal-6-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-journal-6-2]
        If &lt;fpage&gt; is present, neither &lt;elocation-id&gt; nor &lt;comment&gt;In press&lt;/comment&gt; may be present. 
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has &lt;fpage&gt; and one of those elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(normalize-space(.),'^\d.*') or (substring(normalize-space(../lpage[1]),1,1) = substring(normalize-space(.),1,1)) or count(../lpage) eq 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(normalize-space(.),'^\d.*') or (substring(normalize-space(../lpage[1]),1,1) = substring(normalize-space(.),1,1)) or count(../lpage) eq 0">
               <xsl:attribute name="id">err-elem-cit-journal-6-6</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-journal-6-6]
        If the content of &lt;fpage&gt; begins with a letter, then the content of  &lt;lpage&gt; must begin with 
        the same letter. 
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M183"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M183"/>
   <xsl:template match="@*|node()" priority="-2" mode="M183">
      <xsl:apply-templates select="*" mode="M183"/>
   </xsl:template>

   <!--PATTERN elem-citation-journal-elocation-id-pattern-->


	  <!--RULE elem-citation-journal-elocation-id-->
   <xsl:template match="element-citation[@publication-type='journal']/elocation-id"
                 priority="1000"
                 mode="M184">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='journal']/elocation-id"
                       id="elem-citation-journal-elocation-id"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(../fpage) eq 0 and count(../comment) eq 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(../fpage) eq 0 and count(../comment) eq 0">
               <xsl:attribute name="id">err-elem-cit-journal-6-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-journal-6-3]
        If &lt;elocation-id&gt; is present, neither &lt;fpage&gt; nor &lt;comment&gt;In press&lt;/comment&gt; may be present. 
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has &lt;elocation-id&gt; and one of those elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M184"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M184"/>
   <xsl:template match="@*|node()" priority="-2" mode="M184">
      <xsl:apply-templates select="*" mode="M184"/>
   </xsl:template>

   <!--PATTERN elem-citation-journal-comment-pattern-->


	  <!--RULE elem-citation-journal-comment-->
   <xsl:template match="element-citation[@publication-type='journal']/comment"
                 priority="1000"
                 mode="M185">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='journal']/comment"
                       id="elem-citation-journal-comment"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(../fpage) eq 0 and count(../elocation-id) eq 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(../fpage) eq 0 and count(../elocation-id) eq 0">
               <xsl:attribute name="id">err-elem-cit-journal-6-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-journal-6-4]
        If &lt;comment&gt;In press&lt;/comment&gt; is present, neither &lt;fpage&gt; nor &lt;elocation-id&gt; may be present. 
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has one of those elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="text() = 'In press'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="text() = 'In press'">
               <xsl:attribute name="id">err-elem-cit-journal-13</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-journal-13] 
        Comment elements with content other than 'In press' are not allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has such a &lt;comment&gt; element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M185"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M185"/>
   <xsl:template match="@*|node()" priority="-2" mode="M185">
      <xsl:apply-templates select="*" mode="M185"/>
   </xsl:template>

   <!--PATTERN elem-citation-journal-pub-id-pmid-pattern-->


	  <!--RULE elem-citation-journal-pub-id-pmid-->
   <xsl:template match="element-citation[@publication-type='journal']/pub-id[@pub-id-type='pmid']"
                 priority="1000"
                 mode="M186">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='journal']/pub-id[@pub-id-type='pmid']"
                       id="elem-citation-journal-pub-id-pmid"/>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'\D')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\D')">
            <xsl:attribute name="id">err-elem-cit-journal-10</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-journal-10]
        If &lt;pub-id pub-id-type="pmid"&gt; is present, the content must be all numeric.
        The content of &lt;pub-id pub-id-type="pmid"&gt; in Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' 
        is <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M186"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M186"/>
   <xsl:template match="@*|node()" priority="-2" mode="M186">
      <xsl:apply-templates select="*" mode="M186"/>
   </xsl:template>

   <!--PATTERN elem-citation-journal-pub-id-pattern-->


	  <!--RULE elem-citation-journal-pub-id-->
   <xsl:template match="element-citation[@publication-type='journal']/pub-id"
                 priority="1000"
                 mode="M187">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='journal']/pub-id"
                       id="elem-citation-journal-pub-id"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@pub-id-type='doi' or @pub-id-type='pmid'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="@pub-id-type='doi' or @pub-id-type='pmid'">
               <xsl:attribute name="id">err-elem-cit-journal-9-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-journal-9-1]
        Each &lt;pub-id&gt;, if present in a journal reference, must have a @pub-id-type of either "doi" or "pmid".
        The pub-id-type attribute on &lt;pub-id&gt; in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' 
        is <xsl:text/>
                  <xsl:value-of select="@pub-id-type"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M187"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M187"/>
   <xsl:template match="@*|node()" priority="-2" mode="M187">
      <xsl:apply-templates select="*" mode="M187"/>
   </xsl:template>

   <!--PATTERN elem-citation-book-pattern-->


	  <!--RULE elem-citation-book-->
   <xsl:template match="element-citation[@publication-type='book']"
                 priority="1000"
                 mode="M188">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='book']"
                       id="elem-citation-book"/>
      <xsl:variable name="publisher-locations" select="'publisher-locations.xml'"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="(count(person-group[@person-group-type='author']) + count(person-group[@person-group-type='editor'])) = count(person-group)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="(count(person-group[@person-group-type='author']) + count(person-group[@person-group-type='editor'])) = count(person-group)">
               <xsl:attribute name="id">err-elem-cit-book-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-book-2-2]
        The only values allowed for @person-group-type in book references are "author" and "editor".
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a &lt;person-group&gt; type of 
        '<xsl:text/>
                  <xsl:value-of select="person-group/@person-group-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(person-group)=1 or (count(person-group[@person-group-type='author'])=1 and count(person-group[@person-group-type='editor'])=1)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(person-group)=1 or (count(person-group[@person-group-type='author'])=1 and count(person-group[@person-group-type='editor'])=1)">
               <xsl:attribute name="id">err-elem-cit-book-2-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-book-2-3]
        In a book reference, there should be a single person-group element (either author or editor) or
        one person-group with @person-group-type="author" and one person-group with @person-group-type=editor.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(person-group)"/>
                  <xsl:text/> &lt;person-group&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(source)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(source)=1">
               <xsl:attribute name="id">err-elem-cit-book-10-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-book-book-10-1]
        Each  &lt;element-citation&gt; of type 'book' must contain one and
        only one &lt;source&gt; element.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(source)"/>
                  <xsl:text/> &lt;source&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(source)=1 and (source/string-length() + sum(descendant::source/*/string-length()) ge 2)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(source)=1 and (source/string-length() + sum(descendant::source/*/string-length()) ge 2)">
               <xsl:attribute name="id">err-elem-cit-book-10-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-book-10-2-1]
        A  &lt;source&gt; element within a &lt;element-citation&gt; of type 'book' must contain 
        at least two characters.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has too few characters.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(source)=1 and count(source/*)=count(source/(italic | sub | sup))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(source)=1 and count(source/*)=count(source/(italic | sub | sup))">
               <xsl:attribute name="id">err-elem-cit-book-10-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-book-10-2-2]
        A  &lt;source&gt; element within a &lt;element-citation&gt; of type 'book' may only contain the child 
        elements&lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. No other elements are allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has child elements that are not allowed.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(publisher-name)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(publisher-name)=1">
               <xsl:attribute name="id">err-elem-cit-book-13-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-book-13-1]
        One and only one &lt;publisher-name&gt; is required in a book reference.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(publisher-name)"/>
                  <xsl:text/>
        &lt;publisher-name&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="some $p in document($publisher-locations)/locations/location/text()       satisfies ends-with(publisher-name[1],$p)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="some $p in document($publisher-locations)/locations/location/text() satisfies ends-with(publisher-name[1],$p)">
            <xsl:attribute name="id">warning-elem-cit-book-13-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[warning-elem-cit-book-13-3]
        The content of &lt;publisher-name&gt; may not end with a publisher location. 
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' contains the string <xsl:text/>
               <xsl:value-of select="publisher-name"/>
               <xsl:text/>,
        which ends with a publisher location.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(lpage or fpage) and not(chapter-title)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(lpage or fpage) and not(chapter-title)">
            <xsl:attribute name="id">err-elem-cit-book-16</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-book-16]
        In a book reference, &lt;lpage&gt; and &lt;fpage&gt; are allowed only if &lt;chapter-title&gt; is present. 
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has &lt;lpage&gt; or &lt;fpage&gt; but no &lt;chapter-title&gt;.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(lpage and fpage) and (number(fpage[1]) &gt;= number(lpage[1]))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(lpage and fpage) and (number(fpage[1]) &gt;= number(lpage[1]))">
            <xsl:attribute name="id">err-elem-cit-book-36</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-book-36-1]
        If both &lt;lpage&gt; and &lt;fpage&gt; are present, the value of &lt;fpage&gt; must be less than the value of &lt;lpage&gt;. 
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has &lt;lpage&gt; <xsl:text/>
               <xsl:value-of select="lpage"/>
               <xsl:text/>, which is 
        less than or equal to &lt;fpage&gt; <xsl:text/>
               <xsl:value-of select="fpage"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="lpage and not (fpage)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="lpage and not (fpage)">
            <xsl:attribute name="id">err-elem-cit-book-36-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-book-36-2]
        If &lt;lpage&gt; is present, &lt;fpage&gt; must also be present. 
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has &lt;lpage&gt; but not &lt;fpage&gt;.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(lpage) &gt; 1 or count(fpage) &gt; 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="count(lpage) &gt; 1 or count(fpage) &gt; 1">
            <xsl:attribute name="id">err-elem-cit-book-36-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-book-36-6]
        At most one &lt;lpage&gt; and one &lt;fpage&gt; are allowed. 
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has <xsl:text/>
               <xsl:value-of select="count(lpage)"/>
               <xsl:text/> &lt;lpage&gt; 
        elements and <xsl:text/>
               <xsl:value-of select="count(fpage)"/>
               <xsl:text/> &lt;fpage&gt; elements.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(person-group| year| source| chapter-title| publisher-loc|publisher-name|volume|        edition| fpage| lpage| pub-id)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*) = count(person-group| year| source| chapter-title| publisher-loc|publisher-name|volume| edition| fpage| lpage| pub-id)">
               <xsl:attribute name="id">err-elem-cit-book-40</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-book-40]
        The only tags that are allowed as children of &lt;element-citation&gt; with the publication-type="book" are:
        &lt;person-group&gt;, &lt;year&gt;, &lt;source&gt;, &lt;chapter-title&gt;, &lt;publisher-loc&gt;, &lt;publisher-name&gt;, 
        &lt;volume&gt;, &lt;edition&gt;, &lt;fpage&gt;, &lt;lpage&gt;, and &lt;pub-id&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has other elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M188"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M188"/>
   <xsl:template match="@*|node()" priority="-2" mode="M188">
      <xsl:apply-templates select="*" mode="M188"/>
   </xsl:template>

   <!--PATTERN elem-citation-book-person-group-pattern-->


	  <!--RULE elem-citation-book-person-group-->
   <xsl:template match="element-citation[@publication-type='book']/person-group"
                 priority="1000"
                 mode="M189">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='book']/person-group"
                       id="elem-citation-book-person-group"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@person-group-type"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@person-group-type">
               <xsl:attribute name="id">err-elem-cit-book-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-book-2-1]
        Each &lt;person-group&gt; must have a @person-group-type attribute.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a &lt;person-group&gt; 
        element with no @person-group-type attribute.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M189"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M189"/>
   <xsl:template match="@*|node()" priority="-2" mode="M189">
      <xsl:apply-templates select="*" mode="M189"/>
   </xsl:template>

   <!--PATTERN elem-citation-book-chapter-title-pattern-->


	  <!--RULE elem-citation-book-chapter-title-->
   <xsl:template match="element-citation[@publication-type='book']/chapter-title"
                 priority="1000"
                 mode="M190">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='book']/chapter-title"
                       id="elem-citation-book-chapter-title"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(../person-group[@person-group-type='author'])=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(../person-group[@person-group-type='author'])=1">
               <xsl:attribute name="id">err-elem-cit-book-22</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-book-22]
        If there is a &lt;chapter-title&gt; element there must be one and only one &lt;person-group person-group-type="author"&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(../person-group[@person-group-type='editor']) le 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(../person-group[@person-group-type='editor']) le 1">
               <xsl:attribute name="id">err-elem-cit-book-28-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-book-28-1]
        If there is a &lt;chapter-title&gt; element there may be a maximum of one &lt;person-group person-group-type="editor"&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(sub|sup|italic)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*) = count(sub|sup|italic)">
               <xsl:attribute name="id">err-elem-cit-book-31</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-book-31]
        A &lt;chapter-title&gt; element in a reference may contain characters and &lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. 
        No other elements are allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M190"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M190"/>
   <xsl:template match="@*|node()" priority="-2" mode="M190">
      <xsl:apply-templates select="*" mode="M190"/>
   </xsl:template>

   <!--PATTERN elem-citation-book-publisher-name-pattern-->


	  <!--RULE elem-citation-book-publisher-name-->
   <xsl:template match="element-citation[@publication-type='book']/publisher-name"
                 priority="1000"
                 mode="M191">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='book']/publisher-name"
                       id="elem-citation-book-publisher-name"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*)=0">
               <xsl:attribute name="id">err-elem-cit-book-13-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-book-13-2]
        No elements are allowed inside &lt;publisher-name&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has child elements within the
        &lt;publisher-name&gt; element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M191"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M191"/>
   <xsl:template match="@*|node()" priority="-2" mode="M191">
      <xsl:apply-templates select="*" mode="M191"/>
   </xsl:template>

   <!--PATTERN elem-citation-book-edition-pattern-->


	  <!--RULE elem-citation-book-edition-->
   <xsl:template match="element-citation[@publication-type='book']/edition"
                 priority="1000"
                 mode="M192">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='book']/edition"
                       id="elem-citation-book-edition"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*)=0">
               <xsl:attribute name="id">err-elem-cit-book-15</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-book-15]
        No elements are allowed inside &lt;edition&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has child elements within the
        &lt;edition&gt; element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M192"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M192"/>
   <xsl:template match="@*|node()" priority="-2" mode="M192">
      <xsl:apply-templates select="*" mode="M192"/>
   </xsl:template>

   <!--PATTERN elem-citation-book-pub-id-pmid-pattern-->


	  <!--RULE elem-citation-book-pub-id-pmid-->
   <xsl:template match="element-citation[@publication-type='book']/pub-id[@pub-id-type='pmid']"
                 priority="1000"
                 mode="M193">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='book']/pub-id[@pub-id-type='pmid']"
                       id="elem-citation-book-pub-id-pmid"/>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'\D')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\D')">
            <xsl:attribute name="id">err-elem-cit-book-18</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-book-18]
        If &lt;pub-id pub-id-type="pmid"&gt; is present, the content must be all numeric. The content of 
        &lt;pub-id pub-id-type="pmid"&gt; in Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' 
        is <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M193"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M193"/>
   <xsl:template match="@*|node()" priority="-2" mode="M193">
      <xsl:apply-templates select="*" mode="M193"/>
   </xsl:template>

   <!--PATTERN elem-citation-book-pub-id-pattern-->


	  <!--RULE elem-citation-book-pub-id-->
   <xsl:template match="element-citation[@publication-type='book']/pub-id"
                 priority="1000"
                 mode="M194">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='book']/pub-id"
                       id="elem-citation-book-pub-id"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@pub-id-type='doi' or @pub-id-type='pmid' or @pub-id-type='isbn'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="@pub-id-type='doi' or @pub-id-type='pmid' or @pub-id-type='isbn'">
               <xsl:attribute name="id">err-elem-cit-book-17</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-book-17]
        Each &lt;pub-id&gt;, if present in a book reference, must have a @pub-id-type of one of these values: doi, pmid, isbn. 
        The pub-id-type attribute on &lt;pub-id&gt; in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' 
        is <xsl:text/>
                  <xsl:value-of select="@pub-id-type"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M194"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M194"/>
   <xsl:template match="@*|node()" priority="-2" mode="M194">
      <xsl:apply-templates select="*" mode="M194"/>
   </xsl:template>

   <!--PATTERN elem-citation-data-pattern-->


	  <!--RULE elem-citation-data-->
   <xsl:template match="element-citation[@publication-type='data']"
                 priority="1000"
                 mode="M195">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='data']"
                       id="elem-citation-data"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(person-group[@person-group-type='author']) le 1 and       count(person-group[@person-group-type='compiler']) le 1 and       count(person-group[@person-group-type='curator']) le 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(person-group[@person-group-type='author']) le 1 and count(person-group[@person-group-type='compiler']) le 1 and count(person-group[@person-group-type='curator']) le 1">
               <xsl:attribute name="id">err-elem-cit-data-3-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-data-3-1]
        Only one person-group of each type (author, compiler, curator) is allowed. 
        Reference 
        '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(person-group[@person-group-type='author'])"/>
                  <xsl:text/>  &lt;person-group&gt; elements of type of 
        'author', <xsl:text/>
                  <xsl:value-of select="count(person-group[@person-group-type='author'])"/>
                  <xsl:text/>  &lt;person-group&gt; elements of type of 
        'compiler', <xsl:text/>
                  <xsl:value-of select="count(person-group[@person-group-type='author'])"/>
                  <xsl:text/>  &lt;person-group&gt; elements of type of 
        'curator', and <xsl:text/>
                  <xsl:value-of select="count(person-group[@person-group-type!='author' and @person-group-type!='compiler' and @person-group-type!='curator'])"/>
                  <xsl:text/>
        &lt;person-group&gt; elements of some other type.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(person-group) ge 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(person-group) ge 1">
               <xsl:attribute name="id">err-elem-cit-data-3-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-data-3-2]
        Each  &lt;element-citation&gt; of type 'data' must contain at least one &lt;person-group&gt; element.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(person-group)"/>
                  <xsl:text/> &lt;person-group&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(data-title)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(data-title)=1">
               <xsl:attribute name="id">err-elem-cit-data-10</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-data-10]
        Each  &lt;element-citation&gt; of type 'data' must contain one and only one &lt;data-title&gt; element.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(data-title)"/>
                  <xsl:text/> &lt;data-title&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(source)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(source)=1">
               <xsl:attribute name="id">err-elem-cit-data-11-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-data-11-2]
        Each  &lt;element-citation&gt; of type 'data' must contain one and only one &lt;source&gt; element.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(source)"/>
                  <xsl:text/> &lt;source&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(source)=1 and (source/string-length() + sum(descendant::source/*/string-length()) ge 2)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(source)=1 and (source/string-length() + sum(descendant::source/*/string-length()) ge 2)">
               <xsl:attribute name="id">err-elem-cit-data-11-3-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-data-11-3-1]
        A &lt;source&gt; element within a &lt;element-citation&gt; of type 'data' must contain 
        at least two characters.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has too few characters.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(source)=1 and count(source/*)=count(source/(italic | sub | sup))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(source)=1 and count(source/*)=count(source/(italic | sub | sup))">
               <xsl:attribute name="id">err-elem-cit-data-11-3-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-data-11-3-2]
        A  &lt;source&gt; element within a &lt;element-citation&gt; of type 'data' may only contain the child 
        elements&lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. No other elements are allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has disallowed child elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="pub-id or ext-link"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="pub-id or ext-link">
               <xsl:attribute name="id">err-elem-cit-data-13-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-data-13-1]
        There must be at least one pub-id OR an &lt;ext-link&gt;. There may be more than one pub-id.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(pub-id)"/>
                  <xsl:text/> &lt;pub-id elements
        and <xsl:text/>
                  <xsl:value-of select="count(ext-link)"/>
                  <xsl:text/>  &lt;ext-link&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(pub-id) ge 1 or count(ext-link) ge 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(pub-id) ge 1 or count(ext-link) ge 1">
               <xsl:attribute name="id">err-elem-cit-data-17-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-data-17-1]
        The &lt;ext-link&gt; element is required if there is no &lt;pub-id&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(pub-id)"/>
                  <xsl:text/> &lt;pub-id&gt; elements
        and <xsl:text/>
                  <xsl:value-of select="count(ext-link)"/>
                  <xsl:text/>  &lt;ext-link&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(person-group| data-title| source| year| pub-id| version| ext-link)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*) = count(person-group| data-title| source| year| pub-id| version| ext-link)">
               <xsl:attribute name="id">err-elem-cit-data-18</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-data-18]
        The only tags that are allowed as children of &lt;element-citation&gt; with the publication-type="data" are:
        &lt;person-group&gt;, &lt;data-title&gt;, &lt;source&gt;, &lt;year&gt;, &lt;pub-id&gt;, &lt;version&gt;, and &lt;ext-link&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has other elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M195"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M195"/>
   <xsl:template match="@*|node()" priority="-2" mode="M195">
      <xsl:apply-templates select="*" mode="M195"/>
   </xsl:template>

   <!--PATTERN elem-citation-data-pub-id-doi-pattern-->


	  <!--RULE elem-citation-data-pub-id-doi-->
   <xsl:template match="element-citation[@publication-type='data']/pub-id[@pub-id-type='doi']"
                 priority="1000"
                 mode="M196">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='data']/pub-id[@pub-id-type='doi']"
                       id="elem-citation-data-pub-id-doi"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="not(@xlink:href)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="not(@xlink:href)">
               <xsl:attribute name="id">err-elem-cit-data-14-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-data-14-2]
        If the pub-id is of pub-id-type doi, it may not have an @xlink:href.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a &lt;pub-id element with type doi and an
        @link-href with value '<xsl:text/>
                  <xsl:value-of select="@link-href"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M196"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M196"/>
   <xsl:template match="@*|node()" priority="-2" mode="M196">
      <xsl:apply-templates select="*" mode="M196"/>
   </xsl:template>

   <!--PATTERN elem-citation-data-pub-id-pattern-->


	  <!--RULE elem-citation-data-pub-id-->
   <xsl:template match="element-citation[@publication-type='data']/pub-id"
                 priority="1000"
                 mode="M197">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='data']/pub-id"
                       id="elem-citation-data-pub-id"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@pub-id-type=('accession', 'archive', 'ark', 'doi')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="@pub-id-type=('accession', 'archive', 'ark', 'doi')">
               <xsl:attribute name="id">err-elem-cit-data-13-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-data-13-2]
        Each pub-id element must have one of these types: accession, archive, ark, assigning-authority or doi. 
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a &lt;pub-id element with types 
        '<xsl:text/>
                  <xsl:value-of select="@pub-id-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="if (@pub-id-type != 'doi') then not(@xlink:href) else ()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if (@pub-id-type != 'doi') then not(@xlink:href) else ()">
            <xsl:attribute name="id">err-elem-cit-data-14-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-data-14-1]
        If the pub-id is of any pub-id-type except doi, it must have an @xlink:href. 
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a &lt;pub-id element with type 
        '<xsl:text/>
               <xsl:value-of select="@pub-id-type"/>
               <xsl:text/>' but no @xlink-href.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M197"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M197"/>
   <xsl:template match="@*|node()" priority="-2" mode="M197">
      <xsl:apply-templates select="*" mode="M197"/>
   </xsl:template>

   <!--PATTERN elem-citation-data-ext-link-pattern-->


	  <!--RULE elem-citation-data-ext-link-->
   <xsl:template match="element-citation[@publication-type='data']/ext-link"
                 priority="1000"
                 mode="M198">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='data']/ext-link"
                       id="elem-citation-data-ext-link"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@xlink:href"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@xlink:href">
               <xsl:attribute name="id">err-elem-cit-data-17-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-data-17-2]
        Each &lt;ext-link&gt; element must contain @xlink:href. The &lt;ext-link&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' 
        does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="starts-with(@xlink:href, 'http://') or starts-with(@xlink:href, 'https://')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="starts-with(@xlink:href, 'http://') or starts-with(@xlink:href, 'https://')">
               <xsl:attribute name="id">err-elem-cit-data-17-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-data-17-3]
        The value of @xlink:href must start with either "http://" or "https://". 
        The &lt;ext-link&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' 
        is '<xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/>', which does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="normalize-space(@xlink:href)=normalize-space(.)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="normalize-space(@xlink:href)=normalize-space(.)">
               <xsl:attribute name="id">err-elem-cit-data-17-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-data-17-4]
        The value of @xlink:href must be the same as the element content of &lt;ext-link&gt;.
        The &lt;ext-link&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' 
        has @xlink:href='<xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/>' and content '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M198"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M198"/>
   <xsl:template match="@*|node()" priority="-2" mode="M198">
      <xsl:apply-templates select="*" mode="M198"/>
   </xsl:template>

   <!--PATTERN elem-citation-patent-pattern-->


	  <!--RULE elem-citation-patent-->
   <xsl:template match="element-citation[@publication-type='patent']"
                 priority="1000"
                 mode="M199">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='patent']"
                       id="elem-citation-patent"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(person-group[@person-group-type='inventor'])=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(person-group[@person-group-type='inventor'])=1">
               <xsl:attribute name="id">err-elem-cit-patent-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-patent-2-1]
        There must be one person-group with @person-group-type="inventor". 
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has
        <xsl:text/>
                  <xsl:value-of select="count(person-group[@person-group-type='inventor'])"/>
                  <xsl:text/> &lt;person-group&gt; 
        elements of type 'inventor'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="every $type in person-group/@person-group-type       satisfies $type = ('assignee','inventor')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="every $type in person-group/@person-group-type satisfies $type = ('assignee','inventor')">
               <xsl:attribute name="id">err-elem-cit-patent-2-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-patent-2-3]
        The only allowed types of person-group elements are "assignee" and "inventor".
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has &lt;person-group&gt; elements of other types.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(person-group[@person-group-type='assignee']) le 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(person-group[@person-group-type='assignee']) le 1">
               <xsl:attribute name="id">err-elem-cit-patent-2A</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-patent-2A]
        There may be zero or one person-group elements with @person-group-type="assignee" 
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(person-group[@person-group-type='assignee'])"/>
                  <xsl:text/> &lt;person-group&gt; elements of type
        'assignee'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(article-title)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(article-title)=1">
               <xsl:attribute name="id">err-elem-cit-patent-8-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-patent-8-1]
        Each  &lt;element-citation&gt; of type 'patent' must contain one and
        only one &lt;article-title&gt; element.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(article-title)"/>
                  <xsl:text/> &lt;article-title&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(source) le 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(source) le 1">
               <xsl:attribute name="id">err-elem-cit-patent-9-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-patent-9-1]
        Each  &lt;element-citation&gt; of type 'patent' may contain zero or one &lt;source&gt; elements.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(source)"/>
                  <xsl:text/> &lt;source&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="patent"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="patent">
               <xsl:attribute name="id">err-elem-cit-patent-10-1-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-patent-10-1-1]
        The  &lt;patent&gt; element is required. 
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has no &lt;patent&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="ext-link"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ext-link">
               <xsl:attribute name="id">err-elem-cit-patent-11-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-patent-11-1]
        The &lt;ext-link&gt; element is required.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has no &lt;ext-link&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(person-group| article-title| source| year| patent| ext-link)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*) = count(person-group| article-title| source| year| patent| ext-link)">
               <xsl:attribute name="id">err-elem-cit-patent-18</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-patent-18]
        The only tags that are allowed as children of &lt;element-citation&gt; with the publication-type="patent" are:
        &lt;person-group&gt;, &lt;article-title&gt;, &lt;source&gt;, &lt;year&gt;, &lt;patent&gt;, and &lt;ext-link&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has other elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M199"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M199"/>
   <xsl:template match="@*|node()" priority="-2" mode="M199">
      <xsl:apply-templates select="*" mode="M199"/>
   </xsl:template>

   <!--PATTERN elem-citation-patent-ext-link-pattern-->


	  <!--RULE elem-citation-patent-ext-link-->
   <xsl:template match="element-citation[@publication-type='patent']/ext-link"
                 priority="1000"
                 mode="M200">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='patent']/ext-link"
                       id="elem-citation-patent-ext-link"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@xlink:href"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@xlink:href">
               <xsl:attribute name="id">err-elem-cit-patent-11-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-patent-11-2]
        Each &lt;ext-link&gt; element must contain @xlink:href. The &lt;ext-link&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' 
        does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="starts-with(@xlink:href, 'http://') or starts-with(@xlink:href, 'https://')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="starts-with(@xlink:href, 'http://') or starts-with(@xlink:href, 'https://')">
               <xsl:attribute name="id">err-elem-cit-patent-11-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-patent-11-3]
        The value of @xlink:href must start with either "http://" or "https://". 
        The &lt;ext-link&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' 
        is '<xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/>', which does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="normalize-space(@xlink:href)=normalize-space(.)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="normalize-space(@xlink:href)=normalize-space(.)">
               <xsl:attribute name="id">err-elem-cit-patent-11-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-patent-11-4]
        The value of @xlink:href must be the same as the element content of &lt;ext-link&gt;.
        The &lt;ext-link&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' 
        has @xlink:href='<xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/>' and content '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M200"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M200"/>
   <xsl:template match="@*|node()" priority="-2" mode="M200">
      <xsl:apply-templates select="*" mode="M200"/>
   </xsl:template>

   <!--PATTERN elem-citation-patent-article-title-pattern-->


	  <!--RULE elem-citation-patent-article-title-->
   <xsl:template match="element-citation[@publication-type='patent']/article-title"
                 priority="1000"
                 mode="M201">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='patent']/article-title"
                       id="elem-citation-patent-article-title"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="./string-length() + sum(*/string-length()) ge 2"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="./string-length() + sum(*/string-length()) ge 2">
               <xsl:attribute name="id">err-elem-cit-patent-8-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-patent-8-2-1]
        A  &lt;article-title&gt; element within a &lt;element-citation&gt; of type 'patent' must contain 
        at least two characters.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has too few characters.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=count(italic | sub | sup)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*)=count(italic | sub | sup)">
               <xsl:attribute name="id">err-elem-cit-patent-8-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-patent-8-2-2]
        A  &lt;article-title&gt; element within a &lt;element-citation&gt; of type 'patent' may only contain the child 
        elements&lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. 
        No other elements are allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has disallowed child elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M201"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M201"/>
   <xsl:template match="@*|node()" priority="-2" mode="M201">
      <xsl:apply-templates select="*" mode="M201"/>
   </xsl:template>

   <!--PATTERN elem-citation-patent-source-pattern-->


	  <!--RULE elem-citation-patent-source-->
   <xsl:template match="element-citation[@publication-type='patent']/source"
                 priority="1000"
                 mode="M202">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='patent']/source"
                       id="elem-citation-patent-source"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="./string-length() + sum(*/string-length()) ge 2"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="./string-length() + sum(*/string-length()) ge 2">
               <xsl:attribute name="id">err-elem-cit-patent-9-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-patent-9-2-1]
        A  &lt;source&gt; element within a &lt;element-citation&gt; of type 'patent' must contain 
        at least two characters.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has too few characters.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=count(italic | sub | sup)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*)=count(italic | sub | sup)">
               <xsl:attribute name="id">err-elem-cit-patent-9-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-patent-9-2-2]
        A  &lt;source&gt; element within a &lt;element-citation&gt; of type 'patent' may only contain the child 
        elements&lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. 
        No other elements are allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has disallowed child elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M202"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M202"/>
   <xsl:template match="@*|node()" priority="-2" mode="M202">
      <xsl:apply-templates select="*" mode="M202"/>
   </xsl:template>

   <!--PATTERN elem-citation-patent-patent-pattern-->


	  <!--RULE elem-citation-patent-patent-->
   <xsl:template match="element-citation[@publication-type='patent']/patent"
                 priority="1000"
                 mode="M203">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='patent']/patent"
                       id="elem-citation-patent-patent"/>
      <xsl:variable name="countries" select="'countries.xml'"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*)=0">
               <xsl:attribute name="id">err-elem-cit-patent-10-1-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-patent-10-1-2]
        The  &lt;patent&gt; element may not have child elements.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has child elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="some $x in document($countries)/countries/country satisfies ($x=@country)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="some $x in document($countries)/countries/country satisfies ($x=@country)">
               <xsl:attribute name="id">err-elem-cit-patent-10-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-patent-10-2]
        The &lt;patent&gt; element must have a country attribute, the value of which must be an allowed value.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a patent/@country attribute with the value 
        '<xsl:text/>
                  <xsl:value-of select="@country"/>
                  <xsl:text/>', which is not in the list.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M203"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M203"/>
   <xsl:template match="@*|node()" priority="-2" mode="M203">
      <xsl:apply-templates select="*" mode="M203"/>
   </xsl:template>

   <!--PATTERN elem-citation-software-pattern-->


	  <!--RULE elem-citation-software-->
   <xsl:template match="element-citation[@publication-type = 'software']"
                 priority="1000"
                 mode="M204">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type = 'software']"
                       id="elem-citation-software"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(person-group) = 1 or (count(person-group/@person-group-type = 'author') +         count(person-group/@person-group-type = 'editor') = 2)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(person-group) = 1 or (count(person-group/@person-group-type = 'author') + count(person-group/@person-group-type = 'editor') = 2)">
               <xsl:attribute name="id">err-elem-cit-software-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-software-2-1] Each
        &lt;element-citation&gt; of type 'software' must contain one &lt;person-group&gt; element (either
        author or curator) or one &lt;person-group&gt; with attribute person-group-type = author and one
        &lt;person-group&gt; with attribute person-group-type = curator. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(person-group)"/>
                  <xsl:text/>
        &lt;person-group&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="person-group[@person-group-type = ('author', 'curator')]"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="person-group[@person-group-type = ('author', 'curator')]">
               <xsl:attribute name="id">err-elem-cit-software-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-software-2-2] Each &lt;element-citation&gt; of type
        'software' must contain one &lt;person-group&gt; with the attribute person-group-type set to
        'author'or 'curator'. Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a
        &lt;person-group&gt; type of '<xsl:text/>
                  <xsl:value-of select="person-group/@person-group-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="count(data-title) &gt; 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(data-title) &gt; 1">
            <xsl:attribute name="id">err-elem-cit-software-10-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-software-10-1] Each &lt;element-citation&gt; of type 'software' may contain one
        and only one &lt;data-title&gt; element. Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>'
        has <xsl:text/>
               <xsl:value-of select="count(data-title)"/>
               <xsl:text/> &lt;data-title&gt; elements.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(person-group | year | data-title | source | version | publisher-name | publisher-loc | ext-link)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*) = count(person-group | year | data-title | source | version | publisher-name | publisher-loc | ext-link)">
               <xsl:attribute name="id">err-elem-cit-software-16</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-software-16] The only tags that are
        allowed as children of &lt;element-citation&gt; with the publication-type="software" are:
        &lt;person-group&gt;, &lt;year&gt;, &lt;data-title&gt;, &lt;source&gt;, &lt;version&gt;, &lt;publisher-name&gt;,
        &lt;publisher-loc&gt;, and &lt;ext-link&gt; Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>'
        has other elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M204"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M204"/>
   <xsl:template match="@*|node()" priority="-2" mode="M204">
      <xsl:apply-templates select="*" mode="M204"/>
   </xsl:template>

   <!--PATTERN elem-citation-software-data-title-pattern-->


	  <!--RULE elem-citation-software-data-title-->
   <xsl:template match="element-citation[@publication-type = 'software']/data-title"
                 priority="1000"
                 mode="M205">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type = 'software']/data-title"
                       id="elem-citation-software-data-title"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(sub | sup | italic)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*) = count(sub | sup | italic)">
               <xsl:attribute name="id">err-elem-cit-software-10-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-software-10-2] An &lt;data-title&gt; element in a reference may contain characters
        and &lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. No other elements are allowed. Reference
        '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M205"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M205"/>
   <xsl:template match="@*|node()" priority="-2" mode="M205">
      <xsl:apply-templates select="*" mode="M205"/>
   </xsl:template>

   <!--PATTERN elem-citation-software-ext-link-pattern-->


	  <!--RULE elem-citation-software-ext-link-->
   <xsl:template match="element-citation[@publication-type = 'software']/ext-link"
                 priority="1000"
                 mode="M206">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type = 'software']/ext-link"
                       id="elem-citation-software-ext-link"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@xlink:href"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@xlink:href">
               <xsl:attribute name="id">err-elem-cit-software-15-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-software-15-1] Each &lt;ext-link&gt; element must contain @xlink:href. The
        &lt;ext-link&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does
        not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="starts-with(@xlink:href, 'http://') or starts-with(@xlink:href, 'https://')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="starts-with(@xlink:href, 'http://') or starts-with(@xlink:href, 'https://')">
               <xsl:attribute name="id">err-elem-cit-software-15-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-software-15-2] The value of
        @xlink:href must start with either "http://" or "https://". The &lt;ext-link&gt; element in
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' is '<xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/>', which does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="normalize-space(@xlink:href) = normalize-space(.)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="normalize-space(@xlink:href) = normalize-space(.)">
               <xsl:attribute name="id">err-elem-cit-software-15-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-software-15-3] The value of @xlink:href must be
        the same as the element content of &lt;ext-link&gt;. The &lt;ext-link&gt; element in Reference
        '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has @xlink:href='<xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/>' and content '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M206"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M206"/>
   <xsl:template match="@*|node()" priority="-2" mode="M206">
      <xsl:apply-templates select="*" mode="M206"/>
   </xsl:template>

   <!--PATTERN elem-citation-preprint-pattern-->


	  <!--RULE elem-citation-preprint-->
   <xsl:template match="element-citation[@publication-type='preprint']"
                 priority="1000"
                 mode="M207">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='preprint']"
                       id="elem-citation-preprint"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(person-group)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(person-group)=1">
               <xsl:attribute name="id">err-elem-cit-preprint-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-preprint-2-1]
        There must be one and only one person-group. 
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has
        <xsl:text/>
                  <xsl:value-of select="count(person-group)"/>
                  <xsl:text/> &lt;person-group&gt; 
        elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(article-title)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(article-title)=1">
               <xsl:attribute name="id">err-elem-cit-preprint-8-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-preprint-8-1]
        Each  &lt;element-citation&gt; of type 'preprint' must contain one and
        only one &lt;article-title&gt; element.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(article-title)"/>
                  <xsl:text/> &lt;article-title&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(source) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(source) = 1">
               <xsl:attribute name="id">err-elem-cit-preprint-9-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-preprint-9-1]
        Each  &lt;element-citation&gt; of type 'preprint' must contain one and only one &lt;source&gt; element.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(source)"/>
                  <xsl:text/> &lt;source&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(pub-id) le 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(pub-id) le 1">
               <xsl:attribute name="id">err-elem-cit-preprint-10-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-preprint-10-1]
        One &lt;pub-id&gt; element is allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(pub-id)"/>
                  <xsl:text/> &lt;pub-id&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(pub-id)=1 or count(ext-link)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(pub-id)=1 or count(ext-link)=1">
               <xsl:attribute name="id">err-elem-cit-preprint-10-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-preprint-10-3]
        Either one &lt;pub-id&gt; or one &lt;ext-link&gt; element is required in a preprint reference.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(pub-id)"/>
                  <xsl:text/> &lt;pub-id&gt; elements
        and <xsl:text/>
                  <xsl:value-of select="count(ext-link)"/>
                  <xsl:text/> &lt;ext-link&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(person-group| article-title| source| year| pub-id| ext-link)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*) = count(person-group| article-title| source| year| pub-id| ext-link)">
               <xsl:attribute name="id">err-elem-cit-preprint-13</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-preprint-13]
        The only tags that are allowed as children of &lt;element-citation&gt; with the publication-type="preprint" are:
        &lt;person-group&gt;, &lt;article-title&gt;, &lt;source&gt;, &lt;year&gt;, &lt;pub-id&gt;, and &lt;ext-link&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has other elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M207"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M207"/>
   <xsl:template match="@*|node()" priority="-2" mode="M207">
      <xsl:apply-templates select="*" mode="M207"/>
   </xsl:template>

   <!--PATTERN elem-citation-preprint-person-group-pattern-->


	  <!--RULE elem-citation-preprint-person-group-->
   <xsl:template match="element-citation[@publication-type='preprint']/person-group"
                 priority="1000"
                 mode="M208">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='preprint']/person-group"
                       id="elem-citation-preprint-person-group"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@person-group-type='author'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="@person-group-type='author'">
               <xsl:attribute name="id">err-elem-cit-preprint-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-preprint-2-2]
        The &lt;person-group&gt; element must contain @person-group-type='author'. The &lt;person-group&gt; element in 
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' contains @person-group-type='<xsl:text/>
                  <xsl:value-of select="@person-group-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M208"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M208"/>
   <xsl:template match="@*|node()" priority="-2" mode="M208">
      <xsl:apply-templates select="*" mode="M208"/>
   </xsl:template>

   <!--PATTERN elem-citation-preprint-pub-id-pattern-->


	  <!--RULE elem-citation-preprint-pub-id-->
   <xsl:template match="element-citation[@publication-type='preprint']/pub-id"
                 priority="1000"
                 mode="M209">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='preprint']/pub-id"
                       id="elem-citation-preprint-pub-id"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@pub-id-type='doi'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@pub-id-type='doi'">
               <xsl:attribute name="id">err-elem-cit-preprint-10-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-preprint-10-2]
        If present, the &lt;pub-id&gt; element must contain @pub-id-type='doi'.
        The &lt;pub-id&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>'
        contains @pub-id-type='<xsl:text/>
                  <xsl:value-of select="@pub-id-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M209"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M209"/>
   <xsl:template match="@*|node()" priority="-2" mode="M209">
      <xsl:apply-templates select="*" mode="M209"/>
   </xsl:template>

   <!--PATTERN elem-citation-preprint-ext-link-pattern-->


	  <!--RULE elem-citation-preprint-ext-link-->
   <xsl:template match="element-citation[@publication-type='preprint']/ext-link"
                 priority="1000"
                 mode="M210">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='preprint']/ext-link"
                       id="elem-citation-preprint-ext-link"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@xlink:href"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@xlink:href">
               <xsl:attribute name="id">err-elem-cit-preprint-11-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-preprint-11-1]
        Each &lt;ext-link&gt; element must contain @xlink:href.
        The &lt;ext-link&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="starts-with(@xlink:href, 'http://') or starts-with(@xlink:href, 'https://')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="starts-with(@xlink:href, 'http://') or starts-with(@xlink:href, 'https://')">
               <xsl:attribute name="id">err-elem-cit-preprint-11-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-preprint-11-2]
        The value of @xlink:href must start with either "http://" or "https://". 
        The &lt;ext-link&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' 
        is '<xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/>', which does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="normalize-space(@xlink:href)=normalize-space(.)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="normalize-space(@xlink:href)=normalize-space(.)">
               <xsl:attribute name="id">err-elem-cit-preprint-11-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-preprint-11-3]
        The value of @xlink:href must be the same as the element content of &lt;ext-link&gt;.
        The &lt;ext-link&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' 
        has @xlink:href='<xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/>' and content '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M210"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M210"/>
   <xsl:template match="@*|node()" priority="-2" mode="M210">
      <xsl:apply-templates select="*" mode="M210"/>
   </xsl:template>

   <!--PATTERN elem-citation-preprint-article-title-pattern-->


	  <!--RULE elem-citation-preprint-article-title-->
   <xsl:template match="element-citation[@publication-type='preprint']/article-title"
                 priority="1000"
                 mode="M211">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='preprint']/article-title"
                       id="elem-citation-preprint-article-title"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="./string-length() + sum(*/string-length()) ge 2"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="./string-length() + sum(*/string-length()) ge 2">
               <xsl:attribute name="id">err-elem-cit-preprint-8-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-preprint-8-2-1]
        A &lt;article-title&gt; element within a &lt;element-citation&gt; of type 'preprint' must contain 
        at least two characters.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has too few characters.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=count(italic | sub | sup)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*)=count(italic | sub | sup)">
               <xsl:attribute name="id">err-elem-cit-preprint-8-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-preprint-8-2-2]
        A &lt;article-title&gt; element within a &lt;element-citation&gt; of type 'preprint' may only contain the child 
        elements&lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. No other elements are allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has disallowed child elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M211"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M211"/>
   <xsl:template match="@*|node()" priority="-2" mode="M211">
      <xsl:apply-templates select="*" mode="M211"/>
   </xsl:template>

   <!--PATTERN elem-citation-preprint-source-pattern-->


	  <!--RULE elem-citation-preprint-source-->
   <xsl:template match="element-citation[@publication-type='preprint']/source"
                 priority="1000"
                 mode="M212">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='preprint']/source"
                       id="elem-citation-preprint-source"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="./string-length() + sum(*/string-length()) ge 2"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="./string-length() + sum(*/string-length()) ge 2">
               <xsl:attribute name="id">err-elem-cit-preprint-9-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-preprint-9-2-1]
        A &lt;source&gt; element within a &lt;element-citation&gt; of type 'preprint' must contain 
        at least two characters.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has too few characters.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=count(italic | sub | sup)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*)=count(italic | sub | sup)">
               <xsl:attribute name="id">err-elem-cit-preprint-9-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-preprint-9-2-2]
        A &lt;source&gt; element within a &lt;element-citation&gt; of type 'preprint' may only contain the child 
        elements&lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. No other elements are allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has disallowed child elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M212"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M212"/>
   <xsl:template match="@*|node()" priority="-2" mode="M212">
      <xsl:apply-templates select="*" mode="M212"/>
   </xsl:template>

   <!--PATTERN elem-citation-web-pattern-->


	  <!--RULE elem-citation-web-->
   <xsl:template match="element-citation[@publication-type='web']"
                 priority="1000"
                 mode="M213">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='web']"
                       id="elem-citation-web"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(person-group)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(person-group)=1">
               <xsl:attribute name="id">err-elem-cit-web-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-web-2-1]
        There must be one and only one person-group. 
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has
        <xsl:text/>
                  <xsl:value-of select="count(person-group)"/>
                  <xsl:text/> &lt;person-group&gt; 
        elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(article-title)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(article-title)=1">
               <xsl:attribute name="id">err-elem-cit-web-8-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-web-8-1]
        Each  &lt;element-citation&gt; of type 'web' must contain one and
        only one &lt;article-title&gt; element.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(article-title)"/>
                  <xsl:text/> &lt;article-title&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="count(source) &gt; 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(source) &gt; 1">
            <xsl:attribute name="id">err-elem-cit-web-9-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-web-9-1]
        Each  &lt;element-citation&gt; of type 'web' may contain one and only one &lt;source&gt; element.
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has 
        <xsl:text/>
               <xsl:value-of select="count(source)"/>
               <xsl:text/> &lt;source&gt; elements.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(ext-link)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(ext-link)=1">
               <xsl:attribute name="id">err-elem-cit-web-10-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-web-10-1]
        One and only one &lt;ext-link&gt; element is required.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(ext-link)"/>
                  <xsl:text/> 
        &lt;ext-link&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(date-in-citation)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(date-in-citation)=1">
               <xsl:attribute name="id">err-elem-cit-web-11-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-web-11-1]
        One and only one &lt;date-in-citation&gt; element is required.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(date-in-citation)"/>
                  <xsl:text/> 
        &lt;date-in-citation&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(person-group|article-title|source|year|ext-link|date-in-citation)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*) = count(person-group|article-title|source|year|ext-link|date-in-citation)">
               <xsl:attribute name="id">err-elem-cit-web-12</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-web-12]
        The only tags that are allowed as children of &lt;element-citation&gt; with the publication-type="web" are:
        &lt;person-group&gt;, &lt;article-title&gt;, &lt;source&gt;, &lt;year&gt;, &lt;ext-link&gt; and &lt;date-in-citation&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has other elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M213"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M213"/>
   <xsl:template match="@*|node()" priority="-2" mode="M213">
      <xsl:apply-templates select="*" mode="M213"/>
   </xsl:template>

   <!--PATTERN elem-citation-web-person-group-pattern-->


	  <!--RULE elem-citation-web-person-group-->
   <xsl:template match="element-citation[@publication-type='web']/person-group"
                 priority="1000"
                 mode="M214">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='web']/person-group"
                       id="elem-citation-web-person-group"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@person-group-type='author'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="@person-group-type='author'">
               <xsl:attribute name="id">err-elem-cit-web-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-web-2-2]
        The &lt;person-group&gt; element must contain @person-group-type='author'. The &lt;person-group&gt; element in 
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' contains @person-group-type='<xsl:text/>
                  <xsl:value-of select="@person-group-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M214"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M214"/>
   <xsl:template match="@*|node()" priority="-2" mode="M214">
      <xsl:apply-templates select="*" mode="M214"/>
   </xsl:template>

   <!--PATTERN elem-citation-web-ext-link-pattern-->


	  <!--RULE elem-citation-web-ext-link-->
   <xsl:template match="element-citation[@publication-type='web']/ext-link"
                 priority="1000"
                 mode="M215">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='web']/ext-link"
                       id="elem-citation-web-ext-link"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@xlink:href"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@xlink:href">
               <xsl:attribute name="id">err-elem-cit-web-10-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-web-10-2]
        Each &lt;ext-link&gt; element must contain @xlink:href. The &lt;ext-link&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' 
        does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="starts-with(@xlink:href, 'http://') or starts-with(@xlink:href, 'https://')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="starts-with(@xlink:href, 'http://') or starts-with(@xlink:href, 'https://')">
               <xsl:attribute name="id">err-elem-cit-web-10-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-web-10-3]
        The value of @xlink:href must start with either "http://" or "https://". 
        The &lt;ext-link&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' 
        is '<xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/>', which does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="normalize-space(@xlink:href)=normalize-space(.)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="normalize-space(@xlink:href)=normalize-space(.)">
               <xsl:attribute name="id">err-elem-cit-web-10-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-web-10-4]
        The value of @xlink:href must be the same as the element content of &lt;ext-link&gt;.
        The &lt;ext-link&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' 
        has @xlink:href='<xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/>' and content '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M215"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M215"/>
   <xsl:template match="@*|node()" priority="-2" mode="M215">
      <xsl:apply-templates select="*" mode="M215"/>
   </xsl:template>

   <!--PATTERN elem-citation-web-article-title-pattern-->


	  <!--RULE elem-citation-web-article-title-->
   <xsl:template match="element-citation[@publication-type='web']/article-title"
                 priority="1000"
                 mode="M216">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='web']/article-title"
                       id="elem-citation-web-article-title"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="./string-length() + sum(*/string-length()) ge 2"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="./string-length() + sum(*/string-length()) ge 2">
               <xsl:attribute name="id">err-elem-cit-web-8-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-web-8-2-1]
        A  &lt;article-title&gt; element within a &lt;element-citation&gt; of type 'web' must contain 
        at least two characters.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has too few characters.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=count(italic | sub | sup)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*)=count(italic | sub | sup)">
               <xsl:attribute name="id">err-elem-cit-web-8-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-web-8-2-2]
        A  &lt;article-title&gt; element within a &lt;element-citation&gt; of type 'web' may only contain the child 
        elements&lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. 
        No other elements are allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has disallowed child elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M216"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M216"/>
   <xsl:template match="@*|node()" priority="-2" mode="M216">
      <xsl:apply-templates select="*" mode="M216"/>
   </xsl:template>

   <!--PATTERN elem-citation-web-source-pattern-->


	  <!--RULE elem-citation-web-source-->
   <xsl:template match="element-citation[@publication-type='web']/source"
                 priority="1000"
                 mode="M217">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='web']/source"
                       id="elem-citation-web-source"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="./string-length() + sum(*/string-length()) ge 2"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="./string-length() + sum(*/string-length()) ge 2">
               <xsl:attribute name="id">err-elem-cit-web-9-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-web-9-2-1]
        A  &lt;source&gt; element within a &lt;element-citation&gt; of type 'web' must contain 
        at least two characters.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has too few characters.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=count(italic | sub | sup)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*)=count(italic | sub | sup)">
               <xsl:attribute name="id">err-elem-cit-web-9-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-web-9-2-2]
        A  &lt;source&gt; element within a &lt;element-citation&gt; of type 'web' may only contain the child 
        elements&lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. 
        No other elements are allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has disallowed child elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M217"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M217"/>
   <xsl:template match="@*|node()" priority="-2" mode="M217">
      <xsl:apply-templates select="*" mode="M217"/>
   </xsl:template>

   <!--PATTERN elem-citation-web-date-in-citation-pattern-->


	  <!--RULE elem-citation-web-date-in-citation-->
   <xsl:template match="element-citation[@publication-type='web']/date-in-citation"
                 priority="1000"
                 mode="M218">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='web']/date-in-citation"
                       id="elem-citation-web-date-in-citation"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="./@iso-8601-date"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="./@iso-8601-date">
               <xsl:attribute name="id">err-elem-cit-web-11-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-web-11-2-1]
        The &lt;date-in-citation&gt; element must have an @iso-8601-date attribute.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not.
      </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(./@iso-8601-date,'^\d{4}-\d{2}-\d{2}$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(./@iso-8601-date,'^\d{4}-\d{2}-\d{2}$')">
               <xsl:attribute name="id">err-elem-cit-web-11-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-web-11-2-2]
        The &lt;date-in-citation&gt; element's @iso-8601-date attribute must have the format
        'YYYY-MM-DD'.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has '<xsl:text/>
                  <xsl:value-of select="@iso-8601-date"/>
                  <xsl:text/>',
        which does not have that format.
      </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(normalize-space(.),'^(January|February|March|April|May|June|July|August|September|October|November|December) \d{1,2}, \d{4}')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(normalize-space(.),'^(January|February|March|April|May|June|July|August|September|October|November|December) \d{1,2}, \d{4}')">
               <xsl:attribute name="id">err-elem-cit-web-11-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-web-11-3]
        The format of the element content must match month, space, day, comma, year.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="if (string-length(@iso-8601-date) = 10) then format-date(xs:date(@iso-8601-date), '[MNn] [D], [Y]')!=.         else (string-length(@iso-8601-date) &lt; 10)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if (string-length(@iso-8601-date) = 10) then format-date(xs:date(@iso-8601-date), '[MNn] [D], [Y]')!=. else (string-length(@iso-8601-date) &lt; 10)">
            <xsl:attribute name="id">err-elem-cit-web-11-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-web-11-4]
        The element content date must match the @iso-8601-date value.
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has element content of 
        <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> but an @iso-8601-date value of 
        <xsl:text/>
               <xsl:value-of select="@iso-8601-date"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M218"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M218"/>
   <xsl:template match="@*|node()" priority="-2" mode="M218">
      <xsl:apply-templates select="*" mode="M218"/>
   </xsl:template>

   <!--PATTERN elem-citation-report-pattern-->


	  <!--RULE elem-citation-report-->
   <xsl:template match="element-citation[@publication-type='report']"
                 priority="1000"
                 mode="M219">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='report']"
                       id="elem-citation-report"/>
      <xsl:variable name="publisher-locations" select="'publisher-locations.xml'"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(person-group)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(person-group)=1">
               <xsl:attribute name="id">err-elem-cit-report-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-report-2-1]
        One and only one person-group element is allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(person-group)"/>
                  <xsl:text/> &lt;person-group&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(source)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(source)=1">
               <xsl:attribute name="id">err-elem-cit-report-9-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-report-report-9-1]
        Each  &lt;element-citation&gt; of type 'report' must contain one and
        only one &lt;source&gt; element.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(source)"/>
                  <xsl:text/> &lt;source&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(publisher-name)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(publisher-name)=1">
               <xsl:attribute name="id">err-elem-cit-report-11-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-report-11-1]
        &lt;publisher-name&gt; is required.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(publisher-name)"/>
                  <xsl:text/>
        &lt;publisher-name&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="some $p in document($publisher-locations)/locations/location/text()       satisfies ends-with(publisher-name,$p)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="some $p in document($publisher-locations)/locations/location/text() satisfies ends-with(publisher-name,$p)">
            <xsl:attribute name="id">warning-elem-cit-report-11-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[warning-elem-cit-report-11-3]
        The content of &lt;publisher-name&gt; may not end with a publisher location. 
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' contains the string <xsl:text/>
               <xsl:value-of select="publisher-name"/>
               <xsl:text/>,
        which ends with a publisher location.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(person-group| year| source| publisher-loc|publisher-name| ext-link| pub-id)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*) = count(person-group| year| source| publisher-loc|publisher-name| ext-link| pub-id)">
               <xsl:attribute name="id">err-elem-cit-report-15</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-report-15]
        The only tags that are allowed as children of &lt;element-citation&gt; with the publication-type="report" are:
        &lt;person-group&gt;, &lt;year&gt;, &lt;source&gt;, &lt;publisher-loc&gt;, &lt;publisher-name&gt;, &lt;ext-link&gt;, and &lt;pub-id&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has other elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M219"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M219"/>
   <xsl:template match="@*|node()" priority="-2" mode="M219">
      <xsl:apply-templates select="*" mode="M219"/>
   </xsl:template>

   <!--PATTERN elem-citation-report-preson-group-pattern-->


	  <!--RULE elem-citation-report-preson-group-->
   <xsl:template match="element-citation[@publication-type='report']/person-group"
                 priority="1000"
                 mode="M220">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='report']/person-group"
                       id="elem-citation-report-preson-group"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@person-group-type='author'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="@person-group-type='author'">
               <xsl:attribute name="id">err-elem-cit-report-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-report-2-2]
        Each &lt;person-group&gt; must have a @person-group-type attribute of type 'author'.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a &lt;person-group&gt; 
        element with @person-group-type attribute '<xsl:text/>
                  <xsl:value-of select="@person-group-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M220"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M220"/>
   <xsl:template match="@*|node()" priority="-2" mode="M220">
      <xsl:apply-templates select="*" mode="M220"/>
   </xsl:template>

   <!--PATTERN elem-citation-report-source-pattern-->


	  <!--RULE elem-citation-report-source-->
   <xsl:template match="element-citation[@publication-type='report']/source"
                 priority="1000"
                 mode="M221">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='report']/source"
                       id="elem-citation-report-source"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="(./string-length() + sum(*/string-length()) ge 2)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="(./string-length() + sum(*/string-length()) ge 2)">
               <xsl:attribute name="id">err-elem-cit-report-9-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-report-9-2-1]
        A  &lt;source&gt; element within a &lt;element-citation&gt; of type 'report' must contain 
        at least two characters.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has too few characters.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=count(italic | sub | sup)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*)=count(italic | sub | sup)">
               <xsl:attribute name="id">err-elem-cit-report-9-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-report-9-2-2]
        A  &lt;source&gt; element within a &lt;element-citation&gt; of type 'report' may only contain the child 
        elements: &lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. No other elements are allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has child elements that are not allowed.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M221"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M221"/>
   <xsl:template match="@*|node()" priority="-2" mode="M221">
      <xsl:apply-templates select="*" mode="M221"/>
   </xsl:template>

   <!--PATTERN elem-citation-report-publisher-name-pattern-->


	  <!--RULE elem-citation-report-publisher-name-->
   <xsl:template match="element-citation[@publication-type='report']/publisher-name"
                 priority="1000"
                 mode="M222">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='report']/publisher-name"
                       id="elem-citation-report-publisher-name"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*)=0">
               <xsl:attribute name="id">err-elem-cit-report-11-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-report-11-2]
        No elements are allowed inside &lt;publisher-name&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has child elements within the
        &lt;publisher-name&gt; element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M222"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M222"/>
   <xsl:template match="@*|node()" priority="-2" mode="M222">
      <xsl:apply-templates select="*" mode="M222"/>
   </xsl:template>

   <!--PATTERN elem-citation-report-pub-id-pattern-->


	  <!--RULE elem-citation-report-pub-id-->
   <xsl:template match="element-citation[@publication-type='report']/pub-id"
                 priority="1000"
                 mode="M223">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='report']/pub-id"
                       id="elem-citation-report-pub-id"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@pub-id-type='doi' or @pub-id-type='isbn'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="@pub-id-type='doi' or @pub-id-type='isbn'">
               <xsl:attribute name="id">err-elem-cit-report-12-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-report-12-2]
        The only allowed pub-id types are 'doi' and 'isbn'.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a pub-id type of 
        '<xsl:text/>
                  <xsl:value-of select="@pub-id-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M223"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M223"/>
   <xsl:template match="@*|node()" priority="-2" mode="M223">
      <xsl:apply-templates select="*" mode="M223"/>
   </xsl:template>

   <!--PATTERN elem-citation-report-ext-link-pattern-->


	  <!--RULE elem-citation-report-ext-link-->
   <xsl:template match="element-citation[@publication-type='report']/ext-link"
                 priority="1000"
                 mode="M224">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='report']/ext-link"
                       id="elem-citation-report-ext-link"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@xlink:href"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@xlink:href">
               <xsl:attribute name="id">err-elem-cit-report-14-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-report-14-1]
        Each &lt;ext-link&gt; element must contain @xlink:href. The &lt;ext-link&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' 
        does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="starts-with(@xlink:href, 'http://') or starts-with(@xlink:href, 'https://')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="starts-with(@xlink:href, 'http://') or starts-with(@xlink:href, 'https://')">
               <xsl:attribute name="id">err-elem-cit-report-14-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-report-14-2]
        The value of @xlink:href must start with either "http://" or "https://". 
        The &lt;ext-link&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' 
        is '<xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/>', which does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="normalize-space(@xlink:href)=normalize-space(.)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="normalize-space(@xlink:href)=normalize-space(.)">
               <xsl:attribute name="id">err-elem-cit-report-14-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-report-14-3]
        The value of @xlink:href must be the same as the element content of &lt;ext-link&gt;.
        The &lt;ext-link&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' 
        has @xlink:href='<xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/>' and content '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M224"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M224"/>
   <xsl:template match="@*|node()" priority="-2" mode="M224">
      <xsl:apply-templates select="*" mode="M224"/>
   </xsl:template>

   <!--PATTERN elem-citation-confproc-pattern-->


	  <!--RULE elem-citation-confproc-->
   <xsl:template match="element-citation[@publication-type='confproc']"
                 priority="1000"
                 mode="M225">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='confproc']"
                       id="elem-citation-confproc"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(person-group)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(person-group)=1">
               <xsl:attribute name="id">err-elem-cit-confproc-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-2-1]
        One and only one person-group element is allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(person-group)"/>
                  <xsl:text/> &lt;person-group&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(article-title)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(article-title)=1">
               <xsl:attribute name="id">err-elem-cit-confproc-8-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-8-1]
        Each  &lt;element-citation&gt; of type 'confproc' must contain one and
        only one &lt;article-title&gt; element.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(article-title)"/>
                  <xsl:text/> &lt;article-title&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(source) le 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(source) le 1">
               <xsl:attribute name="id">err-elem-cit-confproc-9-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-confproc-confproc-9-1]
        Each  &lt;element-citation&gt; of type 'confproc' may contain one &lt;source&gt; element.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(source)"/>
                  <xsl:text/> &lt;source&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(conf-name)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(conf-name)=1">
               <xsl:attribute name="id">err-elem-cit-confproc-10-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-10-1]
        &lt;conf-name&gt; is required.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(conf-name)"/>
                  <xsl:text/>
        &lt;conf-name&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="(fpage and elocation-id) or (lpage and elocation-id)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(fpage and elocation-id) or (lpage and elocation-id)">
            <xsl:attribute name="id">err-elem-cit-confproc-12-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-confproc-12-1]
        The citation may contain &lt;fpage&gt; and &lt;lpage&gt;, only &lt;fpage&gt;, or only &lt;elocation-id&gt; elements, but not a mixture.
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has <xsl:text/>
               <xsl:value-of select="count(fpage)"/>
               <xsl:text/>
        &lt;fpage&gt; elements,  <xsl:text/>
               <xsl:value-of select="count(lpage)"/>
               <xsl:text/> &lt;lpage&gt; elements, and 
        <xsl:text/>
               <xsl:value-of select="count(elocation-id)"/>
               <xsl:text/> &lt;elocation-id&gt; elements.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(fpage) gt 1 or count(lpage) gt 1 or count(elocation-id) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="count(fpage) gt 1 or count(lpage) gt 1 or count(elocation-id) gt 1">
            <xsl:attribute name="id">err-elem-cit-confproc-12-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-confproc-12-2]
        The citation may contain no more than one of any of &lt;fpage&gt;, &lt;lpage&gt;, and &lt;elocation-id&gt; elements.
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has <xsl:text/>
               <xsl:value-of select="count(fpage)"/>
               <xsl:text/>
        &lt;fpage&gt; elements,  <xsl:text/>
               <xsl:value-of select="count(lpage)"/>
               <xsl:text/> &lt;lpage&gt; elements, and 
        <xsl:text/>
               <xsl:value-of select="count(elocation-id)"/>
               <xsl:text/> &lt;elocation-id&gt; elements.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(lpage and fpage) and (fpage ge lpage)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(lpage and fpage) and (fpage ge lpage)">
            <xsl:attribute name="id">err-elem-cit-confproc-12-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-confproc-12-3]
        If both &lt;lpage&gt; and &lt;fpage&gt; are present, the value of &lt;fpage&gt; must be less than the value of &lt;lpage&gt;. 
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has &lt;lpage&gt; <xsl:text/>
               <xsl:value-of select="lpage"/>
               <xsl:text/>, which is 
        less than or equal to &lt;fpage&gt; <xsl:text/>
               <xsl:value-of select="fpage"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(fpage/*)=0 and count(lpage/*)=0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(fpage/*)=0 and count(lpage/*)=0">
               <xsl:attribute name="id">err-elem-cit-confproc-12-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-12-4]
        The content of the &lt;fpage&gt; and &lt;lpage&gt; elements can contain any alpha numeric value but no child elements are allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(fpage/*)"/>
                  <xsl:text/> child elements in
        &lt;fpage&gt; and  <xsl:text/>
                  <xsl:value-of select="count(lpage/*)"/>
                  <xsl:text/> child elements in &lt;lpage&gt;.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(pub-id) le 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(pub-id) le 1">
               <xsl:attribute name="id">err-elem-cit-confproc-16-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-16-1]
        A maximum of one &lt;pub-id&gt; element is allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(pub-id)"/>
                  <xsl:text/>
        &lt;pub-id&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(person-group | article-title | year| source | conf-loc | conf-name | lpage |        fpage | elocation-id | ext-link | pub-id)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*) = count(person-group | article-title | year| source | conf-loc | conf-name | lpage | fpage | elocation-id | ext-link | pub-id)">
               <xsl:attribute name="id">err-elem-cit-confproc-17</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-17]
        The only tags that are allowed as children of &lt;element-citation&gt; with the publication-type="confproc" are:
        &lt;person-group&gt;, &lt;year&gt;, &lt;article-title&gt;, &lt;source&gt;, &lt;conf-loc&gt;, &lt;conf-name&gt;, 
        &lt;fpage&gt;, &lt;lpage&gt;, &lt;elocation-id&gt;, &lt;ext-link&gt;, and &lt;pub-id&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has other elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M225"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M225"/>
   <xsl:template match="@*|node()" priority="-2" mode="M225">
      <xsl:apply-templates select="*" mode="M225"/>
   </xsl:template>

   <!--PATTERN elem-citation-confproc-preson-group-pattern-->


	  <!--RULE elem-citation-confproc-preson-group-->
   <xsl:template match="element-citation[@publication-type='confproc']/person-group"
                 priority="1000"
                 mode="M226">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='confproc']/person-group"
                       id="elem-citation-confproc-preson-group"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@person-group-type='author'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="@person-group-type='author'">
               <xsl:attribute name="id">err-elem-cit-confproc-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-2-2]
        Each &lt;person-group&gt; must have a @person-group-type attribute of type 'author'.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a &lt;person-group&gt; 
        element with @person-group-type attribute '<xsl:text/>
                  <xsl:value-of select="@person-group-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M226"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M226"/>
   <xsl:template match="@*|node()" priority="-2" mode="M226">
      <xsl:apply-templates select="*" mode="M226"/>
   </xsl:template>

   <!--PATTERN elem-citation-confproc-source-pattern-->


	  <!--RULE elem-citation-confproc-source-->
   <xsl:template match="element-citation[@publication-type='confproc']/source"
                 priority="1000"
                 mode="M227">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='confproc']/source"
                       id="elem-citation-confproc-source"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="(./string-length() + sum(*/string-length()) ge 2)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="(./string-length() + sum(*/string-length()) ge 2)">
               <xsl:attribute name="id">err-elem-cit-confproc-9-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-9-2-1]
        A  &lt;source&gt; element within a &lt;element-citation&gt; of type 'confproc' must contain 
        at least two characters.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has too few characters.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=count(italic | sub | sup)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*)=count(italic | sub | sup)">
               <xsl:attribute name="id">err-elem-cit-confproc-9-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-9-2-2]
        A  &lt;source&gt; element within a &lt;element-citation&gt; of type 'confproc' may only contain the child 
        elements&lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. 
        No other elements are allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has child elements that are not allowed.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M227"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M227"/>
   <xsl:template match="@*|node()" priority="-2" mode="M227">
      <xsl:apply-templates select="*" mode="M227"/>
   </xsl:template>

   <!--PATTERN elem-citation-confproc-article-title-pattern-->


	  <!--RULE elem-citation-confproc-article-title-->
   <xsl:template match="element-citation[@publication-type='confproc']/article-title"
                 priority="1000"
                 mode="M228">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='confproc']/article-title"
                       id="elem-citation-confproc-article-title"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(sub|sup|italic)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*) = count(sub|sup|italic)">
               <xsl:attribute name="id">err-elem-cit-confproc-8-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-8-2]
        An &lt;article-title&gt; element in a reference may contain characters and &lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. 
        No other elements are allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M228"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M228"/>
   <xsl:template match="@*|node()" priority="-2" mode="M228">
      <xsl:apply-templates select="*" mode="M228"/>
   </xsl:template>

   <!--PATTERN elem-citation-confproc-conf-name-pattern-->


	  <!--RULE elem-citation-confproc-conf-name-->
   <xsl:template match="element-citation[@publication-type='confproc']/conf-name"
                 priority="1000"
                 mode="M229">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='confproc']/conf-name"
                       id="elem-citation-confproc-conf-name"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*)=0">
               <xsl:attribute name="id">err-elem-cit-confproc-10-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-10-2]
        No elements are allowed inside &lt;conf-name&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has child elements within the
        &lt;conf-name&gt; element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M229"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M229"/>
   <xsl:template match="@*|node()" priority="-2" mode="M229">
      <xsl:apply-templates select="*" mode="M229"/>
   </xsl:template>

   <!--PATTERN elem-citation-confproc-conf-loc-pattern-->


	  <!--RULE elem-citation-confproc-conf-loc-->
   <xsl:template match="element-citation[@publication-type='confproc']/conf-loc"
                 priority="1000"
                 mode="M230">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='confproc']/conf-loc"
                       id="elem-citation-confproc-conf-loc"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*)=0">
               <xsl:attribute name="id">err-elem-cit-confproc-11-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-11-2]
        No elements are allowed inside &lt;conf-loc&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has child elements within the
        &lt;conf-loc&gt; element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M230"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M230"/>
   <xsl:template match="@*|node()" priority="-2" mode="M230">
      <xsl:apply-templates select="*" mode="M230"/>
   </xsl:template>

   <!--PATTERN elem-citation-confproc-fpage-pattern-->


	  <!--RULE elem-citation-confproc-fpage-->
   <xsl:template match="element-citation[@publication-type='confproc']/fpage"
                 priority="1000"
                 mode="M231">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='confproc']/fpage"
                       id="elem-citation-confproc-fpage"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(normalize-space(.),'^\d.*') or (substring(normalize-space(../lpage),1,1) = substring(normalize-space(.),1,1))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(normalize-space(.),'^\d.*') or (substring(normalize-space(../lpage),1,1) = substring(normalize-space(.),1,1))">
               <xsl:attribute name="id">err-elem-cit-confproc-12-5</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-12-5]
        If the content of &lt;fpage&gt; begins with a letter, then the content of &lt;lpage&gt; must begin with 
        the same letter. 
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has &lt;fpage&gt;='<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'
        and &lt;lpage&gt;='<xsl:text/>
                  <xsl:value-of select="../lpage"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M231"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M231"/>
   <xsl:template match="@*|node()" priority="-2" mode="M231">
      <xsl:apply-templates select="*" mode="M231"/>
   </xsl:template>

   <!--PATTERN elem-citation-confproc-pub-id-pattern-->


	  <!--RULE elem-citation-confproc-pub-id-->
   <xsl:template match="element-citation[@publication-type='confproc']/pub-id"
                 priority="1000"
                 mode="M232">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='confproc']/pub-id"
                       id="elem-citation-confproc-pub-id"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@pub-id-type='doi' or @pub-id-type='pmid'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="@pub-id-type='doi' or @pub-id-type='pmid'">
               <xsl:attribute name="id">err-elem-cit-confproc-16-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-16-2]
        The only allowed pub-id types are 'doi' or 'pmid'.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a pub-id type of 
        '<xsl:text/>
                  <xsl:value-of select="@pub-id-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M232"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M232"/>
   <xsl:template match="@*|node()" priority="-2" mode="M232">
      <xsl:apply-templates select="*" mode="M232"/>
   </xsl:template>

   <!--PATTERN elem-citation-confproc-ext-link-pattern-->


	  <!--RULE elem-citation-confproc-ext-link-->
   <xsl:template match="element-citation[@publication-type='confproc']/ext-link"
                 priority="1000"
                 mode="M233">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='confproc']/ext-link"
                       id="elem-citation-confproc-ext-link"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@xlink:href"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@xlink:href">
               <xsl:attribute name="id">err-elem-cit-confproc-14-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-14-1]
        Each &lt;ext-link&gt; element must contain @xlink:href. The &lt;ext-link&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' 
        does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="starts-with(@xlink:href, 'http://') or starts-with(@xlink:href, 'https://')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="starts-with(@xlink:href, 'http://') or starts-with(@xlink:href, 'https://')">
               <xsl:attribute name="id">err-elem-cit-confproc-14-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-14-2]
        The value of @xlink:href must start with either "http://" or "https://". 
        The &lt;ext-link&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' 
        is '<xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/>', which does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="normalize-space(@xlink:href)=normalize-space(.)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="normalize-space(@xlink:href)=normalize-space(.)">
               <xsl:attribute name="id">err-elem-cit-confproc-14-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-confproc-14-3]
        The value of @xlink:href must be the same as the element content of &lt;ext-link&gt;.
        The &lt;ext-link&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' 
        has @xlink:href='<xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/>' and content '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M233"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M233"/>
   <xsl:template match="@*|node()" priority="-2" mode="M233">
      <xsl:apply-templates select="*" mode="M233"/>
   </xsl:template>

   <!--PATTERN elem-citation-thesis-pattern-->


	  <!--RULE elem-citation-thesis-->
   <xsl:template match="element-citation[@publication-type='thesis']"
                 priority="1000"
                 mode="M234">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='thesis']"
                       id="elem-citation-thesis"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(person-group)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(person-group)=1">
               <xsl:attribute name="id">err-elem-cit-thesis-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-2-1]
        One and only one person-group element is allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(person-group)"/>
                  <xsl:text/> &lt;person-group&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(collab)=0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(collab)=0">
               <xsl:attribute name="id">err-elem-cit-thesis-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-3]
        No &lt;collab&gt; elements are allowed in thesis citations.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(collab)"/>
                  <xsl:text/> &lt;collab&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(etal)=0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(etal)=0">
               <xsl:attribute name="id">err-elem-cit-thesis-6</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-6]
        No &lt;etal&gt; elements are allowed in thesis citations.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(etal)"/>
                  <xsl:text/> &lt;etal&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(article-title)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(article-title)=1">
               <xsl:attribute name="id">err-elem-cit-thesis-8-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-8-1]
        Each  &lt;element-citation&gt; of type 'thesis' must contain one and
        only one &lt;article-title&gt; element.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(article-title)"/>
                  <xsl:text/> &lt;article-title&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(publisher-name)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(publisher-name)=1">
               <xsl:attribute name="id">err-elem-cit-thesis-9-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-9-1]
        &lt;publisher-name&gt; is required.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(publisher-name)"/>
                  <xsl:text/>
        &lt;publisher-name&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(pub-id) le 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(pub-id) le 1">
               <xsl:attribute name="id">err-elem-cit-thesis-11-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-11-1]
        A maximum of one &lt;pub-id&gt; element is allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(pub-id)"/>
                  <xsl:text/>
        &lt;pub-id&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(person-group | article-title | year| source | publisher-loc | publisher-name | ext-link | pub-id)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*) = count(person-group | article-title | year| source | publisher-loc | publisher-name | ext-link | pub-id)">
               <xsl:attribute name="id">err-elem-cit-thesis-13</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-13]
        The only tags that are allowed as children of &lt;element-citation&gt; with the publication-type="thesis" are:
        &lt;person-group&gt;, &lt;year&gt;, &lt;article-title&gt;, &lt;source&gt;, &lt;publisher-loc&gt;, &lt;publisher-name&gt;, 
        &lt;ext-link&gt;, and &lt;pub-id&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has other elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M234"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M234"/>
   <xsl:template match="@*|node()" priority="-2" mode="M234">
      <xsl:apply-templates select="*" mode="M234"/>
   </xsl:template>

   <!--PATTERN elem-citation-thesis-preson-group-pattern-->


	  <!--RULE elem-citation-thesis-preson-group-->
   <xsl:template match="element-citation[@publication-type='thesis']/person-group"
                 priority="1000"
                 mode="M235">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='thesis']/person-group"
                       id="elem-citation-thesis-preson-group"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@person-group-type='author'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="@person-group-type='author'">
               <xsl:attribute name="id">err-elem-cit-thesis-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-2-2]
        Each &lt;person-group&gt; must have a @person-group-type attribute of type 'author'.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a &lt;person-group&gt; 
        element with @person-group-type attribute '<xsl:text/>
                  <xsl:value-of select="@person-group-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(name)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(name)=1">
               <xsl:attribute name="id">err-elem-cit-thesis-2-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-2-3]
        Each thesis citation must have one and only one author.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a thesis citation 
        with <xsl:text/>
                  <xsl:value-of select="count(name)"/>
                  <xsl:text/> authors.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M235"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M235"/>
   <xsl:template match="@*|node()" priority="-2" mode="M235">
      <xsl:apply-templates select="*" mode="M235"/>
   </xsl:template>

   <!--PATTERN elem-citation-thesis-article-title-pattern-->


	  <!--RULE elem-citation-thesis-article-title-->
   <xsl:template match="element-citation[@publication-type='thesis']/article-title"
                 priority="1000"
                 mode="M236">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='thesis']/article-title"
                       id="elem-citation-thesis-article-title"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(sub|sup|italic)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*) = count(sub|sup|italic)">
               <xsl:attribute name="id">err-elem-cit-thesis-8-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-8-2]
        An &lt;article-title&gt; element in a reference may contain characters and &lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. 
        No other elements are allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M236"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M236"/>
   <xsl:template match="@*|node()" priority="-2" mode="M236">
      <xsl:apply-templates select="*" mode="M236"/>
   </xsl:template>

   <!--PATTERN elem-citation-thesis-publisher-name-pattern-->


	  <!--RULE elem-citation-thesis-publisher-name-->
   <xsl:template match="element-citation[@publication-type='thesis']/publisher-name"
                 priority="1000"
                 mode="M237">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='thesis']/publisher-name"
                       id="elem-citation-thesis-publisher-name"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*)=0">
               <xsl:attribute name="id">err-elem-cit-thesis-9-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-9-2]
        No elements are allowed inside &lt;publisher-name&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has child elements within the
        &lt;publisher-name&gt; element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M237"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M237"/>
   <xsl:template match="@*|node()" priority="-2" mode="M237">
      <xsl:apply-templates select="*" mode="M237"/>
   </xsl:template>

   <!--PATTERN elem-citation-thesis-publisher-loc-pattern-->


	  <!--RULE elem-citation-thesis-publisher-loc-->
   <xsl:template match="element-citation[@publication-type='thesis']/publisher-loc"
                 priority="1000"
                 mode="M238">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='thesis']/publisher-loc"
                       id="elem-citation-thesis-publisher-loc"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(*)=0">
               <xsl:attribute name="id">err-elem-cit-thesis-10-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-10-2]
        No elements are allowed inside &lt;publisher-loc&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has child elements within the
        &lt;publisher-loc&gt; element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M238"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M238"/>
   <xsl:template match="@*|node()" priority="-2" mode="M238">
      <xsl:apply-templates select="*" mode="M238"/>
   </xsl:template>

   <!--PATTERN elem-citation-thesis-pub-id-pattern-->


	  <!--RULE elem-citation-thesis-pub-id-->
   <xsl:template match="element-citation[@publication-type='thesis']/pub-id"
                 priority="1000"
                 mode="M239">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='thesis']/pub-id"
                       id="elem-citation-thesis-pub-id"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@pub-id-type='doi'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@pub-id-type='doi'">
               <xsl:attribute name="id">err-elem-cit-thesis-11-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-11-2]
        The only allowed pub-id type is 'doi'.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a pub-id type of 
        '<xsl:text/>
                  <xsl:value-of select="@pub-id-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M239"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M239"/>
   <xsl:template match="@*|node()" priority="-2" mode="M239">
      <xsl:apply-templates select="*" mode="M239"/>
   </xsl:template>

   <!--PATTERN elem-citation-thesis-ext-link-pattern-->


	  <!--RULE elem-citation-thesis-ext-link-->
   <xsl:template match="element-citation[@publication-type='thesis']/ext-link"
                 priority="1000"
                 mode="M240">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='thesis']/ext-link"
                       id="elem-citation-thesis-ext-link"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="@xlink:href"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="@xlink:href">
               <xsl:attribute name="id">err-elem-cit-thesis-12-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-12-1]
        Each &lt;ext-link&gt; element must contain @xlink:href. The &lt;ext-link&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' 
        does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="starts-with(@xlink:href, 'http://') or starts-with(@xlink:href, 'https://')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="starts-with(@xlink:href, 'http://') or starts-with(@xlink:href, 'https://')">
               <xsl:attribute name="id">err-elem-cit-thesis-12-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-12-2]
        The value of @xlink:href must start with either "http://" or "https://". 
        The &lt;ext-link&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' 
        is '<xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/>', which does not.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="normalize-space(@xlink:href)=normalize-space(.)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="normalize-space(@xlink:href)=normalize-space(.)">
               <xsl:attribute name="id">err-elem-cit-thesis-12-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-thesis-12-3]
        The value of @xlink:href must be the same as the element content of &lt;ext-link&gt;.
        The &lt;ext-link&gt; element in Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' 
        has @xlink:href='<xsl:text/>
                  <xsl:value-of select="@xlink:href"/>
                  <xsl:text/>' and content '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M240"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M240"/>
   <xsl:template match="@*|node()" priority="-2" mode="M240">
      <xsl:apply-templates select="*" mode="M240"/>
   </xsl:template>

   <!--PATTERN elem-citation-periodical-pattern-->


	  <!--RULE elem-citation-periodical-->
   <xsl:template match="element-citation[@publication-type='periodical']"
                 priority="1000"
                 mode="M241">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='periodical']"
                       id="elem-citation-periodical"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(person-group)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(person-group)=1">
               <xsl:attribute name="id">err-elem-cit-periodical-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-2-1]
        Each  &lt;element-citation&gt; of type 'periodical' must contain one and
        only one &lt;person-group&gt; element.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(person-group)"/>
                  <xsl:text/> &lt;person-group&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="person-group[@person-group-type='author']"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="person-group[@person-group-type='author']">
               <xsl:attribute name="id">err-elem-cit-periodical-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-2-2]
        Each  &lt;element-citation&gt; of type 'periodical' must contain one &lt;person-group&gt; 
        with the attribute person-group-type set to 'author'. Reference 
        '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has a  &lt;person-group&gt; type of 
        '<xsl:text/>
                  <xsl:value-of select="person-group/@person-group-type"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(string-date/year)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(string-date/year)=1">
               <xsl:attribute name="id">err-elem-cit-periodical-7-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-7-1]
        There must be one and only one &lt;year&gt; element in a &lt;string-date&gt; element.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(year)"/>
                  <xsl:text/>
        &lt;year&gt; elements in the &lt;string-date&gt; element.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(article-title)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(article-title)=1">
               <xsl:attribute name="id">err-elem-cit-periodical-8-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-8-1]
        Each  &lt;element-citation&gt; of type 'periodical' must contain one and
        only one &lt;article-title&gt; element.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(article-title)"/>
                  <xsl:text/> &lt;article-title&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(source)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(source)=1">
               <xsl:attribute name="id">err-elem-cit-periodical-9-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-9-1]
        Each  &lt;element-citation&gt; of type 'periodical' must contain one and
        only one &lt;source&gt; element.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has 
        <xsl:text/>
                  <xsl:value-of select="count(source)"/>
                  <xsl:text/> &lt;source&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(source)=1 and (source/string-length() + sum(descendant::source/*/string-length()) ge 2)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(source)=1 and (source/string-length() + sum(descendant::source/*/string-length()) ge 2)">
               <xsl:attribute name="id">err-elem-cit-periodical-9-2-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-9-2-1]
        A  &lt;source&gt; element within a &lt;element-citation&gt; of type 'periodical' must contain 
        at least two characters.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has too few characters.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(source)=1 and count(source/*)=count(source/(italic | sub | sup))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(source)=1 and count(source/*)=count(source/(italic | sub | sup))">
               <xsl:attribute name="id">err-elem-cit-periodical-9-2-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-9-2-2]
        A  &lt;source&gt; element within a &lt;element-citation&gt; of type 'periodical' may only contain the child 
        elements&lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. 
        No other elements are allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has disallowed child elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(volume) le 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(volume) le 1">
               <xsl:attribute name="id">err-elem-cit-periodical-10-1-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-10-1-3]
        There may be at most one  &lt;volume&gt; element within a &lt;element-citation&gt; of type 'periodical'.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(volume)"/>
                  <xsl:text/>
        &lt;volume&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="lpage and not(fpage)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="lpage and not(fpage)">
            <xsl:attribute name="id">err-elem-cit-periodical-11-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-periodical-11-1]
        If &lt;lpage&gt; is present, &lt;fpage&gt; must also be present.
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has <xsl:text/>
               <xsl:value-of select="count(fpage)"/>
               <xsl:text/>
        &lt;fpage&gt; elements,  <xsl:text/>
               <xsl:value-of select="count(lpage)"/>
               <xsl:text/> &lt;lpage&gt; elements, and 
        <xsl:text/>
               <xsl:value-of select="count(elocation-id)"/>
               <xsl:text/> &lt;elocation-id&gt; elements.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="count(fpage) gt 1 or count(lpage) gt 1">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="count(fpage) gt 1 or count(lpage) gt 1">
            <xsl:attribute name="id">err-elem-cit-periodical-11-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-periodical-11-2]
        The citation may contain no more than one &lt;fpage&gt; or &lt;lpage&gt; elements.
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has <xsl:text/>
               <xsl:value-of select="count(fpage)"/>
               <xsl:text/>
        &lt;fpage&gt; elements and <xsl:text/>
               <xsl:value-of select="count(lpage)"/>
               <xsl:text/> &lt;lpage&gt; elements.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(lpage and fpage) and (fpage ge lpage)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(lpage and fpage) and (fpage ge lpage)">
            <xsl:attribute name="id">err-elem-cit-periodical-11-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-periodical-11-3]
        If both &lt;lpage&gt; and &lt;fpage&gt; are present, the value of &lt;fpage&gt; must be less than the value of &lt;lpage&gt;. 
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has &lt;lpage&gt; <xsl:text/>
               <xsl:value-of select="lpage"/>
               <xsl:text/>, which is 
        less than or equal to &lt;fpage&gt; <xsl:text/>
               <xsl:value-of select="fpage"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(fpage/*)=0 and count(lpage/*)=0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(fpage/*)=0 and count(lpage/*)=0">
               <xsl:attribute name="id">err-elem-cit-periodical-11-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-11-4]
        The content of the &lt;fpage&gt; and &lt;lpage&gt; elements can contain any alpha numeric value but no child elements are allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(fpage/*)"/>
                  <xsl:text/> child elements in
        &lt;fpage&gt; and  <xsl:text/>
                  <xsl:value-of select="count(lpage/*)"/>
                  <xsl:text/> child elements in &lt;lpage&gt;.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(person-group | year | string-date | article-title | source | volume | fpage | lpage)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*) = count(person-group | year | string-date | article-title | source | volume | fpage | lpage)">
               <xsl:attribute name="id">err-elem-cit-periodical-13</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-13]
        The only tags that are allowed as children of &lt;element-citation&gt; with the publication-type="periodical" are:
        &lt;person-group&gt;, &lt;year&gt;, &lt;string-date&gt;, &lt;article-title&gt;, &lt;source&gt;, &lt;volume&gt;, &lt;fpage&gt;, and &lt;lpage&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has other elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(string-date)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(string-date)=1">
               <xsl:attribute name="id">err-elem-cit-periodical-14-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-14-1]
        There must be one and only one &lt;string-date&gt; element within a &lt;element-citation&gt; of type 'periodical'.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="count(string-date)"/>
                  <xsl:text/>
        &lt;string-date&gt; elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M241"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M241"/>
   <xsl:template match="@*|node()" priority="-2" mode="M241">
      <xsl:apply-templates select="*" mode="M241"/>
   </xsl:template>

   <!--PATTERN elem-citation-periodical-year-pattern-->


	  <!--RULE elem-citation-periodical-year-->
   <xsl:template match="element-citation[@publication-type='periodical']/string-date/year"
                 priority="1000"
                 mode="M242">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='periodical']/string-date/year"
                       id="elem-citation-periodical-year"/>
      <xsl:variable name="YYYY" select="substring(normalize-space(.), 1, 4)"/>
      <xsl:variable name="current-year" select="year-from-date(current-date())"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="./@iso-8601-date"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="./@iso-8601-date">
               <xsl:attribute name="id">err-elem-cit-periodical-7-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-7-2]
        The &lt;year&gt; element must have an @iso-8601-date attribute.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not.
      </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(normalize-space(@iso-8601-date),'(^\d{4}-\d{2}-\d{2})|(^\d{4}-\d{2})')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(normalize-space(@iso-8601-date),'(^\d{4}-\d{2}-\d{2})|(^\d{4}-\d{2})')">
               <xsl:attribute name="id">err-elem-cit-periodical-7-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-7-3]
        The @iso-8601-date value must include 4 digit year, 2 digit month, and (optionally) a 2 digit day.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement as it contains
        the value '<xsl:text/>
                  <xsl:value-of select="@iso-8601-date"/>
                  <xsl:text/>'.
      </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(normalize-space(.),'(^\d{4}[a-z]?)')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(normalize-space(.),'(^\d{4}[a-z]?)')">
               <xsl:attribute name="id">err-elem-cit-periodical-7-4-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-7-4-1]
        The &lt;year&gt; element in a reference must contain 4 digits, possibly followed by one (but not more) lower-case letter.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement as it contains
        the value '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'.
      </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="(1700 le number($YYYY)) and (number($YYYY) le $current-year)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="(1700 le number($YYYY)) and (number($YYYY) le $current-year)">
               <xsl:attribute name="id">err-elem-cit-periodical-7-4-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-7-4-2]
        The numeric value of the first 4 digits of the &lt;year&gt; element must be between 1700 and the current year (inclusive).
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement as it contains
        the value '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'.
      </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="not(./@iso-8601-date) or substring(normalize-space(./@iso-8601-date),1,4) = $YYYY"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="not(./@iso-8601-date) or substring(normalize-space(./@iso-8601-date),1,4) = $YYYY">
               <xsl:attribute name="id">err-elem-cit-periodical-7-5</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-7-5]
        The numeric value of the first 4 digits of the @iso-8601-date attribute must match the first 4 digits on the 
        &lt;year&gt; element.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement as the element contains
        the value '<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>' and the attribute contains the value 
        '<xsl:text/>
                  <xsl:value-of select="./@iso-8601-date"/>
                  <xsl:text/>'.
      </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="not(concat($YYYY, 'a')=.) or (concat($YYYY, 'a')=. and        (some $y in //element-citation/descendant::year        satisfies (normalize-space($y) = concat($YYYY,'b'))        and ancestor::element-citation/person-group[1]/name[1]/surname = $y/ancestor::element-citation/person-group[1]/name[1]/surname)       )"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="not(concat($YYYY, 'a')=.) or (concat($YYYY, 'a')=. and (some $y in //element-citation/descendant::year satisfies (normalize-space($y) = concat($YYYY,'b')) and ancestor::element-citation/person-group[1]/name[1]/surname = $y/ancestor::element-citation/person-group[1]/name[1]/surname) )">
               <xsl:attribute name="id">err-elem-cit-periodical-7-6</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-7-6]
        If the &lt;year&gt; element contains the letter 'a' after the digits, there must be another reference with 
        the same first author surname with a letter "b" after the year. 
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not fulfill this requirement.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="not(starts-with(.,$YYYY) and matches(normalize-space(.),('\d{4}[b-z]'))) or       (some $y in //element-citation/descendant::year        satisfies (normalize-space($y) = concat($YYYY,translate(substring(normalize-space(.),5,1),'bcdefghijklmnopqrstuvwxyz',       'abcdefghijklmnopqrstuvwxy')))        and ancestor::element-citation/person-group[1]/name[1]/surname = $y/ancestor::element-citation/person-group[1]/name[1]/surname)       "/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="not(starts-with(.,$YYYY) and matches(normalize-space(.),('\d{4}[b-z]'))) or (some $y in //element-citation/descendant::year satisfies (normalize-space($y) = concat($YYYY,translate(substring(normalize-space(.),5,1),'bcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxy'))) and ancestor::element-citation/person-group[1]/name[1]/surname = $y/ancestor::element-citation/person-group[1]/name[1]/surname)">
               <xsl:attribute name="id">err-elem-cit-periodical-7-7</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-7-7]
        If the &lt;year&gt; element contains any letter other than 'a' after the digits, there must be another 
        reference with the same first author surname with the preceding letter after the year. 
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not fulfill this requirement.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test=". = preceding::year and        ancestor::element-citation/person-group[1]/name[1]/surname = preceding::year/ancestor::element-citation/person-group[1]/name[1]/surname">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test=". = preceding::year and ancestor::element-citation/person-group[1]/name[1]/surname = preceding::year/ancestor::element-citation/person-group[1]/name[1]/surname">
            <xsl:attribute name="id">err-elem-cit-periodical-7-8</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>[err-elem-cit-periodical-7-8]
        Letter suffixes must be unique for the combination of year and first author surname. 
        Reference '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' does not fulfill this requirement as it 
        contains the &lt;year&gt; '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' more than once for the same first author surname
        '<xsl:text/>
               <xsl:value-of select="ancestor::element-citation/person-group[1]/name[1]/surname"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M242"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M242"/>
   <xsl:template match="@*|node()" priority="-2" mode="M242">
      <xsl:apply-templates select="*" mode="M242"/>
   </xsl:template>

   <!--PATTERN elem-citation-periodical-article-title-pattern-->


	  <!--RULE elem-citation-periodical-article-title-->
   <xsl:template match="element-citation[@publication-type='periodical']/article-title"
                 priority="1000"
                 mode="M243">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='periodical']/article-title"
                       id="elem-citation-periodical-article-title"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*) = count(sub|sup|italic)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*) = count(sub|sup|italic)">
               <xsl:attribute name="id">err-elem-cit-periodical-8-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-8-2]
        An &lt;article-title&gt; element in a reference may contain characters and &lt;italic&gt;, &lt;sub&gt;, and &lt;sup&gt;. 
        No other elements are allowed.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M243"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M243"/>
   <xsl:template match="@*|node()" priority="-2" mode="M243">
      <xsl:apply-templates select="*" mode="M243"/>
   </xsl:template>

   <!--PATTERN elem-citation-periodical-volume-pattern-->


	  <!--RULE elem-citation-periodical-volume-->
   <xsl:template match="element-citation[@publication-type='periodical']/volume"
                 priority="1000"
                 mode="M244">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='periodical']/volume"
                       id="elem-citation-periodical-volume"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(*)=0 and (string-length(text()) ge 1)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(*)=0 and (string-length(text()) ge 1)">
               <xsl:attribute name="id">err-elem-cit-periodical-10-1-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-10-1-2]
        A  &lt;volume&gt; element within a &lt;element-citation&gt; of type 'periodical' must contain 
        at least one character and may not contain child elements.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has too few characters and/or
        child elements.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M244"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M244"/>
   <xsl:template match="@*|node()" priority="-2" mode="M244">
      <xsl:apply-templates select="*" mode="M244"/>
   </xsl:template>

   <!--PATTERN elem-citation-periodical-fpage-pattern-->


	  <!--RULE elem-citation-periodical-fpage-->
   <xsl:template match="element-citation[@publication-type='periodical']/fpage"
                 priority="1000"
                 mode="M245">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='periodical']/fpage"
                       id="elem-citation-periodical-fpage"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(normalize-space(.),'^\d.*') or (substring(normalize-space(../lpage),1,1) = substring(normalize-space(.),1,1))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(normalize-space(.),'^\d.*') or (substring(normalize-space(../lpage),1,1) = substring(normalize-space(.),1,1))">
               <xsl:attribute name="id">err-elem-cit-periodical-11-5</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-11-4]
        If the content of &lt;fpage&gt; begins with a letter, then the content of  &lt;lpage&gt; must begin with 
        the same letter. 
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has &lt;fpage&gt;='<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'
        and &lt;lpage&gt;='<xsl:text/>
                  <xsl:value-of select="../lpage"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M245"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M245"/>
   <xsl:template match="@*|node()" priority="-2" mode="M245">
      <xsl:apply-templates select="*" mode="M245"/>
   </xsl:template>

   <!--PATTERN elem-citation-periodical-string-date-pattern-->


	  <!--RULE elem-citation-periodical-string-date-->
   <xsl:template match="element-citation[@publication-type='periodical']/string-date"
                 priority="1000"
                 mode="M246">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='periodical']/string-date"
                       id="elem-citation-periodical-string-date"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(month)=1 and count(year)=1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="count(month)=1 and count(year)=1">
               <xsl:attribute name="id">err-elem-cit-periodical-14-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-14-2]
        The &lt;string-date&gt; element must include one of each of &lt;month&gt; and &lt;year&gt; 
        elements.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement as it contains
        <xsl:text/>
                  <xsl:value-of select="count(month)"/>
                  <xsl:text/> &lt;month&gt; elements and <xsl:text/>
                  <xsl:value-of select="count(year)"/>
                  <xsl:text/> &lt;year&gt; elements.
      </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(day) le 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(day) le 1">
               <xsl:attribute name="id">err-elem-cit-periodical-14-3</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-14-3]
        The &lt;string-date&gt; element may include one &lt;day&gt; element.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement as it contains
        <xsl:text/>
                  <xsl:value-of select="count(day)"/>
                  <xsl:text/> &lt;day&gt; elements.
      </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="(name(child::node()[1])='month' and replace(child::node()[2],'\s+',' ')=' ' and        name(child::node()[3])='day' and replace(child::node()[4],'\s+',' ')=', ' and name(*[position()=last()])='year') or       (name(child::node()[1])='month' and replace(child::node()[2],'\s+',' ')=', ' and name(*[position()=last()])='year')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="(name(child::node()[1])='month' and replace(child::node()[2],'\s+',' ')=' ' and name(child::node()[3])='day' and replace(child::node()[4],'\s+',' ')=', ' and name(*[position()=last()])='year') or (name(child::node()[1])='month' and replace(child::node()[2],'\s+',' ')=', ' and name(*[position()=last()])='year')">
               <xsl:attribute name="id">err-elem-cit-periodical-14-8</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-14-8]
        The format of the element content must match &lt;month&gt;, space, &lt;day&gt;, comma, &lt;year&gt;, or &lt;month&gt;, comma, &lt;year&gt;.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' has <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M246"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M246"/>
   <xsl:template match="@*|node()" priority="-2" mode="M246">
      <xsl:apply-templates select="*" mode="M246"/>
   </xsl:template>

   <!--PATTERN elem-citation-periodical-month-pattern-->


	  <!--RULE elem-citation-periodical-month-->
   <xsl:template match="element-citation[@publication-type='periodical']/string-date/month"
                 priority="1000"
                 mode="M247">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='periodical']/string-date/month"
                       id="elem-citation-periodical-month"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test=".=('January','February','March','April','May','June','July','August','September','October','November','December')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test=".=('January','February','March','April','May','June','July','August','September','October','November','December')">
               <xsl:attribute name="id">err-elem-cit-periodical-14-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-14-4]
        The content of &lt;month&gt; must be the month, written out, with correct capitalization.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement as it contains
        the value  &lt;month&gt;='<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'.
      </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test=".=format-date(xs:date(../year/@iso-8601-date), '[MNn]')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test=".=format-date(xs:date(../year/@iso-8601-date), '[MNn]')">
               <xsl:attribute name="id">err-elem-cit-periodical-14-5</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-14-5]
        The content of &lt;month&gt; must match the content of the month section of @iso-8601-date on the 
        sibling year element.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement as it contains
        the value &lt;month&gt;='<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>' but &lt;year&gt;/@iso-8601-date='<xsl:text/>
                  <xsl:value-of select="../year/@iso-8601-date"/>
                  <xsl:text/>'.
      </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M247"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M247"/>
   <xsl:template match="@*|node()" priority="-2" mode="M247">
      <xsl:apply-templates select="*" mode="M247"/>
   </xsl:template>

   <!--PATTERN elem-citation-periodical-day-pattern-->


	  <!--RULE elem-citation-periodical-day-->
   <xsl:template match="element-citation[@publication-type='periodical']/string-date/day"
                 priority="1000"
                 mode="M248">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='periodical']/string-date/day"
                       id="elem-citation-periodical-day"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(normalize-space(.),'([1-9])|([1-2][0-9])|(3[0-1])')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(normalize-space(.),'([1-9])|([1-2][0-9])|(3[0-1])')">
               <xsl:attribute name="id">err-elem-cit-periodical-14-6</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-14-6]
        The content of &lt;day&gt;, if present, must be the day, in digits, with no zeroes.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement as it contains
        the value  &lt;day&gt;='<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>'.
      </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test=".=format-date(xs:date(../year/@iso-8601-date), '[D]')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test=".=format-date(xs:date(../year/@iso-8601-date), '[D]')">
               <xsl:attribute name="id">err-elem-cit-periodical-14-7</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>[err-elem-cit-periodical-14-7]
        The content of &lt;day&gt;, if present, must match the content of the day section of @iso-8601-date on the 
        sibling year element.
        Reference '<xsl:text/>
                  <xsl:value-of select="ancestor::ref/@id"/>
                  <xsl:text/>' does not meet this requirement as it contains
        the value &lt;day&gt;='<xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>' but &lt;year&gt;/@iso-8601-date='<xsl:text/>
                  <xsl:value-of select="../year/@iso-8601-date"/>
                  <xsl:text/>'.
      </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M248"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M248"/>
   <xsl:template match="@*|node()" priority="-2" mode="M248">
      <xsl:apply-templates select="*" mode="M248"/>
   </xsl:template>

   <!--PATTERN pub-id-tests-pattern-->


	  <!--RULE pub-id-tests-->
   <xsl:template match="element-citation/pub-id" priority="1000" mode="M249">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation/pub-id"
                       id="pub-id-tests"/>

		    <!--REPORT error-->
      <xsl:if test="(@xlink:href) and not(matches(@xlink:href,'^http[s]?://|^ftp://'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(@xlink:href) and not(matches(@xlink:href,'^http[s]?://|^ftp://'))">
            <xsl:attribute name="id">pub-id-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>@xlink:href must start with an http:// or ftp:// protocol.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(@pub-id-type='doi') and not(matches(.,'^10\.\d{4,9}/[-._;()/:A-Za-z0-9&lt;&gt;]+$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(@pub-id-type='doi') and not(matches(.,'^10\.\d{4,9}/[-._;()/:A-Za-z0-9&lt;&gt;]+$'))">
            <xsl:attribute name="id">pub-id-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>pub-id is tagged as a doi, but it is not one - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(@pub-id-type='pmid') and matches(.,'\D')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(@pub-id-type='pmid') and matches(.,'\D')">
            <xsl:attribute name="id">pub-id-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>pub-id is tagged as a pmid, but it contains a character(s) which is not a digit - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M249"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M249"/>
   <xsl:template match="@*|node()" priority="-2" mode="M249">
      <xsl:apply-templates select="*" mode="M249"/>
   </xsl:template>

   <!--PATTERN feature-title-tests-pattern-->


	  <!--RULE feature-title-tests-->
   <xsl:template match="article-meta[descendant::subj-group[@subj-group-type='display-channel']/subject = $features-subj]//title-group/article-title"
                 priority="1000"
                 mode="M250">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-meta[descendant::subj-group[@subj-group-type='display-channel']/subject = $features-subj]//title-group/article-title"
                       id="feature-title-tests"/>
      <xsl:variable name="sub-disp-channel"
                    select="ancestor::article-meta/article-categories/subj-group[@subj-group-type='sub-display-channel']/subject"/>

		    <!--REPORT error-->
      <xsl:if test="(count(ancestor::article-meta/article-categories/subj-group[@subj-group-type='sub-display-channel']/subject) = 1) and starts-with(.,$sub-disp-channel)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(count(ancestor::article-meta/article-categories/subj-group[@subj-group-type='sub-display-channel']/subject) = 1) and starts-with(.,$sub-disp-channel)">
            <xsl:attribute name="id">feature-title-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>title starts with the sub-display-channel. This is certainly incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M250"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M250"/>
   <xsl:template match="@*|node()" priority="-2" mode="M250">
      <xsl:apply-templates select="*" mode="M250"/>
   </xsl:template>

   <!--PATTERN feature-abstract-tests-pattern-->


	  <!--RULE feature-abstract-tests-->
   <xsl:template match="front//abstract[@abstract-type='executive-summary']"
                 priority="1000"
                 mode="M251">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="front//abstract[@abstract-type='executive-summary']"
                       id="feature-abstract-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="count(title) = 1"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="count(title) = 1">
               <xsl:attribute name="id">feature-abstract-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>abstract must contain one and only one title.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="title = 'eLife digest'"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="title = 'eLife digest'">
               <xsl:attribute name="id">feature-abstract-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>abstract title must contain 'eLife digest'. Possible superfluous characters - <xsl:text/>
                  <xsl:value-of select="replace(title,'eLife digest','')"/>
                  <xsl:text/>
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M251"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M251"/>
   <xsl:template match="@*|node()" priority="-2" mode="M251">
      <xsl:apply-templates select="*" mode="M251"/>
   </xsl:template>

   <!--PATTERN feature-subj-tests-1-pattern-->


	  <!--RULE feature-subj-tests-1-->
   <xsl:template match="article-categories[subj-group[@subj-group-type='display-channel'][subject = $features-subj]]"
                 priority="1000"
                 mode="M252">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-categories[subj-group[@subj-group-type='display-channel'][subject = $features-subj]]"
                       id="feature-subj-tests-1"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="subj-group[@subj-group-type='sub-display-channel']"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="subj-group[@subj-group-type='sub-display-channel']">
               <xsl:attribute name="id">feature-subj-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>Feature content must contain subj-group[@subj-group-type='sub-display-channel'].</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M252"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M252"/>
   <xsl:template match="@*|node()" priority="-2" mode="M252">
      <xsl:apply-templates select="*" mode="M252"/>
   </xsl:template>

   <!--PATTERN feature-subj-tests-2-pattern-->


	  <!--RULE feature-subj-tests-2-->
   <xsl:template match="subj-group[@subj-group-type='sub-display-channel']/subject"
                 priority="1000"
                 mode="M253">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="subj-group[@subj-group-type='sub-display-channel']/subject"
                       id="feature-subj-tests-2"/>
      <xsl:variable name="token1" select="substring-before(.,' ')"/>
      <xsl:variable name="token2" select="substring-after(.,$token1)"/>

		    <!--REPORT error-->
      <xsl:if test=". != e:titleCase(.)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test=". != e:titleCase(.)">
            <xsl:attribute name="id">feature-subj-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>The content of the sub-display-channel should be in title case - <xsl:text/>
               <xsl:value-of select="e:titleCase(.)"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="ends-with(.,':')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="ends-with(.,':')">
            <xsl:attribute name="id">feature-subj-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>sub-display-channel ends with a colon. This is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="preceding-sibling::subject">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="preceding-sibling::subject">
            <xsl:attribute name="id">feature-subj-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>There is more than one sub-display-channel subjects. This is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M253"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M253"/>
   <xsl:template match="@*|node()" priority="-2" mode="M253">
      <xsl:apply-templates select="*" mode="M253"/>
   </xsl:template>

   <!--PATTERN feature-article-category-tests-pattern-->


	  <!--RULE feature-article-category-tests-->
   <xsl:template match="article-categories[subj-group[@subj-group-type='display-channel']/subject = $features-subj]"
                 priority="1000"
                 mode="M254">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article-categories[subj-group[@subj-group-type='display-channel']/subject = $features-subj]"
                       id="feature-article-category-tests"/>
      <xsl:variable name="count"
                    select="count(subj-group[@subj-group-type='sub-display-channel'])"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="($count = 1) or ($count = 0)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="($count = 1) or ($count = 0)">
               <xsl:attribute name="id">feature-article-category-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>article categories contains more than one subj-group[@subj-group-type='sub-display-channel'], which must be incorrect.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="$count = 0">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$count = 0">
            <xsl:attribute name="id">feature-article-category-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>article categories doesn't contain a subj-group[@subj-group-type='sub-display-channel']. This is almost certainly not right.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M254"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M254"/>
   <xsl:template match="@*|node()" priority="-2" mode="M254">
      <xsl:apply-templates select="*" mode="M254"/>
   </xsl:template>

   <!--PATTERN feature-author-tests-pattern-->


	  <!--RULE feature-author-tests-->
   <xsl:template match="article[@article-type = $features-article-types]//article-meta//contrib[@contrib-type='author']"
                 priority="1000"
                 mode="M255">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article[@article-type = $features-article-types]//article-meta//contrib[@contrib-type='author']"
                       id="feature-author-tests"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="bio"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="bio">
               <xsl:attribute name="id">feature-author-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>Author must contain child bio in feature content.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M255"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M255"/>
   <xsl:template match="@*|node()" priority="-2" mode="M255">
      <xsl:apply-templates select="*" mode="M255"/>
   </xsl:template>

   <!--PATTERN feature-bio-tests-pattern-->


	  <!--RULE feature-bio-tests-->
   <xsl:template match="article[@article-type = $features-article-types]//article-meta//contrib[@contrib-type='author']/bio"
                 priority="1000"
                 mode="M256">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article[@article-type = $features-article-types]//article-meta//contrib[@contrib-type='author']/bio"
                       id="feature-bio-tests"/>
      <xsl:variable name="name"
                    select="concat(parent::contrib/name/given-names,' ',parent::contrib/name/surname)"/>
      <xsl:variable name="xref-rid" select="parent::contrib/xref[@ref-type='aff']/@rid"/>
      <xsl:variable name="aff"
                    select="if (parent::contrib/aff) then parent::contrib/aff[1]/institution[not(@content-type)]/normalize-space(.)        else ancestor::contrib-group/aff[@id/string() = $xref-rid]/institution[not(@content-type)]/normalize-space(.)"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="p/bold = $name"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="p/bold = $name">
               <xsl:attribute name="id">feature-bio-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>bio must contain a bold element which contains the name of the author - <xsl:text/>
                  <xsl:value-of select="$name"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="if (count($aff) &gt; 1) then ()                    else not(contains(.,$aff))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if (count($aff) &gt; 1) then () else not(contains(.,$aff))">
            <xsl:attribute name="id">feature-bio-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>bio does not contain top level insutution text as it appears in their affiliation ('<xsl:text/>
               <xsl:value-of select="$aff"/>
               <xsl:text/>'). Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(p,'[\p{P}]$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(p,'[\p{P}]$')">
            <xsl:attribute name="id">feature-bio-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>bio cannot end in punctuation - '<xsl:text/>
               <xsl:value-of select="substring(p,string-length(p),1)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M256"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M256"/>
   <xsl:template match="@*|node()" priority="-2" mode="M256">
      <xsl:apply-templates select="*" mode="M256"/>
   </xsl:template>

   <!--PATTERN correction-tests-pattern-->


	  <!--RULE correction-tests-->
   <xsl:template match="article[@article-type = 'correction']"
                 priority="1000"
                 mode="M257">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article[@article-type = 'correction']"
                       id="correction-tests"/>

		    <!--REPORT error-->
      <xsl:if test="descendant::article-meta//aff">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="descendant::article-meta//aff">
            <xsl:attribute name="id">corr-aff-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Correction notices should not contain affiliations.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::article-meta//kwd-group[@kwd-group-type='author-keywords']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="descendant::article-meta//kwd-group[@kwd-group-type='author-keywords']">
            <xsl:attribute name="id">corr-auth-kw-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Correction notices should not contain any author keywords.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::fn-group[@content-type='competing-interest']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="descendant::fn-group[@content-type='competing-interest']">
            <xsl:attribute name="id">corr-COI-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Correction notices should not contain competing interests.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::self-uri">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::self-uri">
            <xsl:attribute name="id">corr-self-uri-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Correction notices should not contain a self-uri element (as the PDF is not published).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::abstract">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::abstract">
            <xsl:attribute name="id">corr-abstract-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Correction notices should not contain abstracts.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(back/sec[not(@sec-type='supplementary-material')]) or (count(back/sec) gt 1)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(back/sec[not(@sec-type='supplementary-material')]) or (count(back/sec) gt 1)">
            <xsl:attribute name="id">corr-back-sec</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Correction notices should not contain any sections in the backmatter which are not for supplementary files.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::meta-name[text() = 'Author impact statement']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="descendant::meta-name[text() = 'Author impact statement']">
            <xsl:attribute name="id">corr-impact-statement</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Correction notices should not contain an impact statement.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::contrib-group[@content-type='section']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="descendant::contrib-group[@content-type='section']">
            <xsl:attribute name="id">corr-SE-BRE</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Correction notices must not contain any Senior or Reviewing Editors.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M257"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M257"/>
   <xsl:template match="@*|node()" priority="-2" mode="M257">
      <xsl:apply-templates select="*" mode="M257"/>
   </xsl:template>

   <!--PATTERN retraction-tests-pattern-->


	  <!--RULE retraction-tests-->
   <xsl:template match="article[@article-type = 'retraction']"
                 priority="1000"
                 mode="M258">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article[@article-type = 'retraction']"
                       id="retraction-tests"/>

		    <!--REPORT error-->
      <xsl:if test="descendant::article-meta//aff">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="descendant::article-meta//aff">
            <xsl:attribute name="id">retr-aff-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Retractions should not contain affiliations.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::article-meta//kwd-group[@kwd-group-type='author-keywords']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="descendant::article-meta//kwd-group[@kwd-group-type='author-keywords']">
            <xsl:attribute name="id">retr-auth-kw-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Retractions should not contain any author keywords.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::fn-group[@content-type='competing-interest']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="descendant::fn-group[@content-type='competing-interest']">
            <xsl:attribute name="id">retr-COI-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Retractions should not contain competing interests.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::self-uri">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::self-uri">
            <xsl:attribute name="id">retr-self-uri-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Retractions should not contain a self-uri element (as the PDF is not published).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::abstract">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="descendant::abstract">
            <xsl:attribute name="id">retr-abstract-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Retractions should not contain abstracts.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="back/*">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="back/*">
            <xsl:attribute name="id">retr-back</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Retractions should not contain any content in the back.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::meta-name[text() = 'Author impact statement']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="descendant::meta-name[text() = 'Author impact statement']">
            <xsl:attribute name="id">retr-impact-statement</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Retractions should not contain an impact statement.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="descendant::contrib-group[@content-type='section']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="descendant::contrib-group[@content-type='section']">
            <xsl:attribute name="id">retr-SE-BRE</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Retractions must not contain any Senior or Reviewing Editors.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M258"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M258"/>
   <xsl:template match="@*|node()" priority="-2" mode="M258">
      <xsl:apply-templates select="*" mode="M258"/>
   </xsl:template>

   <!--PATTERN final-gene-primer-sequence-pattern-->


	  <!--RULE final-gene-primer-sequence-->
   <xsl:template match="p" priority="1000" mode="M259">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="p"
                       id="final-gene-primer-sequence"/>
      <xsl:variable name="count"
                    select="count(descendant::named-content[@content-type='sequence'])"/>
      <xsl:variable name="text-tokens"
                    select="for $x in tokenize(.,' ') return if (matches($x,'[ACGTacgt]{15,}')) then $x else ()"/>
      <xsl:variable name="text-count" select="count($text-tokens)"/>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="(($text-count le $count) or ($text-count = $count))"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="(($text-count le $count) or ($text-count = $count))">
               <xsl:attribute name="id">gene-primer-sequence-test</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>p element contains what looks like an untagged primer or gene sequence - <xsl:text/>
                  <xsl:value-of select="string-join($text-tokens,', ')"/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M259"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M259"/>
   <xsl:template match="@*|node()" priority="-2" mode="M259">
      <xsl:apply-templates select="*" mode="M259"/>
   </xsl:template>

   <!--PATTERN rrid-org-code-pattern-->


	  <!--RULE rrid-org-code-->
   <xsl:template match="p|td|th" priority="1000" mode="M260">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="p|td|th"
                       id="rrid-org-code"/>
      <xsl:variable name="count"
                    select="count(descendant::ext-link[matches(@xlink:href,'scicrunch\.org.*resolver')])"/>
      <xsl:variable name="lc" select="lower-case(.)"/>
      <xsl:variable name="text-count" select="number(e:rrid-text-count(.))"/>
      <xsl:variable name="t"
                    select="replace($lc,'drosophila genetic resource center|bloomington drosophila stock center','')"/>
      <xsl:variable name="code-text"
                    select="string-join(for $x in tokenize(.,' ') return if (matches($x,'^--[a-z]+')) then $x else (),'; ')"/>
      <xsl:variable name="unequal-equal-text"
                    select="string-join(for $x in tokenize(.,' ') return if (matches($x,'=$|^=') and not(matches($x,'^=$'))) then $x else (),'; ')"/>

		    <!--REPORT warning-->
      <xsl:if test="($text-count gt $count)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="($text-count gt $count)">
            <xsl:attribute name="id">rrid-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>'<xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>' element contains what looks like <xsl:text/>
               <xsl:value-of select="$text-count - $count"/>
               <xsl:text/> unlinked RRID(s). These should always be linked using 'https://scicrunch.org/resolver/'. Element begins with <xsl:text/>
               <xsl:value-of select="substring(.,1,15)"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($t,$org-regex) and not(descendant::italic[contains(.,e:org-conform($t))])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($t,$org-regex) and not(descendant::italic[contains(.,e:org-conform($t))])">
            <xsl:attribute name="id">org-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains an organism - <xsl:text/>
               <xsl:value-of select="e:org-conform($t)"/>
               <xsl:text/> - but there is no italic element with that correct capitalisation or spacing. Is this correct? <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element begins with <xsl:text/>
               <xsl:value-of select="concat(.,substring(.,1,15))"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(descendant::monospace) and ($code-text != '')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="not(descendant::monospace) and ($code-text != '')">
            <xsl:attribute name="id">code-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains what looks like unformatted code - '<xsl:text/>
               <xsl:value-of select="$code-text"/>
               <xsl:text/>' - does this need tagging with &lt;monospace/&gt; or &lt;preformat/&gt;?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($unequal-equal-text != '') and not(disp-formula[contains(.,'=')]) and not(inline-formula[contains(.,'=')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($unequal-equal-text != '') and not(disp-formula[contains(.,'=')]) and not(inline-formula[contains(.,'=')])">
            <xsl:attribute name="id">cell-spacing-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains an equal sign with content directly next to one side, but a space on the other, is this correct? - <xsl:text/>
               <xsl:value-of select="$unequal-equal-text"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'\+cell[s]?|±cell[s]?') and not(descendant::p[matches(.,'\+cell[s]?|±cell[s]?')]) and not(descendant::td[matches(.,'\+cell[s]?|±cell[s]?')]) and not(descendant::th[matches(.,'\+cell[s]?|±cell[s]?')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'\+cell[s]?|±cell[s]?') and not(descendant::p[matches(.,'\+cell[s]?|±cell[s]?')]) and not(descendant::td[matches(.,'\+cell[s]?|±cell[s]?')]) and not(descendant::th[matches(.,'\+cell[s]?|±cell[s]?')])">
            <xsl:attribute name="id">equal-spacing-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the text '+cells' or '±cells' which is very likely to be incorrect spacing - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'˚') and not(descendant::p[matches(.,'˚')]) and not(descendant::td[matches(.,'˚')]) and not(descendant::th[matches(.,'˚')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'˚') and not(descendant::p[matches(.,'˚')]) and not(descendant::td[matches(.,'˚')]) and not(descendant::th[matches(.,'˚')])">
            <xsl:attribute name="id">ring-diacritic-symbol-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>'<xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>' element contains the ring above symbol, '∘'. Should this be a (non-superscript) degree symbol - ° - instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'[Ttype]\s?[Oo]ne\s?[Dd]iabetes') and not(descendant::p[matches(.,'[Ttype]\s?[Oo]ne\s?[Dd]iabetes')]) and not(descendant::td[matches(.,'[Ttype]\s?[Oo]ne\s?[Dd]iabetes')]) and not(descendant::th[matches(.,'[Ttype]\s?[Oo]ne\s?[Dd]iabetes')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'[Ttype]\s?[Oo]ne\s?[Dd]iabetes') and not(descendant::p[matches(.,'[Ttype]\s?[Oo]ne\s?[Dd]iabetes')]) and not(descendant::td[matches(.,'[Ttype]\s?[Oo]ne\s?[Dd]iabetes')]) and not(descendant::th[matches(.,'[Ttype]\s?[Oo]ne\s?[Dd]iabetes')])">
            <xsl:attribute name="id">diabetes-1-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>'<xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>' element contains the phrase 'Type one diabetes'. The number should not be spelled out, this should be 'Type 1 diabetes'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'[Ttype]\s?[Tt]wo\s?[Dd]iabetes') and not(descendant::p[matches(.,'[Ttype]\s?[Tt]wo\s?[Dd]iabetes')]) and not(descendant::td[matches(.,'[Ttype]\s?[Tt]wo\s?[Dd]iabetes')]) and not(descendant::th[matches(.,'[Ttype]\s?[Tt]wo\s?[Dd]iabetes')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'[Ttype]\s?[Tt]wo\s?[Dd]iabetes') and not(descendant::p[matches(.,'[Ttype]\s?[Tt]wo\s?[Dd]iabetes')]) and not(descendant::td[matches(.,'[Ttype]\s?[Tt]wo\s?[Dd]iabetes')]) and not(descendant::th[matches(.,'[Ttype]\s?[Tt]wo\s?[Dd]iabetes')])">
            <xsl:attribute name="id">diabetes-2-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>'<xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>' element contains the phrase 'Type two diabetes'. The number should not be spelled out, this should be 'Type 2 diabetes'</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M260"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M260"/>
   <xsl:template match="@*|node()" priority="-2" mode="M260">
      <xsl:apply-templates select="*" mode="M260"/>
   </xsl:template>

   <!--PATTERN duplicate-ref-pattern-->


	  <!--RULE duplicate-ref-->
   <xsl:template match="ref-list//ref" priority="1000" mode="M261">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="ref-list//ref"
                       id="duplicate-ref"/>
      <xsl:variable name="doi" select="element-citation/pub-id[@pub-id-type='doi']"/>
      <xsl:variable name="a-title" select="element-citation/article-title"/>
      <xsl:variable name="c-title" select="element-citation/chapter-title"/>
      <xsl:variable name="source" select="element-citation/source"/>
      <xsl:variable name="top-doi"
                    select="ancestor::article//article-meta/article-id[@pub-id-type='doi']"/>

		    <!--REPORT error-->
      <xsl:if test="(element-citation/@publication-type != 'book') and ($doi = preceding-sibling::ref/element-citation/pub-id[@pub-id-type='doi'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(element-citation/@publication-type != 'book') and ($doi = preceding-sibling::ref/element-citation/pub-id[@pub-id-type='doi'])">
            <xsl:attribute name="id">duplicate-ref-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="@id"/>
               <xsl:text/>' has the same doi as another reference, which is incorrect. Is it a duplicate?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(element-citation/@publication-type = 'book') and  ($doi = preceding-sibling::ref/element-citation/pub-id[@pub-id-type='doi'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(element-citation/@publication-type = 'book') and ($doi = preceding-sibling::ref/element-citation/pub-id[@pub-id-type='doi'])">
            <xsl:attribute name="id">duplicate-ref-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="@id"/>
               <xsl:text/>' has the same doi as another reference, which might be incorrect. If they are not different chapters from the same book, then this is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="some $x in preceding-sibling::ref/element-citation satisfies (         (($x/article-title = $a-title) and ($x/source = $source))         or          (($x/chapter-title = $c-title) and ($x/source = $source))         )">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="some $x in preceding-sibling::ref/element-citation satisfies ( (($x/article-title = $a-title) and ($x/source = $source)) or (($x/chapter-title = $c-title) and ($x/source = $source)) )">
            <xsl:attribute name="id">duplicate-ref-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="@id"/>
               <xsl:text/>' has the same title and source as another reference, which must be incorrect - '<xsl:text/>
               <xsl:value-of select="$a-title"/>
               <xsl:text/>', '<xsl:text/>
               <xsl:value-of select="$source"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="some $x in preceding-sibling::ref/element-citation satisfies (         (($x/article-title = $a-title) and not($x/source = $source))         or          (($x/chapter-title = $c-title) and not($x/source = $source))         )">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="some $x in preceding-sibling::ref/element-citation satisfies ( (($x/article-title = $a-title) and not($x/source = $source)) or (($x/chapter-title = $c-title) and not($x/source = $source)) )">
            <xsl:attribute name="id">duplicate-ref-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="@id"/>
               <xsl:text/>' has the same title as another reference, but a different source. Is this correct? - '<xsl:text/>
               <xsl:value-of select="$a-title"/>
               <xsl:text/>'</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="$top-doi = $doi">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$top-doi = $doi">
            <xsl:attribute name="id">duplicate-ref-test-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a doi which is the same as the article itself '<xsl:text/>
               <xsl:value-of select="$top-doi"/>
               <xsl:text/>' which must be incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M261"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M261"/>
   <xsl:template match="@*|node()" priority="-2" mode="M261">
      <xsl:apply-templates select="*" mode="M261"/>
   </xsl:template>

   <!--PATTERN ref-xref-conformance-pattern-->


	  <!--RULE ref-xref-conformance-->
   <xsl:template match="xref[@ref-type='bibr']" priority="1000" mode="M262">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="xref[@ref-type='bibr']"
                       id="ref-xref-conformance"/>
      <xsl:variable name="rid" select="@rid"/>
      <xsl:variable name="ref"
                    select="ancestor::article//descendant::ref-list//ref[@id = $rid]"/>
      <xsl:variable name="cite1" select="e:citation-format1($ref//year)"/>
      <xsl:variable name="cite2" select="e:citation-format2($ref//year)"/>
      <xsl:variable name="cite3" select="normalize-space(replace($cite1,'\p{P}|\p{N}',''))"/>
      <xsl:variable name="pre-text"
                    select="replace(replace(replace(replace(preceding-sibling::text()[1],' ',' '),' et al\. ',' et al '),'e\.g\.','eg '),'i\.e\. ','ie ')"/>
      <xsl:variable name="post-text"
                    select="replace(replace(replace(replace(following-sibling::text()[1],' ',' '),' et al\. ',' et al '),'e\.g\.','eg '),'i\.e\. ','ie ')"/>
      <xsl:variable name="pre-sentence"
                    select="tokenize($pre-text,'\. ')[position() = last()]"/>
      <xsl:variable name="post-sentence"
                    select="tokenize($post-text,'\. ')[position() = 1]"/>
      <xsl:variable name="open" select="string-length(replace($pre-sentence,'[^\(]',''))"/>
      <xsl:variable name="close" select="string-length(replace($pre-sentence,'[^\)]',''))"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="replace(.,' ',' ') = ($cite1,$cite2)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="replace(.,' ',' ') = ($cite1,$cite2)">
               <xsl:attribute name="id">ref-xref-test-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>
                  <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> - citation does not conform to house style. It should be '<xsl:text/>
                  <xsl:value-of select="$cite1"/>
                  <xsl:text/>' or '<xsl:text/>
                  <xsl:value-of select="$cite2"/>
                  <xsl:text/>'. Preceding text = '<xsl:text/>
                  <xsl:value-of select="substring(preceding-sibling::text()[1],string-length(preceding-sibling::text()[1])-25)"/>
                  <xsl:text/>'.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-text,'[\p{L}\p{N}\p{M}\p{Pe},;]$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($pre-text,'[\p{L}\p{N}\p{M}\p{Pe},;]$')">
            <xsl:attribute name="id">ref-xref-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>There is no space between citation and the preceding text - <xsl:text/>
               <xsl:value-of select="concat(substring($pre-text,string-length($pre-text)-15),.)"/>
               <xsl:text/> - Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($post-text,'^[\p{L}\p{N}\p{M}\p{Ps}]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($post-text,'^[\p{L}\p{N}\p{M}\p{Ps}]')">
            <xsl:attribute name="id">ref-xref-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>There is no space between citation and the following text - <xsl:text/>
               <xsl:value-of select="concat(.,substring($post-text,1,15))"/>
               <xsl:text/> - Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(normalize-space(.),'\p{N}')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(normalize-space(.),'\p{N}')">
               <xsl:attribute name="id">ref-xref-test-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>citation doesn't contain numbers, which must be incorrect - <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> 
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(normalize-space(.),'\p{L}')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="matches(normalize-space(.),'\p{L}')">
               <xsl:attribute name="id">ref-xref-test-5</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>citation doesn't contain letters, which must be incorrect - <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> 
               </svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="matches($pre-text,'\($|\[$') and (. = $cite2)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($pre-text,'\($|\[$') and (. = $cite2)">
            <xsl:attribute name="id">ref-xref-test-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="concat(substring($pre-text, string-length($pre-text), 1),.)"/>
               <xsl:text/> - citation is in non-parenthetic style, but the preceding text ends with open parentheses, so this isn't correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($post-text,'^\)|^\]') and (. = $cite2)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($post-text,'^\)|^\]') and (. = $cite2)">
            <xsl:attribute name="id">ref-xref-test-7</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="concat(.,substring($post-text,1,1))"/>
               <xsl:text/> - citation is in non-parenthetic style, but the following text ends with closing parentheses, so this isn't correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($open gt $close) and (. = $cite2)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($open gt $close) and (. = $cite2)">
            <xsl:attribute name="id">ref-xref-test-8</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="concat(substring($pre-text,string-length($pre-text)-10),.)"/>
               <xsl:text/> - citation is in non-parenthetic style, but the preceding text has open parentheses. Should it be in the style of <xsl:text/>
               <xsl:value-of select="$cite1"/>
               <xsl:text/>?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(($open - $close) gt 1) and (. = $cite1)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(($open - $close) gt 1) and (. = $cite1)">
            <xsl:attribute name="id">ref-xref-test-9</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>sentence before citation has more open brackets than closed - <xsl:text/>
               <xsl:value-of select="concat($pre-sentence,.)"/>
               <xsl:text/> - Either one of the brackets is unnecessary or the citation should be in square brackets - <xsl:text/>
               <xsl:value-of select="concat('[',.,']')"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(         (matches($pre-sentence,' from [\(]{1}$| in [\(]{1}$| by [\(]{1}$| of [\(]{1}$| on [\(]{1}$| to [\(]{1}$| see [\(]{1}$| see also [\(]{1}$| at [\(]{1}$') and (($open - $close) = 1))           or         (matches($pre-sentence,' from [\(]{1}$| in [\(]{1}$| by [\(]{1}$| of [\(]{1}$| on [\(]{1}$| to [\(]{1}$| see [\(]{1}$| see also [\(]{1}$| at [\(]{1}$') and (($open - $close) = 0) and matches($pre-sentence,'^[\)]'))           or          (matches($pre-sentence,' from $| in $| by $| of $| on $| to $| see $| see also $| at $') and (($open - $close) = 0) and not(matches($pre-sentence,'^[\)]')))           or         (matches($pre-sentence,' from $| in $| by $| of $| on $| to $| see $| see also $| at $') and (($open - $close) lt 0))          )         and (. = $cite1)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="( (matches($pre-sentence,' from [\(]{1}$| in [\(]{1}$| by [\(]{1}$| of [\(]{1}$| on [\(]{1}$| to [\(]{1}$| see [\(]{1}$| see also [\(]{1}$| at [\(]{1}$') and (($open - $close) = 1)) or (matches($pre-sentence,' from [\(]{1}$| in [\(]{1}$| by [\(]{1}$| of [\(]{1}$| on [\(]{1}$| to [\(]{1}$| see [\(]{1}$| see also [\(]{1}$| at [\(]{1}$') and (($open - $close) = 0) and matches($pre-sentence,'^[\)]')) or (matches($pre-sentence,' from $| in $| by $| of $| on $| to $| see $| see also $| at $') and (($open - $close) = 0) and not(matches($pre-sentence,'^[\)]'))) or (matches($pre-sentence,' from $| in $| by $| of $| on $| to $| see $| see also $| at $') and (($open - $close) lt 0)) ) and (. = $cite1)">
            <xsl:attribute name="id">ref-xref-test-11</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="concat(substring($pre-text,string-length($pre-text)-10),.)"/>
               <xsl:text/> - citation is in parenthetic style, but the preceding text ends with '<xsl:text/>
               <xsl:value-of select="substring($pre-text,string-length($pre-text)-6)"/>
               <xsl:text/>' which suggests it should be in the style - <xsl:text/>
               <xsl:value-of select="$cite2"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="((matches($post-text,'^[,]? who') and not(matches($pre-text,'[\(]+')))         or (matches($post-text,'^[\),]? who') and matches($pre-sentence,'^\($')))         and (. = $cite1)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="((matches($post-text,'^[,]? who') and not(matches($pre-text,'[\(]+'))) or (matches($post-text,'^[\),]? who') and matches($pre-sentence,'^\($'))) and (. = $cite1)">
            <xsl:attribute name="id">ref-xref-test-12</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="concat(.,substring($post-text,1,10))"/>
               <xsl:text/> - citation is in parenthetic style, but the following text begins with 'who', which suggests it should be in the style - <xsl:text/>
               <xsl:value-of select="$cite2"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="((matches($post-text,'^[,]? have') and not(matches($pre-text,'[\(]+')))         or (matches($post-text,'^[\),]? have') and matches($pre-sentence,'^\($')))         and (. = $cite1)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="((matches($post-text,'^[,]? have') and not(matches($pre-text,'[\(]+'))) or (matches($post-text,'^[\),]? have') and matches($pre-sentence,'^\($'))) and (. = $cite1)">
            <xsl:attribute name="id">ref-xref-test-13</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="concat(.,substring($post-text,1,10))"/>
               <xsl:text/> - citation is in parenthetic style, but the following text begins with 'have', which suggests it should be in the style - <xsl:text/>
               <xsl:value-of select="$cite2"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-sentence,$cite3)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($pre-sentence,$cite3)">
            <xsl:attribute name="id">ref-xref-test-14</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>citation is preceded by text containing much of the citation text which is possibly unnecessary - <xsl:text/>
               <xsl:value-of select="concat($pre-sentence,.)"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($post-sentence,$cite3)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($post-sentence,$cite3)">
            <xsl:attribute name="id">ref-xref-test-15</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>citation is followed by text containing much of the citation text. Is this correct? - <xsl:text/>
               <xsl:value-of select="concat(.,$post-sentence)"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($post-sentence,'^[\)][\)]+')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($post-sentence,'^[\)][\)]+')">
            <xsl:attribute name="id">ref-xref-test-16</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>citation is followed by text starting with 2 or more closing brackets, which must be incorrect - <xsl:text/>
               <xsl:value-of select="concat(.,$post-sentence)"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(not(matches($pre-sentence,'[\(]$|\[$|^[\)]'))) and (not(matches($pre-text,'; $| and $| see $|cf\. $'))) and (($open - $close) = 0) and (. = $cite1) and not(ancestor::td) and not(ancestor::th) and not(matches($post-sentence,'^[\)]'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(not(matches($pre-sentence,'[\(]$|\[$|^[\)]'))) and (not(matches($pre-text,'; $| and $| see $|cf\. $'))) and (($open - $close) = 0) and (. = $cite1) and not(ancestor::td) and not(ancestor::th) and not(matches($post-sentence,'^[\)]'))">
            <xsl:attribute name="id">ref-xref-test-17</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>citation is in parenthetic format - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - but the preceding text does not contain open parentheses. Should it be in the format - <xsl:text/>
               <xsl:value-of select="$cite2"/>
               <xsl:text/>?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($pre-sentence = ', ') and (($open - $close) = 0) and (. = $cite1) and not(ancestor::td)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($pre-sentence = ', ') and (($open - $close) = 0) and (. = $cite1) and not(ancestor::td)">
            <xsl:attribute name="id">ref-xref-test-18</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>citation is in parenthetic format, but the preceding text is ', ' . Should the preceding text be '; ' instead? <xsl:text/>
               <xsl:value-of select="concat($pre-sentence,.)"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'^et al|^ and|^[\(]\d|^,')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'^et al|^ and|^[\(]\d|^,')">
            <xsl:attribute name="id">ref-xref-test-19</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - citation doesn't start with an author's name which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($post-text,'^[\)];\s?$') and (following-sibling::*[1]/local-name() = 'xref')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($post-text,'^[\)];\s?$') and (following-sibling::*[1]/local-name() = 'xref')">
            <xsl:attribute name="id">ref-xref-test-20</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>citation is followed by ');', which in turn is followed by another link. This must be incorrect (the bracket should be removed) - '<xsl:text/>
               <xsl:value-of select="concat(.,$post-sentence,following-sibling::*[1])"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-sentence,'[A-Za-z0-9][\(]$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($pre-sentence,'[A-Za-z0-9][\(]$')">
            <xsl:attribute name="id">ref-xref-test-21</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>citation is preceded by a letter or number immediately followed by '('. Is there a space missing before the '('?  - '<xsl:text/>
               <xsl:value-of select="concat($pre-sentence,.)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($post-sentence,'^[\)][A-Za-z0-9]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($post-sentence,'^[\)][A-Za-z0-9]')">
            <xsl:attribute name="id">ref-xref-test-22</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>citation is followed by a ')' which in turns is immediately followed by a letter or number. Is there a space missing after the ')'?  - '<xsl:text/>
               <xsl:value-of select="concat(.,$post-sentence)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M262"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M262"/>
   <xsl:template match="@*|node()" priority="-2" mode="M262">
      <xsl:apply-templates select="*" mode="M262"/>
   </xsl:template>

   <!--PATTERN unlinked-ref-cite-pattern-->


	  <!--RULE unlinked-ref-cite-->
   <xsl:template match="ref-list/ref/element-citation" priority="1000" mode="M263">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="ref-list/ref/element-citation"
                       id="unlinked-ref-cite"/>
      <xsl:variable name="id" select="parent::ref/@id"/>
      <xsl:variable name="cite1" select="e:citation-format1(year)"/>
      <xsl:variable name="cite2" select="e:citation-format2(year)"/>
      <xsl:variable name="regex" select="concat($cite1,'|',$cite2)"/>

		    <!--REPORT error-->
      <xsl:if test="matches($article-text,$regex)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($article-text,$regex)">
            <xsl:attribute name="id">text-v-cite-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref with id <xsl:text/>
               <xsl:value-of select="$id"/>
               <xsl:text/> has unlinked citations in the text - search <xsl:text/>
               <xsl:value-of select="$cite1"/>
               <xsl:text/> or <xsl:text/>
               <xsl:value-of select="$cite2"/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M263"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M263"/>
   <xsl:template match="@*|node()" priority="-2" mode="M263">
      <xsl:apply-templates select="*" mode="M263"/>
   </xsl:template>

   <!--PATTERN missing-ref-cited-pattern-->


	  <!--RULE missing-ref-cited-->
   <xsl:template match="article[back/ref-list]" priority="1000" mode="M264">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article[back/ref-list]"
                       id="missing-ref-cited"/>
      <xsl:variable name="missing-ref-text"
                    select="replace($article-text,$ref-list-regex,'')"/>
      <xsl:variable name="missing-ref-regex"
                    select="'[A-Z][A-Za-z]+ et al\.?, [1][7-9][0-9][0-9]|[A-Z][A-Za-z]+ et al\.?, [2][0-2][0-9][0-9]|[A-Z][A-Za-z]+ et al\.? [\(]?[1][7-9][0-9][0-9][\)]?|[A-Z][A-Za-z]+ et al\.? [\(]?[1][7-9][0-9][0-9][\)]?'"/>

		    <!--REPORT warning-->
      <xsl:if test="matches($missing-ref-text,$missing-ref-regex)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($missing-ref-text,$missing-ref-regex)">
            <xsl:attribute name="id">missing-ref-in-text-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>There may be citations to missing references in the text - search - <xsl:text/>
               <xsl:value-of select="string-join(for $x in tokenize($missing-ref-text,'\. ')           return            if (matches($x,$missing-ref-regex)) then $x else (),' -- -- ')"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M264"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M264"/>
   <xsl:template match="@*|node()" priority="-2" mode="M264">
      <xsl:apply-templates select="*" mode="M264"/>
   </xsl:template>

   <!--PATTERN vid-xref-conformance-pattern-->


	  <!--RULE vid-xref-conformance-->
   <xsl:template match="xref[@ref-type='video']" priority="1000" mode="M265">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="xref[@ref-type='video']"
                       id="vid-xref-conformance"/>
      <xsl:variable name="rid" select="@rid"/>
      <xsl:variable name="target-no"
                    select="substring-after(ancestor::article//media[@mimetype='video'][@id = $rid]/label,'ideo ')"/>
      <xsl:variable name="pre-text" select="preceding-sibling::text()[1]"/>
      <xsl:variable name="post-text" select="following-sibling::text()[1]"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'\p{N}')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\p{N}')">
               <xsl:attribute name="id">vid-xref-conformity-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>
                  <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> - video citation does not contain any numbers which must be incorrect.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="contains(.,$target-no)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,$target-no)">
            <xsl:attribute name="id">vid-xref-conformity-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>video citation does not matches the video that it links to (taget video label number is <xsl:text/>
               <xsl:value-of select="$target-no"/>
               <xsl:text/>, but that number is not in the citation).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-text,'[\p{L}\p{N}\p{M}\p{Pe},;]$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($pre-text,'[\p{L}\p{N}\p{M}\p{Pe},;]$')">
            <xsl:attribute name="id">vid-xref-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>There is no space between citation and the preceding text - <xsl:text/>
               <xsl:value-of select="concat(substring($pre-text,string-length($pre-text)-15),.)"/>
               <xsl:text/> - Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($post-text,'^[\p{L}\p{N}\p{M}\p{Ps}]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($post-text,'^[\p{L}\p{N}\p{M}\p{Ps}]')">
            <xsl:attribute name="id">vid-xref-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>There is no space between citation and the following text - <xsl:text/>
               <xsl:value-of select="concat(.,substring($post-text,1,15))"/>
               <xsl:text/> - Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(ancestor::media[@mimetype='video']/@id = $rid)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(ancestor::media[@mimetype='video']/@id = $rid)">
            <xsl:attribute name="id">vid-xref-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - video citation is in the caption of the video that it links to. Is it correct or necessary?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(matches($post-text,'^ in $|^ from $|^ of $')) and (following-sibling::*[1]/@ref-type='bibr')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(matches($post-text,'^ in $|^ from $|^ of $')) and (following-sibling::*[1]/@ref-type='bibr')">
            <xsl:attribute name="id">vid-xref-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="concat(.,$post-text,following-sibling::*[1])"/>
               <xsl:text/> - Figure citation is in a reference to a figure from a different paper, and therefore must be unlinked.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-text,'[A-Za-z0-9][\(]$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($pre-text,'[A-Za-z0-9][\(]$')">
            <xsl:attribute name="id">vid-xref-test-6</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>citation is preceded by a letter or number immediately followed by '('. Is there a space missing before the '('?  - '<xsl:text/>
               <xsl:value-of select="concat($pre-text,.)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($post-text,'^[\)][A-Za-z0-9]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($post-text,'^[\)][A-Za-z0-9]')">
            <xsl:attribute name="id">vid-xref-test-7</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>citation is followed by a ')' which in turns is immediately followed by a letter or number. Is there a space missing after the ')'?  - '<xsl:text/>
               <xsl:value-of select="concat(.,$post-text)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M265"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M265"/>
   <xsl:template match="@*|node()" priority="-2" mode="M265">
      <xsl:apply-templates select="*" mode="M265"/>
   </xsl:template>

   <!--PATTERN fig-xref-conformance-pattern-->


	  <!--RULE fig-xref-conformance-->
   <xsl:template match="xref[@ref-type='fig']" priority="1000" mode="M266">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="xref[@ref-type='fig']"
                       id="fig-xref-conformance"/>
      <xsl:variable name="rid" select="@rid"/>
      <xsl:variable name="type" select="e:fig-id-type($rid)"/>
      <xsl:variable name="no" select="normalize-space(replace(.,'[^0-9]+',''))"/>
      <xsl:variable name="target-no" select="replace($rid,'[^0-9]+','')"/>
      <xsl:variable name="pre-text" select="preceding-sibling::text()[1]"/>
      <xsl:variable name="post-text" select="following-sibling::text()[1]"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'\p{N}')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\p{N}')">
               <xsl:attribute name="id">fig-xref-conformity-1</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>
                  <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> - figure citation does not contain any numbers which must be incorrect.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="($type = 'Figure') and not(contains($no,$target-no))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($type = 'Figure') and not(contains($no,$target-no))">
            <xsl:attribute name="id">fig-xref-conformity-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - figure citation does not appear to link to the same place as the content of the citation suggests it should.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type = 'Figure') and ($no != $target-no)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($type = 'Figure') and ($no != $target-no)">
            <xsl:attribute name="id">fig-xref-conformity-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - figure citation does not appear to link to the same place as the content of the citation suggests it should.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($type = 'Figure') and matches(.,'[Ss]upplement')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($type = 'Figure') and matches(.,'[Ss]upplement')">
            <xsl:attribute name="id">fig-xref-conformity-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - figure citation links to a figure, but it contains the string 'supplement'. It cannot be correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="($type = 'Figure supplement') and (not(matches(.,'[Ss]upplement'))) and (not(matches(preceding-sibling::text()[1],'–[\s]?$| and $| or $|,[\s]?$')))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($type = 'Figure supplement') and (not(matches(.,'[Ss]upplement'))) and (not(matches(preceding-sibling::text()[1],'–[\s]?$| and $| or $|,[\s]?$')))">
            <xsl:attribute name="id">fig-xref-conformity-5</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>figure citation stands alone, contains the text <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>, and links to a figure supplement, but it does not contain the string 'supplement'. Is it correct? Preceding text - '<xsl:text/>
               <xsl:value-of select="substring(preceding-sibling::text()[1],string-length(preceding-sibling::text()[1])-25)"/>
               <xsl:text/>'</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($type = 'Figure supplement') and ($target-no != $no) and not(contains($no,substring($target-no,2)))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($type = 'Figure supplement') and ($target-no != $no) and not(contains($no,substring($target-no,2)))">
            <xsl:attribute name="id">fig-xref-conformity-6</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>figure citation contains the text <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> but links to a figure supplement with the id <xsl:text/>
               <xsl:value-of select="$rid"/>
               <xsl:text/> which cannot be correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-text,'[\p{L}\p{N}\p{M}\p{Pe},;]$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($pre-text,'[\p{L}\p{N}\p{M}\p{Pe},;]$')">
            <xsl:attribute name="id">fig-xref-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>There is no space between citation and the preceding text - <xsl:text/>
               <xsl:value-of select="concat(substring($pre-text,string-length($pre-text)-15),.)"/>
               <xsl:text/> - Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($post-text,'^[\p{L}\p{N}\p{M}\p{Ps}]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($post-text,'^[\p{L}\p{N}\p{M}\p{Ps}]')">
            <xsl:attribute name="id">fig-xref-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>There is no space between citation and the following text - <xsl:text/>
               <xsl:value-of select="concat(.,substring($post-text,1,15))"/>
               <xsl:text/> - Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(ancestor::supplementary-material) and (ancestor::fig/@id = $rid)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="not(ancestor::supplementary-material) and (ancestor::fig/@id = $rid)">
            <xsl:attribute name="id">fig-xref-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - Figure citation is in the caption of the figure that it links to. Is it correct or necessary?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($type = 'Figure') and (matches($post-text,'^ in $|^ from $|^ of $')) and (following-sibling::*[1]/@ref-type='bibr')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($type = 'Figure') and (matches($post-text,'^ in $|^ from $|^ of $')) and (following-sibling::*[1]/@ref-type='bibr')">
            <xsl:attribute name="id">fig-xref-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="concat(.,$post-text,following-sibling::*[1])"/>
               <xsl:text/> - Figure citation is in a reference to a figure from a different paper, and therefore must be unlinked.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-text,'[A-Za-z0-9][\(]$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($pre-text,'[A-Za-z0-9][\(]$')">
            <xsl:attribute name="id">fig-xref-test-6</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>citation is preceded by a letter or number immediately followed by '('. Is there a space missing before the '('?  - '<xsl:text/>
               <xsl:value-of select="concat($pre-text,.)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($post-text,'^[\)][A-Za-z0-9]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($post-text,'^[\)][A-Za-z0-9]')">
            <xsl:attribute name="id">fig-xref-test-7</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>citation is followed by a ')' which in turns is immediately followed by a letter or number. Is there a space missing after the ')'?  - '<xsl:text/>
               <xsl:value-of select="concat(.,$post-text)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-text,'their $')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($pre-text,'their $')">
            <xsl:attribute name="id">fig-xref-test-8</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Figure citation is preceded by 'their'. Does this refer to a figure in other content (and as such should be captured as plain text)? - '<xsl:text/>
               <xsl:value-of select="concat($pre-text,.)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($post-text,'^ of [\p{Lu}][\p{Ll}]+[\-]?[\p{Ll}]? et al[\.]?')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($post-text,'^ of [\p{Lu}][\p{Ll}]+[\-]?[\p{Ll}]? et al[\.]?')">
            <xsl:attribute name="id">fig-xref-test-9</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Is this figure citation a reference to a figure from other content (and as such should be captured instead as plain text)? - <xsl:text/>
               <xsl:value-of select="concat(.,$post-text)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M266"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M266"/>
   <xsl:template match="@*|node()" priority="-2" mode="M266">
      <xsl:apply-templates select="*" mode="M266"/>
   </xsl:template>

   <!--PATTERN table-xref-conformance-pattern-->


	  <!--RULE table-xref-conformance-->
   <xsl:template match="xref[@ref-type='table']" priority="1000" mode="M267">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="xref[@ref-type='table']"
                       id="table-xref-conformance"/>
      <xsl:variable name="rid" select="@rid"/>
      <xsl:variable name="text-no" select="normalize-space(replace(.,'[^0-9]+',''))"/>
      <xsl:variable name="rid-no" select="replace($rid,'[^0-9]+','')"/>
      <xsl:variable name="pre-text" select="preceding-sibling::text()[1]"/>
      <xsl:variable name="post-text" select="following-sibling::text()[1]"/>

		    <!--REPORT warning-->
      <xsl:if test="not(matches(.,'Table')) and ($pre-text != ' and ') and ($pre-text != '–') and ($pre-text != ', ') and not(contains($rid,'app'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="not(matches(.,'Table')) and ($pre-text != ' and ') and ($pre-text != '–') and ($pre-text != ', ') and not(contains($rid,'app'))">
            <xsl:attribute name="id">table-xref-conformity-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - citation points to table, but does not include the string 'Table', which is very unusual.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(matches(.,'table')) and ($pre-text != ' and ') and ($pre-text != '–') and ($pre-text != ', ') and contains($rid,'app')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="not(matches(.,'table')) and ($pre-text != ' and ') and ($pre-text != '–') and ($pre-text != ', ') and contains($rid,'app')">
            <xsl:attribute name="id">table-xref-conformity-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - citation points to and Appendix table, but does not include the string 'table', which is very unusual.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(not(contains($rid,'app'))) and ($text-no != $rid-no) and not(contains(.,'–'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(not(contains($rid,'app'))) and ($text-no != $rid-no) and not(contains(.,'–'))">
            <xsl:attribute name="id">table-xref-conformity-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - Citation content does not match what it directs to.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(contains($rid,'app')) and (not(ends-with($text-no,substring($rid-no,2,1)))) and not(contains(.,'–'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(contains($rid,'app')) and (not(ends-with($text-no,substring($rid-no,2,1)))) and not(contains(.,'–'))">
            <xsl:attribute name="id">table-xref-conformity-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - Citation content does not match what it directs to.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(ancestor::table-wrap/@id = $rid) and not(ancestor::supplementary-material)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(ancestor::table-wrap/@id = $rid) and not(ancestor::supplementary-material)">
            <xsl:attribute name="id">table-xref-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - Citation is in the caption of the Table that it links to. Is it correct or necessary?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-text,'[A-Za-z0-9][\(]$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($pre-text,'[A-Za-z0-9][\(]$')">
            <xsl:attribute name="id">table-xref-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>citation is preceded by a letter or number immediately followed by '('. Is there a space missing before the '('?  - '<xsl:text/>
               <xsl:value-of select="concat($pre-text,.)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($post-text,'^[\)][A-Za-z0-9]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($post-text,'^[\)][A-Za-z0-9]')">
            <xsl:attribute name="id">table-xref-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>citation is followed by a ')' which in turns is immediately followed by a letter or number. Is there a space missing after the ')'?  - '<xsl:text/>
               <xsl:value-of select="concat(.,$post-text)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M267"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M267"/>
   <xsl:template match="@*|node()" priority="-2" mode="M267">
      <xsl:apply-templates select="*" mode="M267"/>
   </xsl:template>

   <!--PATTERN supp-file-xref-conformance-pattern-->


	  <!--RULE supp-file-xref-conformance-->
   <xsl:template match="xref[@ref-type='supplementary-material']"
                 priority="1000"
                 mode="M268">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="xref[@ref-type='supplementary-material']"
                       id="supp-file-xref-conformance"/>
      <xsl:variable name="rid" select="@rid"/>
      <xsl:variable name="text-no" select="normalize-space(replace(.,'[^0-9]+',''))"/>
      <xsl:variable name="last-text-no"
                    select="substring($text-no,string-length($text-no), 1)"/>
      <xsl:variable name="rid-no" select="replace($rid,'[^0-9]+','')"/>
      <xsl:variable name="last-rid-no" select="substring($rid-no,string-length($rid-no))"/>
      <xsl:variable name="pre-text" select="preceding-sibling::text()[1]"/>
      <xsl:variable name="post-text" select="following-sibling::text()[1]"/>

		    <!--REPORT warning-->
      <xsl:if test="contains($rid,'data') and not(matches(.,'[Ss]ource data')) and ($pre-text != ' and ') and ($pre-text != '–') and ($pre-text != ', ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="contains($rid,'data') and not(matches(.,'[Ss]ource data')) and ($pre-text != ' and ') and ($pre-text != '–') and ($pre-text != ', ')">
            <xsl:attribute name="id">supp-file-xref-conformity-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - citation points to source data, but does not include the string 'source data', which is very unusual.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains($rid,'code') and not(matches(.,'[Ss]ource code')) and ($pre-text != ' and ') and ($pre-text != '–') and ($pre-text != ', ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="contains($rid,'code') and not(matches(.,'[Ss]ource code')) and ($pre-text != ' and ') and ($pre-text != '–') and ($pre-text != ', ')">
            <xsl:attribute name="id">supp-file-xref-conformity-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - citation points to source code, but does not include the string 'source code', which is very unusual.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains($rid,'supp') and not(matches(.,'[Ss]upplementary file')) and ($pre-text != ' and ') and ($pre-text != '–') and ($pre-text != ', ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="contains($rid,'supp') and not(matches(.,'[Ss]upplementary file')) and ($pre-text != ' and ') and ($pre-text != '–') and ($pre-text != ', ')">
            <xsl:attribute name="id">supp-file-xref-conformity-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - citation points to a supplementary file, but does not include the string 'Supplementary file', which is very unusual.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="contains(.,$last-rid-no)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,$last-rid-no)">
               <xsl:attribute name="id">supp-file-xref-conformity-4</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>
                  <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> - It looks like the citation content does not match what it directs to.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="$last-text-no = $last-rid-no"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="$last-text-no = $last-rid-no">
               <xsl:attribute name="id">supp-file-xref-conformity-5</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>
                  <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/> - It looks like the citation content does not match what it directs to. Check that it is correct.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="ancestor::supplementary-material/@id = $rid">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="ancestor::supplementary-material/@id = $rid">
            <xsl:attribute name="id">supp-file-xref-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - Citation is in the caption of the Supplementary file that it links to. Is it correct or necessary?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($pre-text,'[A-Za-z0-9][\(]$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($pre-text,'[A-Za-z0-9][\(]$')">
            <xsl:attribute name="id">supp-xref-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>citation is preceded by a letter or number immediately followed by '('. Is there a space missing before the '('?  - '<xsl:text/>
               <xsl:value-of select="concat($pre-text,.)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($post-text,'^[\)][A-Za-z0-9]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($post-text,'^[\)][A-Za-z0-9]')">
            <xsl:attribute name="id">supp-xref-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>citation is followed by a ')' which in turns is immediately followed by a letter or number. Is there a space missing after the ')'?  - '<xsl:text/>
               <xsl:value-of select="concat(.,$post-text)"/>
               <xsl:text/>'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M268"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M268"/>
   <xsl:template match="@*|node()" priority="-2" mode="M268">
      <xsl:apply-templates select="*" mode="M268"/>
   </xsl:template>

   <!--PATTERN equation-xref-conformance-pattern-->


	  <!--RULE equation-xref-conformance-->
   <xsl:template match="xref[@ref-type='disp-formula']" priority="1000" mode="M269">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="xref[@ref-type='disp-formula']"
                       id="equation-xref-conformance"/>
      <xsl:variable name="rid" select="@rid"/>
      <xsl:variable name="label"
                    select="translate(ancestor::article//disp-formula[@id = $rid]/label,'()','')"/>
      <xsl:variable name="prec-text" select="preceding-sibling::text()[1]"/>

		    <!--REPORT warning-->
      <xsl:if test="not(matches(.,'[Ee]quation')) and ($prec-text != ' and ') and ($prec-text != '–')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="not(matches(.,'[Ee]quation')) and ($prec-text != ' and ') and ($prec-text != '–')">
            <xsl:attribute name="id">equ-xref-conformity-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - link points to equation, but does not include the string 'Equation', which is unusual. Is it correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="contains(.,$label)"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,$label)">
               <xsl:attribute name="id">equ-xref-conformity-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>
                  <xsl:text/>
                  <xsl:value-of select="$label"/>
                  <xsl:text/> - equation link content does not match what it directs to. Check that it is correct.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M269"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M269"/>
   <xsl:template match="@*|node()" priority="-2" mode="M269">
      <xsl:apply-templates select="*" mode="M269"/>
   </xsl:template>

   <!--PATTERN org-ref-article-book-title-pattern-->


	  <!--RULE org-ref-article-book-title-->
   <xsl:template match="element-citation[@publication-type='journal']/article-title"
                 priority="1000"
                 mode="M270">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='journal']/article-title"
                       id="org-ref-article-book-title"/>
      <xsl:variable name="lc" select="lower-case(.)"/>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'b\.\s?subtilis') and not(italic[contains(text() ,'B. subtilis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'b\.\s?subtilis') and not(italic[contains(text() ,'B. subtilis')])">
            <xsl:attribute name="id">bssubtilis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'B. subtilis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'bacillus\s?subtilis') and not(italic[contains(text() ,'Bacillus subtilis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'bacillus\s?subtilis') and not(italic[contains(text() ,'Bacillus subtilis')])">
            <xsl:attribute name="id">bacillusssubtilis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Bacillus subtilis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'d\.\s?melanogaster') and not(italic[contains(text() ,'D. melanogaster')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'d\.\s?melanogaster') and not(italic[contains(text() ,'D. melanogaster')])">
            <xsl:attribute name="id">dsmelanogaster-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'D. melanogaster' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'drosophila\s?melanogaster') and not(italic[contains(text() ,'Drosophila melanogaster')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'drosophila\s?melanogaster') and not(italic[contains(text() ,'Drosophila melanogaster')])">
            <xsl:attribute name="id">drosophilasmelanogaster-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Drosophila melanogaster' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'e\.\s?coli') and not(italic[contains(text() ,'E. coli')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'e\.\s?coli') and not(italic[contains(text() ,'E. coli')])">
            <xsl:attribute name="id">escoli-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'E. coli' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'escherichia\s?coli') and not(italic[contains(text() ,'Escherichia coli')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'escherichia\s?coli') and not(italic[contains(text() ,'Escherichia coli')])">
            <xsl:attribute name="id">escherichiascoli-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Escherichia coli' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\s?pombe') and not(italic[contains(text() ,'S. pombe')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'s\.\s?pombe') and not(italic[contains(text() ,'S. pombe')])">
            <xsl:attribute name="id">sspombe-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'S. pombe' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'schizosaccharomyces\s?pombe') and not(italic[contains(text() ,'Schizosaccharomyces pombe')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'schizosaccharomyces\s?pombe') and not(italic[contains(text() ,'Schizosaccharomyces pombe')])">
            <xsl:attribute name="id">schizosaccharomycesspombe-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Schizosaccharomyces pombe' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\s?cerevisiae') and not(italic[contains(text() ,'S. cerevisiae')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'s\.\s?cerevisiae') and not(italic[contains(text() ,'S. cerevisiae')])">
            <xsl:attribute name="id">sscerevisiae-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'S. cerevisiae' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'saccharomyces\s?cerevisiae') and not(italic[contains(text() ,'Saccharomyces cerevisiae')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'saccharomyces\s?cerevisiae') and not(italic[contains(text() ,'Saccharomyces cerevisiae')])">
            <xsl:attribute name="id">saccharomycesscerevisiae-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Saccharomyces cerevisiae' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'c\.\s?elegans') and not(italic[contains(text() ,'C. elegans')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'c\.\s?elegans') and not(italic[contains(text() ,'C. elegans')])">
            <xsl:attribute name="id">cselegans-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'C. elegans' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'caenorhabditis\s?elegans') and not(italic[contains(text() ,'Caenorhabditis elegans')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'caenorhabditis\s?elegans') and not(italic[contains(text() ,'Caenorhabditis elegans')])">
            <xsl:attribute name="id">caenorhabditisselegans-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Caenorhabditis elegans' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'a\.\s?thaliana') and not(italic[contains(text() ,'A. thaliana')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'a\.\s?thaliana') and not(italic[contains(text() ,'A. thaliana')])">
            <xsl:attribute name="id">asthaliana-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'A. thaliana' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'arabidopsis\s?thaliana') and not(italic[contains(text() ,'Arabidopsis thaliana')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'arabidopsis\s?thaliana') and not(italic[contains(text() ,'Arabidopsis thaliana')])">
            <xsl:attribute name="id">arabidopsissthaliana-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Arabidopsis thaliana' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'m\.\s?thermophila') and not(italic[contains(text() ,'M. thermophila')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'m\.\s?thermophila') and not(italic[contains(text() ,'M. thermophila')])">
            <xsl:attribute name="id">msthermophila-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'M. thermophila' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'myceliophthora\s?thermophila') and not(italic[contains(text() ,'Myceliophthora thermophila')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'myceliophthora\s?thermophila') and not(italic[contains(text() ,'Myceliophthora thermophila')])">
            <xsl:attribute name="id">myceliophthorasthermophila-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Myceliophthora thermophila' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'dictyostelium') and not(italic[contains(text() ,'Dictyostelium')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'dictyostelium') and not(italic[contains(text() ,'Dictyostelium')])">
            <xsl:attribute name="id">dictyostelium-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Dictyostelium' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'p\.\s?falciparum') and not(italic[contains(text() ,'P. falciparum')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'p\.\s?falciparum') and not(italic[contains(text() ,'P. falciparum')])">
            <xsl:attribute name="id">psfalciparum-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'P. falciparum' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'plasmodium\s?falciparum') and not(italic[contains(text() ,'Plasmodium falciparum')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'plasmodium\s?falciparum') and not(italic[contains(text() ,'Plasmodium falciparum')])">
            <xsl:attribute name="id">plasmodiumsfalciparum-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Plasmodium falciparum' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\s?enterica') and not(italic[contains(text() ,'S. enterica')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'s\.\s?enterica') and not(italic[contains(text() ,'S. enterica')])">
            <xsl:attribute name="id">ssenterica-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'S. enterica' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'salmonella\s?enterica') and not(italic[contains(text() ,'Salmonella enterica')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'salmonella\s?enterica') and not(italic[contains(text() ,'Salmonella enterica')])">
            <xsl:attribute name="id">salmonellasenterica-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Salmonella enterica' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\s?pyogenes') and not(italic[contains(text() ,'S. pyogenes')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'s\.\s?pyogenes') and not(italic[contains(text() ,'S. pyogenes')])">
            <xsl:attribute name="id">sspyogenes-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'S. pyogenes' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'streptococcus\s?pyogenes') and not(italic[contains(text() ,'Streptococcus pyogenes')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'streptococcus\s?pyogenes') and not(italic[contains(text() ,'Streptococcus pyogenes')])">
            <xsl:attribute name="id">streptococcusspyogenes-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Streptococcus pyogenes' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'p\.\s?dumerilii') and not(italic[contains(text() ,'P. dumerilii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'p\.\s?dumerilii') and not(italic[contains(text() ,'P. dumerilii')])">
            <xsl:attribute name="id">psdumerilii-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'P. dumerilii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'platynereis\s?dumerilii') and not(italic[contains(text() ,'Platynereis dumerilii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'platynereis\s?dumerilii') and not(italic[contains(text() ,'Platynereis dumerilii')])">
            <xsl:attribute name="id">platynereissdumerilii-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Platynereis dumerilii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'p\.\s?cynocephalus') and not(italic[contains(text() ,'P. cynocephalus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'p\.\s?cynocephalus') and not(italic[contains(text() ,'P. cynocephalus')])">
            <xsl:attribute name="id">pscynocephalus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'P. cynocephalus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'papio\s?cynocephalus') and not(italic[contains(text() ,'Papio cynocephalus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'papio\s?cynocephalus') and not(italic[contains(text() ,'Papio cynocephalus')])">
            <xsl:attribute name="id">papioscynocephalus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Papio cynocephalus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'o\.\s?fasciatus') and not(italic[contains(text() ,'O. fasciatus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'o\.\s?fasciatus') and not(italic[contains(text() ,'O. fasciatus')])">
            <xsl:attribute name="id">osfasciatus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'O. fasciatus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'oncopeltus\s?fasciatus') and not(italic[contains(text() ,'Oncopeltus fasciatus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'oncopeltus\s?fasciatus') and not(italic[contains(text() ,'Oncopeltus fasciatus')])">
            <xsl:attribute name="id">oncopeltussfasciatus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Oncopeltus fasciatus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'n\.\s?crassa') and not(italic[contains(text() ,'N. crassa')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'n\.\s?crassa') and not(italic[contains(text() ,'N. crassa')])">
            <xsl:attribute name="id">nscrassa-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'N. crassa' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'neurospora\s?crassa') and not(italic[contains(text() ,'Neurospora crassa')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'neurospora\s?crassa') and not(italic[contains(text() ,'Neurospora crassa')])">
            <xsl:attribute name="id">neurosporascrassa-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Neurospora crassa' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'c\.\s?intestinalis') and not(italic[contains(text() ,'C. intestinalis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'c\.\s?intestinalis') and not(italic[contains(text() ,'C. intestinalis')])">
            <xsl:attribute name="id">csintestinalis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'C. intestinalis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'ciona\s?intestinalis') and not(italic[contains(text() ,'Ciona intestinalis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'ciona\s?intestinalis') and not(italic[contains(text() ,'Ciona intestinalis')])">
            <xsl:attribute name="id">cionasintestinalis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Ciona intestinalis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'e\.\s?cuniculi') and not(italic[contains(text() ,'E. cuniculi')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'e\.\s?cuniculi') and not(italic[contains(text() ,'E. cuniculi')])">
            <xsl:attribute name="id">escuniculi-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'E. cuniculi' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'encephalitozoon\s?cuniculi') and not(italic[contains(text() ,'Encephalitozoon cuniculi')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'encephalitozoon\s?cuniculi') and not(italic[contains(text() ,'Encephalitozoon cuniculi')])">
            <xsl:attribute name="id">encephalitozoonscuniculi-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Encephalitozoon cuniculi' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'h\.\s?salinarum') and not(italic[contains(text() ,'H. salinarum')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'h\.\s?salinarum') and not(italic[contains(text() ,'H. salinarum')])">
            <xsl:attribute name="id">hssalinarum-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'H. salinarum' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'halobacterium\s?salinarum') and not(italic[contains(text() ,'Halobacterium salinarum')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'halobacterium\s?salinarum') and not(italic[contains(text() ,'Halobacterium salinarum')])">
            <xsl:attribute name="id">halobacteriumssalinarum-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Halobacterium salinarum' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\s?solfataricus') and not(italic[contains(text() ,'S. solfataricus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'s\.\s?solfataricus') and not(italic[contains(text() ,'S. solfataricus')])">
            <xsl:attribute name="id">sssolfataricus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'S. solfataricus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'sulfolobus\s?solfataricus') and not(italic[contains(text() ,'Sulfolobus solfataricus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'sulfolobus\s?solfataricus') and not(italic[contains(text() ,'Sulfolobus solfataricus')])">
            <xsl:attribute name="id">sulfolobusssolfataricus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Sulfolobus solfataricus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\s?mediterranea') and not(italic[contains(text() ,'S. mediterranea')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'s\.\s?mediterranea') and not(italic[contains(text() ,'S. mediterranea')])">
            <xsl:attribute name="id">ssmediterranea-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'S. mediterranea' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'schmidtea\s?mediterranea') and not(italic[contains(text() ,'Schmidtea mediterranea')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'schmidtea\s?mediterranea') and not(italic[contains(text() ,'Schmidtea mediterranea')])">
            <xsl:attribute name="id">schmidteasmediterranea-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Schmidtea mediterranea' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\s?rosetta') and not(italic[contains(text() ,'S. rosetta')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'s\.\s?rosetta') and not(italic[contains(text() ,'S. rosetta')])">
            <xsl:attribute name="id">ssrosetta-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'S. rosetta' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'salpingoeca\s?rosetta') and not(italic[contains(text() ,'Salpingoeca rosetta')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'salpingoeca\s?rosetta') and not(italic[contains(text() ,'Salpingoeca rosetta')])">
            <xsl:attribute name="id">salpingoecasrosetta-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Salpingoeca rosetta' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'n\.\s?vectensis') and not(italic[contains(text() ,'N. vectensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'n\.\s?vectensis') and not(italic[contains(text() ,'N. vectensis')])">
            <xsl:attribute name="id">nsvectensis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'N. vectensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'nematostella\s?vectensis') and not(italic[contains(text() ,'Nematostella vectensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'nematostella\s?vectensis') and not(italic[contains(text() ,'Nematostella vectensis')])">
            <xsl:attribute name="id">nematostellasvectensis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Nematostella vectensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\s?aureus') and not(italic[contains(text() ,'S. aureus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'s\.\s?aureus') and not(italic[contains(text() ,'S. aureus')])">
            <xsl:attribute name="id">ssaureus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'S. aureus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'staphylococcus\s?aureus') and not(italic[contains(text() ,'Staphylococcus aureus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'staphylococcus\s?aureus') and not(italic[contains(text() ,'Staphylococcus aureus')])">
            <xsl:attribute name="id">staphylococcussaureus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Staphylococcus aureus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'v\.\s?cholerae') and not(italic[contains(text() ,'V. cholerae')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'v\.\s?cholerae') and not(italic[contains(text() ,'V. cholerae')])">
            <xsl:attribute name="id">vscholerae-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'V. cholerae' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'vibrio\s?cholerae') and not(italic[contains(text() ,'Vibrio cholerae')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'vibrio\s?cholerae') and not(italic[contains(text() ,'Vibrio cholerae')])">
            <xsl:attribute name="id">vibrioscholerae-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Vibrio cholerae' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'t\.\s?thermophila') and not(italic[contains(text() ,'T. thermophila')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'t\.\s?thermophila') and not(italic[contains(text() ,'T. thermophila')])">
            <xsl:attribute name="id">tsthermophila-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'T. thermophila' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'tetrahymena\s?thermophila') and not(italic[contains(text() ,'Tetrahymena thermophila')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'tetrahymena\s?thermophila') and not(italic[contains(text() ,'Tetrahymena thermophila')])">
            <xsl:attribute name="id">tetrahymenasthermophila-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Tetrahymena thermophila' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'c\.\s?reinhardtii') and not(italic[contains(text() ,'C. reinhardtii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'c\.\s?reinhardtii') and not(italic[contains(text() ,'C. reinhardtii')])">
            <xsl:attribute name="id">csreinhardtii-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'C. reinhardtii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'chlamydomonas\s?reinhardtii') and not(italic[contains(text() ,'Chlamydomonas reinhardtii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'chlamydomonas\s?reinhardtii') and not(italic[contains(text() ,'Chlamydomonas reinhardtii')])">
            <xsl:attribute name="id">chlamydomonassreinhardtii-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Chlamydomonas reinhardtii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'n\.\s?attenuata') and not(italic[contains(text() ,'N. attenuata')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'n\.\s?attenuata') and not(italic[contains(text() ,'N. attenuata')])">
            <xsl:attribute name="id">nsattenuata-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'N. attenuata' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'nicotiana\s?attenuata') and not(italic[contains(text() ,'Nicotiana attenuata')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'nicotiana\s?attenuata') and not(italic[contains(text() ,'Nicotiana attenuata')])">
            <xsl:attribute name="id">nicotianasattenuata-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Nicotiana attenuata' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'e\.\s?carotovora') and not(italic[contains(text() ,'E. carotovora')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'e\.\s?carotovora') and not(italic[contains(text() ,'E. carotovora')])">
            <xsl:attribute name="id">escarotovora-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'E. carotovora' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'erwinia\s?carotovora') and not(italic[contains(text() ,'Erwinia carotovora')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'erwinia\s?carotovora') and not(italic[contains(text() ,'Erwinia carotovora')])">
            <xsl:attribute name="id">erwiniascarotovora-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Erwinia carotovora' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'e\.\s?faecalis') and not(italic[contains(text() ,'E. faecalis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'e\.\s?faecalis') and not(italic[contains(text() ,'E. faecalis')])">
            <xsl:attribute name="id">esfaecalis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'E. faecalis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'h\.\s?sapiens') and not(italic[contains(text() ,'H. sapiens')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'h\.\s?sapiens') and not(italic[contains(text() ,'H. sapiens')])">
            <xsl:attribute name="id">hsapiens-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'H. sapiens' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'homo\s?sapiens') and not(italic[contains(text() ,'Homo sapiens')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'homo\s?sapiens') and not(italic[contains(text() ,'Homo sapiens')])">
            <xsl:attribute name="id">homosapiens-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Homo sapiens' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'c\.\s?trachomatis') and not(italic[contains(text() ,'C. trachomatis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'c\.\s?trachomatis') and not(italic[contains(text() ,'C. trachomatis')])">
            <xsl:attribute name="id">ctrachomatis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'C. trachomatis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'chlamydia\s?trachomatis') and not(italic[contains(text() ,'Chlamydia trachomatis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'chlamydia\s?trachomatis') and not(italic[contains(text() ,'Chlamydia trachomatis')])">
            <xsl:attribute name="id">chlamydiatrachomatis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Chlamydia trachomatis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'enterococcus\s?faecalis') and not(italic[contains(text() ,'Enterococcus faecalis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'enterococcus\s?faecalis') and not(italic[contains(text() ,'Enterococcus faecalis')])">
            <xsl:attribute name="id">enterococcussfaecalis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Enterococcus faecalis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'x\.\s?laevis') and not(italic[contains(text() ,'X. laevis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'x\.\s?laevis') and not(italic[contains(text() ,'X. laevis')])">
            <xsl:attribute name="id">xlaevis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'X. laevis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'xenopus\s?laevis') and not(italic[contains(text() ,'Xenopus laevis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'xenopus\s?laevis') and not(italic[contains(text() ,'Xenopus laevis')])">
            <xsl:attribute name="id">xenopuslaevis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Xenopus laevis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'x\.\s?tropicalis') and not(italic[contains(text() ,'X. tropicalis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'x\.\s?tropicalis') and not(italic[contains(text() ,'X. tropicalis')])">
            <xsl:attribute name="id">xtropicalis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'X. tropicalis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'xenopus\s?tropicalis') and not(italic[contains(text() ,'Xenopus tropicalis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'xenopus\s?tropicalis') and not(italic[contains(text() ,'Xenopus tropicalis')])">
            <xsl:attribute name="id">xenopustropicalis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Xenopus tropicalis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'m\.\s?musculus') and not(italic[contains(text() ,'M. musculus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'m\.\s?musculus') and not(italic[contains(text() ,'M. musculus')])">
            <xsl:attribute name="id">mmusculus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'M. musculus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'mus\s?musculus') and not(italic[contains(text() ,'Mus musculus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'mus\s?musculus') and not(italic[contains(text() ,'Mus musculus')])">
            <xsl:attribute name="id">musmusculus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Mus musculus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'d\.\s?immigrans') and not(italic[contains(text() ,'D. immigrans')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'d\.\s?immigrans') and not(italic[contains(text() ,'D. immigrans')])">
            <xsl:attribute name="id">dimmigrans-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'D. immigrans' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'drosophila\s?immigrans') and not(italic[contains(text() ,'Drosophila immigrans')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'drosophila\s?immigrans') and not(italic[contains(text() ,'Drosophila immigrans')])">
            <xsl:attribute name="id">drosophilaimmigrans-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Drosophila immigrans' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'d\.\s?subobscura') and not(italic[contains(text() ,'D. subobscura')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'d\.\s?subobscura') and not(italic[contains(text() ,'D. subobscura')])">
            <xsl:attribute name="id">dsubobscura-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'D. subobscura' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'drosophila\s?subobscura') and not(italic[contains(text() ,'Drosophila subobscura')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'drosophila\s?subobscura') and not(italic[contains(text() ,'Drosophila subobscura')])">
            <xsl:attribute name="id">drosophilasubobscura-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Drosophila subobscura' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'d\.\s?affinis') and not(italic[contains(text() ,'D. affinis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'d\.\s?affinis') and not(italic[contains(text() ,'D. affinis')])">
            <xsl:attribute name="id">daffinis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'D. affinis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'drosophila\s?affinis') and not(italic[contains(text() ,'Drosophila affinis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'drosophila\s?affinis') and not(italic[contains(text() ,'Drosophila affinis')])">
            <xsl:attribute name="id">drosophilaaffinis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Drosophila affinis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'d\.\s?obscura') and not(italic[contains(text() ,'D. obscura')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'d\.\s?obscura') and not(italic[contains(text() ,'D. obscura')])">
            <xsl:attribute name="id">dobscura-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'D. obscura' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'drosophila\s?obscura') and not(italic[contains(text() ,'Drosophila obscura')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'drosophila\s?obscura') and not(italic[contains(text() ,'Drosophila obscura')])">
            <xsl:attribute name="id">drosophilaobscura-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Drosophila obscura' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'f\.\s?tularensis') and not(italic[contains(text() ,'F. tularensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'f\.\s?tularensis') and not(italic[contains(text() ,'F. tularensis')])">
            <xsl:attribute name="id">ftularensis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'F. tularensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'francisella\s?tularensis') and not(italic[contains(text() ,'Francisella tularensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'francisella\s?tularensis') and not(italic[contains(text() ,'Francisella tularensis')])">
            <xsl:attribute name="id">francisellatularensis-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Francisella tularensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'d\.\s?rerio') and not(italic[contains(text() ,'D. rerio')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'d\.\s?rerio') and not(italic[contains(text() ,'D. rerio')])">
            <xsl:attribute name="id">drerio-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'D. rerio' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'danio\s?rerio') and not(italic[contains(text() ,'Danio rerio')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'danio\s?rerio') and not(italic[contains(text() ,'Danio rerio')])">
            <xsl:attribute name="id">daniorerio-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Danio rerio' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'drosophila') and not(italic[contains(text(),'Drosophila')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'drosophila') and not(italic[contains(text(),'Drosophila')])">
            <xsl:attribute name="id">drosophila-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Drosophila' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'xenopus') and not(italic[contains(text() ,'Xenopus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'xenopus') and not(italic[contains(text() ,'Xenopus')])">
            <xsl:attribute name="id">xenopus-ref-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref <xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/> references an organism - 'Xenopus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M270"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M270"/>
   <xsl:template match="@*|node()" priority="-2" mode="M270">
      <xsl:apply-templates select="*" mode="M270"/>
   </xsl:template>

   <!--PATTERN org-title-kwd-pattern-->


	  <!--RULE org-title-kwd-->
   <xsl:template match="article//article-meta/title-group/article-title | article/body//sec/title | article//article-meta//kwd"
                 priority="1000"
                 mode="M271">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article//article-meta/title-group/article-title | article/body//sec/title | article//article-meta//kwd"
                       id="org-title-kwd"/>
      <xsl:variable name="lc" select="lower-case(.)"/>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'b\.\s?subtilis') and not(italic[contains(text() ,'B. subtilis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'b\.\s?subtilis') and not(italic[contains(text() ,'B. subtilis')])">
            <xsl:attribute name="id">bssubtilis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'B. subtilis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'bacillus\s?subtilis') and not(italic[contains(text() ,'Bacillus subtilis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'bacillus\s?subtilis') and not(italic[contains(text() ,'Bacillus subtilis')])">
            <xsl:attribute name="id">bacillusssubtilis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Bacillus subtilis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'d\.\s?melanogaster') and not(italic[contains(text() ,'D. melanogaster')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'d\.\s?melanogaster') and not(italic[contains(text() ,'D. melanogaster')])">
            <xsl:attribute name="id">dsmelanogaster-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'D. melanogaster' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'drosophila\s?melanogaster') and not(italic[contains(text() ,'Drosophila melanogaster')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'drosophila\s?melanogaster') and not(italic[contains(text() ,'Drosophila melanogaster')])">
            <xsl:attribute name="id">drosophilasmelanogaster-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Drosophila melanogaster' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'e\.\s?coli') and not(italic[contains(text() ,'E. coli')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'e\.\s?coli') and not(italic[contains(text() ,'E. coli')])">
            <xsl:attribute name="id">escoli-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'E. coli' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'escherichia\s?coli') and not(italic[contains(text() ,'Escherichia coli')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'escherichia\s?coli') and not(italic[contains(text() ,'Escherichia coli')])">
            <xsl:attribute name="id">escherichiascoli-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Escherichia coli' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\s?pombe') and not(italic[contains(text() ,'S. pombe')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'s\.\s?pombe') and not(italic[contains(text() ,'S. pombe')])">
            <xsl:attribute name="id">sspombe-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'S. pombe' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'schizosaccharomyces\s?pombe') and not(italic[contains(text() ,'Schizosaccharomyces pombe')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'schizosaccharomyces\s?pombe') and not(italic[contains(text() ,'Schizosaccharomyces pombe')])">
            <xsl:attribute name="id">schizosaccharomycesspombe-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Schizosaccharomyces pombe' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\s?cerevisiae') and not(italic[contains(text() ,'S. cerevisiae')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'s\.\s?cerevisiae') and not(italic[contains(text() ,'S. cerevisiae')])">
            <xsl:attribute name="id">sscerevisiae-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'S. cerevisiae' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'saccharomyces\s?cerevisiae') and not(italic[contains(text() ,'Saccharomyces cerevisiae')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'saccharomyces\s?cerevisiae') and not(italic[contains(text() ,'Saccharomyces cerevisiae')])">
            <xsl:attribute name="id">saccharomycesscerevisiae-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Saccharomyces cerevisiae' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'c\.\s?elegans') and not(italic[contains(text() ,'C. elegans')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'c\.\s?elegans') and not(italic[contains(text() ,'C. elegans')])">
            <xsl:attribute name="id">cselegans-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'C. elegans' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'caenorhabditis\s?elegans') and not(italic[contains(text() ,'Caenorhabditis elegans')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'caenorhabditis\s?elegans') and not(italic[contains(text() ,'Caenorhabditis elegans')])">
            <xsl:attribute name="id">caenorhabditisselegans-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Caenorhabditis elegans' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'a\.\s?thaliana') and not(italic[contains(text() ,'A. thaliana')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'a\.\s?thaliana') and not(italic[contains(text() ,'A. thaliana')])">
            <xsl:attribute name="id">asthaliana-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'A. thaliana' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'arabidopsis\s?thaliana') and not(italic[contains(text() ,'Arabidopsis thaliana')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'arabidopsis\s?thaliana') and not(italic[contains(text() ,'Arabidopsis thaliana')])">
            <xsl:attribute name="id">arabidopsissthaliana-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Arabidopsis thaliana' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'m\.\s?thermophila') and not(italic[contains(text() ,'M. thermophila')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'m\.\s?thermophila') and not(italic[contains(text() ,'M. thermophila')])">
            <xsl:attribute name="id">msthermophila-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'M. thermophila' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'myceliophthora\s?thermophila') and not(italic[contains(text() ,'Myceliophthora thermophila')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'myceliophthora\s?thermophila') and not(italic[contains(text() ,'Myceliophthora thermophila')])">
            <xsl:attribute name="id">myceliophthorasthermophila-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Myceliophthora thermophila' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'dictyostelium') and not(italic[contains(text() ,'Dictyostelium')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'dictyostelium') and not(italic[contains(text() ,'Dictyostelium')])">
            <xsl:attribute name="id">dictyostelium-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Dictyostelium' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'p\.\s?falciparum') and not(italic[contains(text() ,'P. falciparum')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'p\.\s?falciparum') and not(italic[contains(text() ,'P. falciparum')])">
            <xsl:attribute name="id">psfalciparum-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'P. falciparum' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'plasmodium\s?falciparum') and not(italic[contains(text() ,'Plasmodium falciparum')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'plasmodium\s?falciparum') and not(italic[contains(text() ,'Plasmodium falciparum')])">
            <xsl:attribute name="id">plasmodiumsfalciparum-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Plasmodium falciparum' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\s?enterica') and not(italic[contains(text() ,'S. enterica')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'s\.\s?enterica') and not(italic[contains(text() ,'S. enterica')])">
            <xsl:attribute name="id">ssenterica-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'S. enterica' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'salmonella\s?enterica') and not(italic[contains(text() ,'Salmonella enterica')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'salmonella\s?enterica') and not(italic[contains(text() ,'Salmonella enterica')])">
            <xsl:attribute name="id">salmonellasenterica-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Salmonella enterica' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\s?pyogenes') and not(italic[contains(text() ,'S. pyogenes')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'s\.\s?pyogenes') and not(italic[contains(text() ,'S. pyogenes')])">
            <xsl:attribute name="id">sspyogenes-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'S. pyogenes' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'streptococcus\s?pyogenes') and not(italic[contains(text() ,'Streptococcus pyogenes')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'streptococcus\s?pyogenes') and not(italic[contains(text() ,'Streptococcus pyogenes')])">
            <xsl:attribute name="id">streptococcusspyogenes-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Streptococcus pyogenes' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'p\.\s?dumerilii') and not(italic[contains(text() ,'P. dumerilii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'p\.\s?dumerilii') and not(italic[contains(text() ,'P. dumerilii')])">
            <xsl:attribute name="id">psdumerilii-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'P. dumerilii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'platynereis\s?dumerilii') and not(italic[contains(text() ,'Platynereis dumerilii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'platynereis\s?dumerilii') and not(italic[contains(text() ,'Platynereis dumerilii')])">
            <xsl:attribute name="id">platynereissdumerilii-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Platynereis dumerilii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'p\.\s?cynocephalus') and not(italic[contains(text() ,'P. cynocephalus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'p\.\s?cynocephalus') and not(italic[contains(text() ,'P. cynocephalus')])">
            <xsl:attribute name="id">pscynocephalus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'P. cynocephalus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'papio\s?cynocephalus') and not(italic[contains(text() ,'Papio cynocephalus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'papio\s?cynocephalus') and not(italic[contains(text() ,'Papio cynocephalus')])">
            <xsl:attribute name="id">papioscynocephalus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Papio cynocephalus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'o\.\s?fasciatus') and not(italic[contains(text() ,'O. fasciatus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'o\.\s?fasciatus') and not(italic[contains(text() ,'O. fasciatus')])">
            <xsl:attribute name="id">osfasciatus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'O. fasciatus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'oncopeltus\s?fasciatus') and not(italic[contains(text() ,'Oncopeltus fasciatus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'oncopeltus\s?fasciatus') and not(italic[contains(text() ,'Oncopeltus fasciatus')])">
            <xsl:attribute name="id">oncopeltussfasciatus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Oncopeltus fasciatus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'n\.\s?crassa') and not(italic[contains(text() ,'N. crassa')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'n\.\s?crassa') and not(italic[contains(text() ,'N. crassa')])">
            <xsl:attribute name="id">nscrassa-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'N. crassa' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'neurospora\s?crassa') and not(italic[contains(text() ,'Neurospora crassa')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'neurospora\s?crassa') and not(italic[contains(text() ,'Neurospora crassa')])">
            <xsl:attribute name="id">neurosporascrassa-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Neurospora crassa' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'c\.\s?intestinalis') and not(italic[contains(text() ,'C. intestinalis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'c\.\s?intestinalis') and not(italic[contains(text() ,'C. intestinalis')])">
            <xsl:attribute name="id">csintestinalis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'C. intestinalis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'ciona\s?intestinalis') and not(italic[contains(text() ,'Ciona intestinalis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'ciona\s?intestinalis') and not(italic[contains(text() ,'Ciona intestinalis')])">
            <xsl:attribute name="id">cionasintestinalis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Ciona intestinalis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'e\.\s?cuniculi') and not(italic[contains(text() ,'E. cuniculi')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'e\.\s?cuniculi') and not(italic[contains(text() ,'E. cuniculi')])">
            <xsl:attribute name="id">escuniculi-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'E. cuniculi' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'encephalitozoon\s?cuniculi') and not(italic[contains(text() ,'Encephalitozoon cuniculi')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'encephalitozoon\s?cuniculi') and not(italic[contains(text() ,'Encephalitozoon cuniculi')])">
            <xsl:attribute name="id">encephalitozoonscuniculi-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Encephalitozoon cuniculi' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'h\.\s?salinarum') and not(italic[contains(text() ,'H. salinarum')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'h\.\s?salinarum') and not(italic[contains(text() ,'H. salinarum')])">
            <xsl:attribute name="id">hssalinarum-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'H. salinarum' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'halobacterium\s?salinarum') and not(italic[contains(text() ,'Halobacterium salinarum')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'halobacterium\s?salinarum') and not(italic[contains(text() ,'Halobacterium salinarum')])">
            <xsl:attribute name="id">halobacteriumssalinarum-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Halobacterium salinarum' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\s?solfataricus') and not(italic[contains(text() ,'S. solfataricus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'s\.\s?solfataricus') and not(italic[contains(text() ,'S. solfataricus')])">
            <xsl:attribute name="id">sssolfataricus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'S. solfataricus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'sulfolobus\s?solfataricus') and not(italic[contains(text() ,'Sulfolobus solfataricus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'sulfolobus\s?solfataricus') and not(italic[contains(text() ,'Sulfolobus solfataricus')])">
            <xsl:attribute name="id">sulfolobusssolfataricus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Sulfolobus solfataricus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\s?mediterranea') and not(italic[contains(text() ,'S. mediterranea')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'s\.\s?mediterranea') and not(italic[contains(text() ,'S. mediterranea')])">
            <xsl:attribute name="id">ssmediterranea-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'S. mediterranea' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'schmidtea\s?mediterranea') and not(italic[contains(text() ,'Schmidtea mediterranea')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'schmidtea\s?mediterranea') and not(italic[contains(text() ,'Schmidtea mediterranea')])">
            <xsl:attribute name="id">schmidteasmediterranea-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Schmidtea mediterranea' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\s?rosetta') and not(italic[contains(text() ,'S. rosetta')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'s\.\s?rosetta') and not(italic[contains(text() ,'S. rosetta')])">
            <xsl:attribute name="id">ssrosetta-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'S. rosetta' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'salpingoeca\s?rosetta') and not(italic[contains(text() ,'Salpingoeca rosetta')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'salpingoeca\s?rosetta') and not(italic[contains(text() ,'Salpingoeca rosetta')])">
            <xsl:attribute name="id">salpingoecasrosetta-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Salpingoeca rosetta' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'n\.\s?vectensis') and not(italic[contains(text() ,'N. vectensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'n\.\s?vectensis') and not(italic[contains(text() ,'N. vectensis')])">
            <xsl:attribute name="id">nsvectensis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'N. vectensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'nematostella\s?vectensis') and not(italic[contains(text() ,'Nematostella vectensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'nematostella\s?vectensis') and not(italic[contains(text() ,'Nematostella vectensis')])">
            <xsl:attribute name="id">nematostellasvectensis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Nematostella vectensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'s\.\s?aureus') and not(italic[contains(text() ,'S. aureus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'s\.\s?aureus') and not(italic[contains(text() ,'S. aureus')])">
            <xsl:attribute name="id">ssaureus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'S. aureus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'staphylococcus\s?aureus') and not(italic[contains(text() ,'Staphylococcus aureus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'staphylococcus\s?aureus') and not(italic[contains(text() ,'Staphylococcus aureus')])">
            <xsl:attribute name="id">staphylococcussaureus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Staphylococcus aureus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'v\.\s?cholerae') and not(italic[contains(text() ,'V. cholerae')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'v\.\s?cholerae') and not(italic[contains(text() ,'V. cholerae')])">
            <xsl:attribute name="id">vscholerae-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'V. cholerae' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'vibrio\s?cholerae') and not(italic[contains(text() ,'Vibrio cholerae')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'vibrio\s?cholerae') and not(italic[contains(text() ,'Vibrio cholerae')])">
            <xsl:attribute name="id">vibrioscholerae-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Vibrio cholerae' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'t\.\s?thermophila') and not(italic[contains(text() ,'T. thermophila')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'t\.\s?thermophila') and not(italic[contains(text() ,'T. thermophila')])">
            <xsl:attribute name="id">tsthermophila-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'T. thermophila' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'tetrahymena\s?thermophila') and not(italic[contains(text() ,'Tetrahymena thermophila')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'tetrahymena\s?thermophila') and not(italic[contains(text() ,'Tetrahymena thermophila')])">
            <xsl:attribute name="id">tetrahymenasthermophila-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Tetrahymena thermophila' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'c\.\s?reinhardtii') and not(italic[contains(text() ,'C. reinhardtii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'c\.\s?reinhardtii') and not(italic[contains(text() ,'C. reinhardtii')])">
            <xsl:attribute name="id">csreinhardtii-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'C. reinhardtii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'chlamydomonas\s?reinhardtii') and not(italic[contains(text() ,'Chlamydomonas reinhardtii')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'chlamydomonas\s?reinhardtii') and not(italic[contains(text() ,'Chlamydomonas reinhardtii')])">
            <xsl:attribute name="id">chlamydomonassreinhardtii-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Chlamydomonas reinhardtii' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'n\.\s?attenuata') and not(italic[contains(text() ,'N. attenuata')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'n\.\s?attenuata') and not(italic[contains(text() ,'N. attenuata')])">
            <xsl:attribute name="id">nsattenuata-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'N. attenuata' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'nicotiana\s?attenuata') and not(italic[contains(text() ,'Nicotiana attenuata')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'nicotiana\s?attenuata') and not(italic[contains(text() ,'Nicotiana attenuata')])">
            <xsl:attribute name="id">nicotianasattenuata-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Nicotiana attenuata' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'e\.\s?carotovora') and not(italic[contains(text() ,'E. carotovora')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'e\.\s?carotovora') and not(italic[contains(text() ,'E. carotovora')])">
            <xsl:attribute name="id">escarotovora-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'E. carotovora' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'erwinia\s?carotovora') and not(italic[contains(text() ,'Erwinia carotovora')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'erwinia\s?carotovora') and not(italic[contains(text() ,'Erwinia carotovora')])">
            <xsl:attribute name="id">erwiniascarotovora-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Erwinia carotovora' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'h\.\s?sapiens') and not(italic[contains(text() ,'H. sapiens')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'h\.\s?sapiens') and not(italic[contains(text() ,'H. sapiens')])">
            <xsl:attribute name="id">hsapiens-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'H. sapiens' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'homo\s?sapiens') and not(italic[contains(text() ,'Homo sapiens')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'homo\s?sapiens') and not(italic[contains(text() ,'Homo sapiens')])">
            <xsl:attribute name="id">homosapiens-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Homo sapiens' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'c\.\s?trachomatis') and not(italic[contains(text() ,'C. trachomatis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'c\.\s?trachomatis') and not(italic[contains(text() ,'C. trachomatis')])">
            <xsl:attribute name="id">ctrachomatis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'C. trachomatis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'chlamydia\s?trachomatis') and not(italic[contains(text() ,'Chlamydia trachomatis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'chlamydia\s?trachomatis') and not(italic[contains(text() ,'Chlamydia trachomatis')])">
            <xsl:attribute name="id">chlamydiatrachomatis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Chlamydia trachomatis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'e\.\s?faecalis') and not(italic[contains(text() ,'E. faecalis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'e\.\s?faecalis') and not(italic[contains(text() ,'E. faecalis')])">
            <xsl:attribute name="id">esfaecalis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'E. faecalis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'enterococcus\s?faecalis') and not(italic[contains(text() ,'Enterococcus faecalis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'enterococcus\s?faecalis') and not(italic[contains(text() ,'Enterococcus faecalis')])">
            <xsl:attribute name="id">enterococcussfaecalis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Enterococcus faecalis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'x\.\s?laevis') and not(italic[contains(text() ,'X. laevis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'x\.\s?laevis') and not(italic[contains(text() ,'X. laevis')])">
            <xsl:attribute name="id">xlaevis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'X. laevis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'xenopus\s?laevis') and not(italic[contains(text() ,'Xenopus laevis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'xenopus\s?laevis') and not(italic[contains(text() ,'Xenopus laevis')])">
            <xsl:attribute name="id">xenopuslaevis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Xenopus laevis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'x\.\s?tropicalis') and not(italic[contains(text() ,'X. tropicalis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'x\.\s?tropicalis') and not(italic[contains(text() ,'X. tropicalis')])">
            <xsl:attribute name="id">xtropicalis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'X. tropicalis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'xenopus\s?tropicalis') and not(italic[contains(text() ,'Xenopus tropicalis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'xenopus\s?tropicalis') and not(italic[contains(text() ,'Xenopus tropicalis')])">
            <xsl:attribute name="id">xenopustropicalis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Xenopus tropicalis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'m\.\s?musculus') and not(italic[contains(text() ,'M. musculus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'m\.\s?musculus') and not(italic[contains(text() ,'M. musculus')])">
            <xsl:attribute name="id">mmusculus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'M. musculus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'mus\s?musculus') and not(italic[contains(text() ,'Mus musculus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'mus\s?musculus') and not(italic[contains(text() ,'Mus musculus')])">
            <xsl:attribute name="id">musmusculus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Mus musculus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'d\.\s?immigrans') and not(italic[contains(text() ,'D. immigrans')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'d\.\s?immigrans') and not(italic[contains(text() ,'D. immigrans')])">
            <xsl:attribute name="id">dimmigrans-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'D. immigrans' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'drosophila\s?immigrans') and not(italic[contains(text() ,'Drosophila immigrans')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'drosophila\s?immigrans') and not(italic[contains(text() ,'Drosophila immigrans')])">
            <xsl:attribute name="id">drosophilaimmigrans-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Drosophila immigrans' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'d\.\s?subobscura') and not(italic[contains(text() ,'D. subobscura')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'d\.\s?subobscura') and not(italic[contains(text() ,'D. subobscura')])">
            <xsl:attribute name="id">dsubobscura-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'D. subobscura' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'drosophila\s?subobscura') and not(italic[contains(text() ,'Drosophila subobscura')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'drosophila\s?subobscura') and not(italic[contains(text() ,'Drosophila subobscura')])">
            <xsl:attribute name="id">drosophilasubobscura-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Drosophila subobscura' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'d\.\s?affinis') and not(italic[contains(text() ,'D. affinis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'d\.\s?affinis') and not(italic[contains(text() ,'D. affinis')])">
            <xsl:attribute name="id">daffinis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'D. affinis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'drosophila\s?affinis') and not(italic[contains(text() ,'Drosophila affinis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'drosophila\s?affinis') and not(italic[contains(text() ,'Drosophila affinis')])">
            <xsl:attribute name="id">drosophilaaffinis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Drosophila affinis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'d\.\s?obscura') and not(italic[contains(text() ,'D. obscura')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'d\.\s?obscura') and not(italic[contains(text() ,'D. obscura')])">
            <xsl:attribute name="id">dobscura-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'D. obscura' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'drosophila\s?obscura') and not(italic[contains(text() ,'Drosophila obscura')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'drosophila\s?obscura') and not(italic[contains(text() ,'Drosophila obscura')])">
            <xsl:attribute name="id">drosophilaobscura-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Drosophila obscura' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'f\.\s?tularensis') and not(italic[contains(text() ,'F. tularensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'f\.\s?tularensis') and not(italic[contains(text() ,'F. tularensis')])">
            <xsl:attribute name="id">ftularensis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'F. tularensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'francisella\s?tularensis') and not(italic[contains(text() ,'Francisella tularensis')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'francisella\s?tularensis') and not(italic[contains(text() ,'Francisella tularensis')])">
            <xsl:attribute name="id">francisellatularensis-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Francisella tularensis' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'d\.\s?rerio') and not(italic[contains(text() ,'D. rerio')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'d\.\s?rerio') and not(italic[contains(text() ,'D. rerio')])">
            <xsl:attribute name="id">drerio-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'D. rerio' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'danio\s?rerio') and not(italic[contains(text() ,'Danio rerio')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'danio\s?rerio') and not(italic[contains(text() ,'Danio rerio')])">
            <xsl:attribute name="id">daniorerio-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Danio rerio' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'drosophila') and not(italic[contains(text(),'Drosophila')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'drosophila') and not(italic[contains(text(),'Drosophila')])">
            <xsl:attribute name="id">drosophila-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Drosophila' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches($lc,'xenopus') and not(italic[contains(text() ,'Xenopus')])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'xenopus') and not(italic[contains(text() ,'Xenopus')])">
            <xsl:attribute name="id">xenopus-article-title-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains an organism - 'Xenopus' - but there is no italic element with that correct capitalisation or spacing.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M271"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M271"/>
   <xsl:template match="@*|node()" priority="-2" mode="M271">
      <xsl:apply-templates select="*" mode="M271"/>
   </xsl:template>

   <!--PATTERN unallowed-symbol-tests-pattern-->


	  <!--RULE unallowed-symbol-tests-->
   <xsl:template match="p|td|th|title|xref|bold|italic|sub|sc|named-content|monospace|code|underline|fn|institution|ext-link"
                 priority="1000"
                 mode="M272">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="p|td|th|title|xref|bold|italic|sub|sc|named-content|monospace|code|underline|fn|institution|ext-link"
                       id="unallowed-symbol-tests"/>

		    <!--REPORT error-->
      <xsl:if test="contains(.,'©')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'©')">
            <xsl:attribute name="id">copyright-symbol</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the copyright symbol, '©', which is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains(.,'™')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'™')">
            <xsl:attribute name="id">trademark-symbol</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the trademark symbol, '™', which is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains(.,'®')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'®')">
            <xsl:attribute name="id">reg-trademark-symbol</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the registered trademark symbol, '®', which is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,' [Ii]nc\. |[Ii]nc\.\)|[Ii]nc\.,')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,' [Ii]nc\. |[Ii]nc\.\)|[Ii]nc\.,')">
            <xsl:attribute name="id">Inc-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Inc.' with a full stop. Remove the full stop.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,' [Aa]nd [Aa]nd ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,' [Aa]nd [Aa]nd ')">
            <xsl:attribute name="id">andand-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains ' and and ' which is very likely to be incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Ff]igure [Ff]igure')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'[Ff]igure [Ff]igure')">
            <xsl:attribute name="id">figurefigure-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains ' figure figure ' which is very likely to be incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(ancestor::sub-article) and matches(.,'\s?[Ss]upplemental [Ff]igure')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="not(ancestor::sub-article) and matches(.,'\s?[Ss]upplemental [Ff]igure')">
            <xsl:attribute name="id">supplementalfigure-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the phrase ' Supplemental figure ' which almost certainly needs updating. <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> starts with - <xsl:text/>
               <xsl:value-of select="substring(.,1,25)"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(ancestor::sub-article) and matches(.,'/s?[Ss]upplemental [Ff]ile')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="not(ancestor::sub-article) and matches(.,'/s?[Ss]upplemental [Ff]ile')">
            <xsl:attribute name="id">supplementalfile-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the phrase ' Supplemental file ' which almost certainly needs updating. <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> starts with - <xsl:text/>
               <xsl:value-of select="substring(.,1,25)"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="not(ancestor::sub-article) and matches(.,' [Rr]ef\. ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="not(ancestor::sub-article) and matches(.,' [Rr]ef\. ')">
            <xsl:attribute name="id">ref-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Ref.' which is either incorrect or unnecessary.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="not(ancestor::sub-article) and matches(.,' [Rr]efs\. ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="not(ancestor::sub-article) and matches(.,' [Rr]efs\. ')">
            <xsl:attribute name="id">refs-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'Refs.' which is either incorrect or unnecessary.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'�')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'�')">
            <xsl:attribute name="id">replacement-character-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the replacement character '�' which is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'')">
            <xsl:attribute name="id">junk-character-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains a junk character '' which should be replaced.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M272"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M272"/>
   <xsl:template match="@*|node()" priority="-2" mode="M272">
      <xsl:apply-templates select="*" mode="M272"/>
   </xsl:template>

   <!--PATTERN unallowed-symbol-tests-sup-pattern-->


	  <!--RULE unallowed-symbol-tests-sup-->
   <xsl:template match="sup" priority="1000" mode="M273">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="sup"
                       id="unallowed-symbol-tests-sup"/>

		    <!--REPORT error-->
      <xsl:if test="contains(.,'©')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'©')">
            <xsl:attribute name="id">copyright-symbol-sup</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>'<xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>' element contains the copyright symbol, '©', which is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains(.,'™')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'™')">
            <xsl:attribute name="id">trademark-symbol-1-sup</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>'<xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>' element contains the trademark symbol, '™', which is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test=". = 'TM'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test=". = 'TM'">
            <xsl:attribute name="id">trademark-symbol-2-sup</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>'<xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>' element contains the text 'TM', which means that it resembles the trademark symbol. The trademark symbol is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains(.,'®')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'®')">
            <xsl:attribute name="id">reg-trademark-symbol-sup</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>'<xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>' element contains the registered trademark symbol, '®', which is not allowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="contains(.,'°')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'°')">
            <xsl:attribute name="id">degree-symbol-sup</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>'<xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>' element contains the degree symbol, '°', which is not unnecessary. It does not need to be superscript.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'○')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'○')">
            <xsl:attribute name="id">white-circle-symbol-sup</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>'<xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>' element contains the white circle symbol, '○'. Should this be a (non-superscript) degree symbol - ° - instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'∘')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'∘')">
            <xsl:attribute name="id">ring-op-symbol-sup</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>'<xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>' element contains the Ring Operator symbol, '∘'. Should this be a (non-superscript) degree symbol - ° - instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="contains(.,'˚')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains(.,'˚')">
            <xsl:attribute name="id">ring-diacritic-symbol-sup</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>'<xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/>' element contains the ring above symbol, '∘'. Should this be a (non-superscript) degree symbol - ° - instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M273"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M273"/>
   <xsl:template match="@*|node()" priority="-2" mode="M273">
      <xsl:apply-templates select="*" mode="M273"/>
   </xsl:template>

   <!--PATTERN country-tests-pattern-->


	  <!--RULE country-tests-->
   <xsl:template match="front//aff/country" priority="1000" mode="M274">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="front//aff/country"
                       id="country-tests"/>
      <xsl:variable name="text" select="self::*/text()"/>
      <xsl:variable name="countries" select="'countries.xml'"/>
      <xsl:variable name="city" select="parent::aff//named-content[@content-type='city']"/>
      <xsl:variable name="valid-country"
                    select="document($countries)/countries/country[text() = $text]"/>

		    <!--REPORT error-->
      <xsl:if test="$text = 'United States of America'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="$text = 'United States of America'">
            <xsl:attribute name="id">united-states-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> is not allowed it. This should be 'United States'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="$text = 'USA'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$text = 'USA'">
            <xsl:attribute name="id">united-states-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> is not allowed it. This should be 'United States'</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="$text = 'UK'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$text = 'UK'">
            <xsl:attribute name="id">united-kingdom-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> is not allowed it. This should be 'United Kingdom'</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="$text = document($countries)/countries/country"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="$text = document($countries)/countries/country">
               <xsl:attribute name="id">gen-country-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>affiliation contains a country which is not in the allowed list - <xsl:text/>
                  <xsl:value-of select="."/>
                  <xsl:text/>.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="(. = 'Singapore') and ($city != 'Singapore')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(. = 'Singapore') and ($city != 'Singapore')">
            <xsl:attribute name="id">singapore-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="ancestor::aff/@id"/>
               <xsl:text/> has 'Singapore' as its country but '<xsl:text/>
               <xsl:value-of select="$city"/>
               <xsl:text/>' as its city, which must be incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M274"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M274"/>
   <xsl:template match="@*|node()" priority="-2" mode="M274">
      <xsl:apply-templates select="*" mode="M274"/>
   </xsl:template>

   <!--PATTERN city-tests-pattern-->


	  <!--RULE city-tests-->
   <xsl:template match="front//aff//named-content[@content-type='city']"
                 priority="1000"
                 mode="M275">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="front//aff//named-content[@content-type='city']"
                       id="city-tests"/>
      <xsl:variable name="lc" select="normalize-space(lower-case(.))"/>
      <xsl:variable name="states-regex"
                    select="'^alabama$|^al$|^alaska$|^ak$|^arizona$|^az$|^arkansas$|^ar$|^california$|^ca$|^colorado$|^co$|^connecticut$|^ct$|^delaware$|^de$|^florida$|^fl$|^georgia$|^ga$|^hawaii$|^hi$|^idaho$|^id$|^illinois$|^il$|^indiana$|^in$|^iowa$|^ia$|^kansas$|^ks$|^kentucky$|^ky$|^louisiana$|^la$|^maine$|^me$|^maryland$|^md$|^massachusetts$|^ma$|^michigan$|^mi$|^minnesota$|^mn$|^mississippi$|^ms$|^missouri$|^mo$|^montana$|^mt$|^nebraska$|^ne$|^nevada$|^nv$|^new hampshire$|^nh$|^new jersey$|^nj$|^new mexico$|^nm$|^ny$|^north carolina$|^nc$|^north dakota$|^nd$|^ohio$|^oh$|^oklahoma$|^ok$|^oregon$|^or$|^pennsylvania$|^pa$|^rhode island$|^ri$|^south carolina$|^sc$|^south dakota$|^sd$|^tennessee$|^tn$|^texas$|^tx$|^utah$|^ut$|^vermont$|^vt$|^virginia$|^va$|^wa$|^west virginia$|^wv$|^wisconsin$|^wi$|^wyoming$|^wy$'"/>

		    <!--REPORT error-->
      <xsl:if test="matches($lc,$states-regex)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,$states-regex)">
            <xsl:attribute name="id">final-US-states-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>city contains a US state (or an abbreviation for it) - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="(. = 'Singapore') and (ancestor::aff/country/text() != 'Singapore')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(. = 'Singapore') and (ancestor::aff/country/text() != 'Singapore')">
            <xsl:attribute name="id">singapore-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="ancestor::aff/@id"/>
               <xsl:text/> has 'Singapore' as its city but '<xsl:text/>
               <xsl:value-of select="ancestor::aff/country/text()"/>
               <xsl:text/>' as its country, which must be incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'�')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'�')">
            <xsl:attribute name="id">city-replacement-character-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the replacement character '�' which is unallowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M275"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M275"/>
   <xsl:template match="@*|node()" priority="-2" mode="M275">
      <xsl:apply-templates select="*" mode="M275"/>
   </xsl:template>

   <!--PATTERN institution-tests-pattern-->


	  <!--RULE institution-tests-->
   <xsl:template match="aff/institution[not(@*)]" priority="1000" mode="M276">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="aff/institution[not(@*)]"
                       id="institution-tests"/>

		    <!--REPORT error-->
      <xsl:if test="matches(normalize-space(.),'^[Uu]niversity of [Cc]alifornia$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(normalize-space(.),'^[Uu]niversity of [Cc]alifornia$')">
            <xsl:attribute name="id">UC-no-test1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> is not allowed as insitution name, since this is always followed by city name. This should very likely be <xsl:text/>
               <xsl:value-of select="concat('University of California, ',following-sibling::addr-line/named-content[@content-type='city'])"/>
               <xsl:text/> (provided there is a city tagged).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'�')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'�')">
            <xsl:attribute name="id">institution-replacement-character-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the replacement character '�' which is unallowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M276"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M276"/>
   <xsl:template match="@*|node()" priority="-2" mode="M276">
      <xsl:apply-templates select="*" mode="M276"/>
   </xsl:template>

   <!--PATTERN department-tests-pattern-->


	  <!--RULE department-tests-->
   <xsl:template match="aff/institution[@content-type='dept']"
                 priority="1000"
                 mode="M277">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="aff/institution[@content-type='dept']"
                       id="department-tests"/>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'[Dd]epartments')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'[Dd]epartments')">
            <xsl:attribute name="id">plural-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="ancestor::aff/@id"/>
               <xsl:text/> contains a department with the plural for department - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. Should this be split out inot two separate affiliations?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'^[Ii]nstitutes')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'^[Ii]nstitutes')">
            <xsl:attribute name="id">plural-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="ancestor::aff/@id"/>
               <xsl:text/> contains a department with the plural for institute - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. Should this be split out inot two separate affiliations?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'^[Dd]epartment .* [Dd]epartment')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'^[Dd]epartment .* [Dd]epartment')">
            <xsl:attribute name="id">plural-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="ancestor::aff/@id"/>
               <xsl:text/> contains a department wwhich has two instancest of the word 'department' - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. Should this be split out inot two separate affiliations?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'^[Ii]nstitute .* [Ii]nstitute')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'^[Ii]nstitute .* [Ii]nstitute')">
            <xsl:attribute name="id">plural-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="ancestor::aff/@id"/>
               <xsl:text/> contains a department wwhich has two instancest of the word 'institution' - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. Should this be split out inot two separate affiliations?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'�')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'�')">
            <xsl:attribute name="id">dept-replacement-character-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the replacement character '�' which is unallowed.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M277"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M277"/>
   <xsl:template match="@*|node()" priority="-2" mode="M277">
      <xsl:apply-templates select="*" mode="M277"/>
   </xsl:template>

   <!--PATTERN journal-title-tests-pattern-->


	  <!--RULE journal-title-tests-->
   <xsl:template match="element-citation[@publication-type='journal']/source"
                 priority="1000"
                 mode="M278">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='journal']/source"
                       id="journal-title-tests"/>
      <xsl:variable name="doi"
                    select="ancestor::element-citation/pub-id[@pub-id-type='doi']"/>
      <xsl:variable name="uc" select="upper-case(.)"/>

		    <!--REPORT error-->
      <xsl:if test="($uc != 'PLOS ONE') and matches(.,'plos|Plos|PLoS')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($uc != 'PLOS ONE') and matches(.,'plos|Plos|PLoS')">
            <xsl:attribute name="id">PLOS-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' contains
        <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. 'PLOS' should be upper-case.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($uc = 'PLOS ONE') and (. != 'PLOS ONE')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($uc = 'PLOS ONE') and (. != 'PLOS ONE')">
            <xsl:attribute name="id">PLOS-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' contains
          <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. 'PLOS ONE' should be upper-case.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="if (starts-with($doi,'10.1073')) then . != 'PNAS'         else()">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if (starts-with($doi,'10.1073')) then . != 'PNAS' else()">
            <xsl:attribute name="id">PNAS</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has the doi for 'PNAS' but the title is
        <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>, which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($uc = 'RNA') and (. != 'RNA')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($uc = 'RNA') and (. != 'RNA')">
            <xsl:attribute name="id">RNA</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' contains
        <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. 'RNA' should be upper-case.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="starts-with($doi,'10.1534/g3') and (. != 'G3: Genes|Genomes|Genetics') and (. != 'G3: Genes, Genomes, Genetics')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="starts-with($doi,'10.1534/g3') and (. != 'G3: Genes|Genomes|Genetics') and (. != 'G3: Genes, Genomes, Genetics')">
            <xsl:attribute name="id">G3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has the doi for 'G3' but the title is
        <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - it should be either 'G3: Genes|Genomes|Genetics' or 'G3: Genes, Genomes, Genetics'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'\s?[Aa]mp[;]?\s?') and (. != 'Hippocampus')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'\s?[Aa]mp[;]?\s?') and (. != 'Hippocampus')">
            <xsl:attribute name="id">ampersand-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' appears to contain the text 'amp', is this a broken ampersand?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="$uc = 'RESEARCH GATE'">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$uc = 'RESEARCH GATE'">
            <xsl:attribute name="id">Research-gate-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text> ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a source title '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' which must be incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'�')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'�')">
            <xsl:attribute name="id">journal-replacement-character-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the replacement character '�' which is unallowed - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Oo]fficial [Jj]ournal')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'[Oo]fficial [Jj]ournal')">
            <xsl:attribute name="id">journal-off-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a source title which contains the text 'official journal' - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'. Is this necessary?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M278"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M278"/>
   <xsl:template match="@*|node()" priority="-2" mode="M278">
      <xsl:apply-templates select="*" mode="M278"/>
   </xsl:template>

   <!--PATTERN ref-article-title-tests-pattern-->


	  <!--RULE ref-article-title-tests-->
   <xsl:template match="element-citation[@publication-type='journal']/article-title"
                 priority="1000"
                 mode="M279">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='journal']/article-title"
                       id="ref-article-title-tests"/>
      <xsl:variable name="rep"
                    select="replace(.,' [Ii]{1,3}\. | IV\. | V. | [Cc]\. [Ee]legans| vs\. | sp\. ','')"/>

		    <!--REPORT warning-->
      <xsl:if test="(matches($rep,'[A-Za-z][A-Za-z]+\. [A-Za-z]'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(matches($rep,'[A-Za-z][A-Za-z]+\. [A-Za-z]'))">
            <xsl:attribute name="id">article-title-fullstop-check-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has an article-title with a full stop. Is this correct, or has the journal/source title been included? Or perhaps the full stop should be a colon ':'?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'\.$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\.$')">
            <xsl:attribute name="id">article-title-fullstop-check-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has an article-title which ends with a full stop, which cannot be correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'^[Cc]orrection|^[Rr]etraction')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'^[Cc]orrection|^[Rr]etraction')">
            <xsl:attribute name="id">article-title-correction-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has an article-title which begins with 'Correction' or 'Retraction'. Is this a reference to the notice or the original article?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,' [Jj]ournal ')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,' [Jj]ournal ')">
            <xsl:attribute name="id">article-title-journal-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has an article-title which contains the text ' journal '. Is a journal title (source) erroneously included in the title? - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(count(child::*) = 1) and (count(child::text()) = 0)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(count(child::*) = 1) and (count(child::text()) = 0)">
            <xsl:attribute name="id">article-title-child-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has an article-title with one child <xsl:text/>
               <xsl:value-of select="*/local-name()"/>
               <xsl:text/> element, and no text. This is almost certainly incorrect. - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'�')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'�')">
            <xsl:attribute name="id">a-title-replacement-character-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the replacement character '�' which is unallowed - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M279"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M279"/>
   <xsl:template match="@*|node()" priority="-2" mode="M279">
      <xsl:apply-templates select="*" mode="M279"/>
   </xsl:template>

   <!--PATTERN journal-tests-pattern-->


	  <!--RULE journal-tests-->
   <xsl:template match="element-citation[@publication-type='journal']"
                 priority="1000"
                 mode="M280">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='journal']"
                       id="journal-tests"/>

		    <!--REPORT warning-->
      <xsl:if test="not(fpage) and not(elocation-id)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="not(fpage) and not(elocation-id)">
            <xsl:attribute name="id">eloc-page-assert</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' is a journal, but it doesn't have a page range or e-location. Is this right?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(source,'[Bb]io[Rr]xiv|[Aa]r[Xx]iv')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(source,'[Bb]io[Rr]xiv|[Aa]r[Xx]iv')">
            <xsl:attribute name="id">journal-preprint-check</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a source <xsl:text/>
               <xsl:value-of select="source"/>
               <xsl:text/>, but it is captured as a journal not a preprint.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M280"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M280"/>
   <xsl:template match="@*|node()" priority="-2" mode="M280">
      <xsl:apply-templates select="*" mode="M280"/>
   </xsl:template>

   <!--PATTERN preprint-title-tests-pattern-->


	  <!--RULE preprint-title-tests-->
   <xsl:template match="element-citation[@publication-type='preprint']/source"
                 priority="1000"
                 mode="M281">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='preprint']/source"
                       id="preprint-title-tests"/>
      <xsl:variable name="lc" select="lower-case(.)"/>

		    <!--REPORT warning-->
      <xsl:if test="not(matches($lc,'biorxiv|arxiv|chemrxiv|peerj preprints|psyarxiv|paleorxiv|preprints'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="not(matches($lc,'biorxiv|arxiv|chemrxiv|peerj preprints|psyarxiv|paleorxiv|preprints'))">
            <xsl:attribute name="id">not-rxiv-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' is tagged as a preprint, but has a source <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>, which doesn't look like a preprint. Is it correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($lc,'biorxiv') and not(. = 'bioRxiv')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'biorxiv') and not(. = 'bioRxiv')">
            <xsl:attribute name="id">biorxiv-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a source <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>, which is not the correct proprietary capitalisation - 'bioRxiv'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($lc,'^arxiv$') and not(. = 'arXiv')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'^arxiv$') and not(. = 'arXiv')">
            <xsl:attribute name="id">arxiv-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a source <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>, which is not the correct proprietary capitalisation - 'arXiv'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($lc,'chemrxiv') and not(. = 'ChemRxiv')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'chemrxiv') and not(. = 'ChemRxiv')">
            <xsl:attribute name="id">chemrxiv-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a source <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>, which is not the correct proprietary capitalisation - 'ChemRxiv'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($lc,'peerj preprints') and not(. = 'PeerJ Preprints')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'peerj preprints') and not(. = 'PeerJ Preprints')">
            <xsl:attribute name="id">peerjpreprints-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a source <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>, which is not the correct proprietary capitalisation - 'PeerJ Preprints'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($lc,'psyarxiv') and not(. = 'PsyArXiv')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'psyarxiv') and not(. = 'PsyArXiv')">
            <xsl:attribute name="id">psyarxiv-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a source <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>, which is not the correct proprietary capitalisation - 'PsyArXiv'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($lc,'paleorxiv') and not(. = 'PaleorXiv')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'paleorxiv') and not(. = 'PaleorXiv')">
            <xsl:attribute name="id">paleorxiv-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a source <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>, which is not the correct proprietary capitalisation - 'PaleorXiv'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'�')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'�')">
            <xsl:attribute name="id">preprint-replacement-character-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains the replacement character '�' which is unallowed - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M281"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M281"/>
   <xsl:template match="@*|node()" priority="-2" mode="M281">
      <xsl:apply-templates select="*" mode="M281"/>
   </xsl:template>

   <!--PATTERN website-tests-pattern-->


	  <!--RULE website-tests-->
   <xsl:template match="element-citation[@publication-type='web']"
                 priority="1000"
                 mode="M282">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='web']"
                       id="website-tests"/>
      <xsl:variable name="link" select="lower-case(ext-link)"/>

		    <!--REPORT error-->
      <xsl:if test="contains($link,'github')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="contains($link,'github')">
            <xsl:attribute name="id">github-web-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>web ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a link which contains 'github', therefore it should be captured as a software ref.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'�')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'�')">
            <xsl:attribute name="id">webreplacement-character-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>web citation contains the replacement character '�' which is unallowed - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($link,'psyarxiv.com')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($link,'psyarxiv.com')">
            <xsl:attribute name="id">psyarxiv-web-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>web ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a link which points to a preprint server, PsyArXiv, therefore it should be captured as a preprint type ref - <xsl:text/>
               <xsl:value-of select="ext-link"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($link,'/arxiv.com')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($link,'/arxiv.com')">
            <xsl:attribute name="id">arxiv-web-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>web ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a link which points to a preprint server, arXiv, therefore it should be captured as a preprint type ref - <xsl:text/>
               <xsl:value-of select="ext-link"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($link,'biorxiv.org')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($link,'biorxiv.org')">
            <xsl:attribute name="id">biorxiv-web-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>web ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a link which points to a preprint server, bioRxiv, therefore it should be captured as a preprint type ref - <xsl:text/>
               <xsl:value-of select="ext-link"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($link,'chemrxiv.org')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($link,'chemrxiv.org')">
            <xsl:attribute name="id">chemrxiv-web-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>web ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a link which points to a preprint server, ChemRxiv, therefore it should be captured as a preprint type ref - <xsl:text/>
               <xsl:value-of select="ext-link"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($link,'peerj.com/preprints/')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($link,'peerj.com/preprints/')">
            <xsl:attribute name="id">peerj-preprints-web-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>web ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a link which points to a preprint server, PeerJ Preprints, therefore it should be captured as a preprint type ref - <xsl:text/>
               <xsl:value-of select="ext-link"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($link,'paleorxiv.org')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($link,'paleorxiv.org')">
            <xsl:attribute name="id">paleorxiv-web-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>web ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a link which points to a preprint server, bioRxiv, therefore it should be captured as a preprint type ref - <xsl:text/>
               <xsl:value-of select="ext-link"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M282"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M282"/>
   <xsl:template match="@*|node()" priority="-2" mode="M282">
      <xsl:apply-templates select="*" mode="M282"/>
   </xsl:template>

   <!--PATTERN software-ref-tests-pattern-->


	  <!--RULE software-ref-tests-->
   <xsl:template match="element-citation[@publication-type='software']"
                 priority="1000"
                 mode="M283">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation[@publication-type='software']"
                       id="software-ref-tests"/>
      <xsl:variable name="lc" select="lower-case(data-title)"/>

		    <!--REPORT error-->
      <xsl:if test="matches($lc,'r: a language and environment for statistical computing') and not(matches(person-group[@person-group-type='author']/collab[1],'^R Development Core Team$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'r: a language and environment for statistical computing') and not(matches(person-group[@person-group-type='author']/collab[1],'^R Development Core Team$'))">
            <xsl:attribute name="id">R-test-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>software ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a data-title - <xsl:text/>
               <xsl:value-of select="data-title"/>
               <xsl:text/> - but it does not have one collab element containing 'R Development Core Team'.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($lc,'r: a language and environment for statistical computing') and (count(person-group[@person-group-type='author']/collab) != 1)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'r: a language and environment for statistical computing') and (count(person-group[@person-group-type='author']/collab) != 1)">
            <xsl:attribute name="id">R-test-2</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>software ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a data-title - <xsl:text/>
               <xsl:value-of select="data-title"/>
               <xsl:text/> - but it has <xsl:text/>
               <xsl:value-of select="count(person-group[@person-group-type='author']/collab)"/>
               <xsl:text/> collab element(s).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($lc,'r: a language and environment for statistical computing') and (count((publisher-loc[text() = 'Vienna, Austria'])) != 1)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'r: a language and environment for statistical computing') and (count((publisher-loc[text() = 'Vienna, Austria'])) != 1)">
            <xsl:attribute name="id">R-test-3</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>software ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a data-title - <xsl:text/>
               <xsl:value-of select="data-title"/>
               <xsl:text/> - but does not have a &lt;publisher-loc&gt;Vienna, Austria&lt;/publisher-loc&gt; element.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches($lc,'r: a language and environment for statistical computing') and (count(matches(ext-link/@xlink:href,'http[s]?://www.r-project.org/')) != 1)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches($lc,'r: a language and environment for statistical computing') and (count(matches(ext-link/@xlink:href,'http[s]?://www.r-project.org/')) != 1)">
            <xsl:attribute name="id">R-test-4</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>software ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a data-title - <xsl:text/>
               <xsl:value-of select="data-title"/>
               <xsl:text/> - but does not have a 'http://www.r-project.org/' link.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(lower-case(source),'r: a language and environment for statistical computing')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(lower-case(source),'r: a language and environment for statistical computing')">
            <xsl:attribute name="id">R-test-5</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>software ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a source - <xsl:text/>
               <xsl:value-of select="source"/>
               <xsl:text/> - but this is the data-title.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'�')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'�')">
            <xsl:attribute name="id">software-replacement-character-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>software citation contains the replacement character '�' which is unallowed - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M283"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M283"/>
   <xsl:template match="@*|node()" priority="-2" mode="M283">
      <xsl:apply-templates select="*" mode="M283"/>
   </xsl:template>

   <!--PATTERN publisher-name-tests-pattern-->


	  <!--RULE publisher-name-tests-->
   <xsl:template match="element-citation/publisher-name" priority="1000" mode="M284">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation/publisher-name"
                       id="publisher-name-tests"/>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,':')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,':')">
            <xsl:attribute name="id">publisher-name-colon</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a publisher-name containing a colon. Should the text preceding the colon instead be captured as publisher-loc?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Ii]nc\.')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[Ii]nc\.')">
            <xsl:attribute name="id">publisher-name-inc</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' has a publisher-name containing the text 'Inc.' Should the fullstop be removed?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'�')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'�')">
            <xsl:attribute name="id">pub-name-replacement-character-presence</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> contains the replacement character '�' which is unallowed - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M284"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M284"/>
   <xsl:template match="@*|node()" priority="-2" mode="M284">
      <xsl:apply-templates select="*" mode="M284"/>
   </xsl:template>

   <!--PATTERN ref-name-tests-pattern-->


	  <!--RULE ref-name-tests-->
   <xsl:template match="element-citation//name" priority="1000" mode="M285">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation//name"
                       id="ref-name-tests"/>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Aa]uthor')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[Aa]uthor')">
            <xsl:attribute name="id">author-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>name in ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' contans the text 'Author'. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Ed]itor')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[Ed]itor')">
            <xsl:attribute name="id">author-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>name in ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' contans the text 'Editor'. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Pp]ress')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[Pp]ress')">
            <xsl:attribute name="id">author-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>name in ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' contans the text 'Press'. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(surname,'^[A-Z]*$')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(surname,'^[A-Z]*$')">
            <xsl:attribute name="id">all-caps-surname</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>surname in ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' is composed of only capitalised letters - <xsl:text/>
               <xsl:value-of select="surname"/>
               <xsl:text/>. Should this be captured as a collab? If not, Should it be - <xsl:text/>
               <xsl:value-of select="concat(substring(surname,1,1),lower-case(substring(surname,2)))"/>
               <xsl:text/>?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[0-9]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[0-9]')">
            <xsl:attribute name="id">surname-number-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>name in ref '<xsl:text/>
               <xsl:value-of select="ancestor::ref/@id"/>
               <xsl:text/>' contains numbers - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>. Should this be captured as a collab?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M285"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M285"/>
   <xsl:template match="@*|node()" priority="-2" mode="M285">
      <xsl:apply-templates select="*" mode="M285"/>
   </xsl:template>

   <!--PATTERN isbn-conformity-pattern-->


	  <!--RULE isbn-conformity-->
   <xsl:template match="element-citation/pub-id[@pub-id-type='isbn']"
                 priority="1000"
                 mode="M286">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="element-citation/pub-id[@pub-id-type='isbn']"
                       id="isbn-conformity"/>
      <xsl:variable name="t" select="translate(.,'-','')"/>
      <xsl:variable name="sum" select="e:isbn-sum($t)"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="number($sum) = 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="number($sum) = 0">
               <xsl:attribute name="id">isbn-conformity-test</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>pub-id contains an invalid ISBN. Should it be captured as another type of pub-id?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M286"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M286"/>
   <xsl:template match="@*|node()" priority="-2" mode="M286">
      <xsl:apply-templates select="*" mode="M286"/>
   </xsl:template>

   <!--PATTERN isbn-conformity-2-pattern-->


	  <!--RULE isbn-conformity-2-->
   <xsl:template match="isbn" priority="1000" mode="M287">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="isbn"
                       id="isbn-conformity-2"/>
      <xsl:variable name="t" select="translate(.,'-','')"/>
      <xsl:variable name="sum" select="e:isbn-sum($t)"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="number($sum) = 0"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="number($sum) = 0">
               <xsl:attribute name="id">isbn-conformity-test-2</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>isbn contains an invalid ISBN. Should it be captured as another type of pub-id?</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M287"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M287"/>
   <xsl:template match="@*|node()" priority="-2" mode="M287">
      <xsl:apply-templates select="*" mode="M287"/>
   </xsl:template>

   <!--PATTERN data-availability-statement-pattern-->


	  <!--RULE data-availability-statement-->
   <xsl:template match="sec[@sec-type='data-availability']/p[1]"
                 priority="1000"
                 mode="M288">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="sec[@sec-type='data-availability']/p[1]"
                       id="data-availability-statement"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'\.$|\?$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\.$|\?$')">
               <xsl:attribute name="id">das-sentence-conformity</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>The Data Availability Statement must end with a full stop.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'[Dd]ryad') and not(parent::sec//element-citation/pub-id[@assigning-authority='Dryad'])">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'[Dd]ryad') and not(parent::sec//element-citation/pub-id[@assigning-authority='Dryad'])">
            <xsl:attribute name="id">das-dryad-conformity</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Data Availability Statement contains the word Dryad, but there is no data citation in the dataset section with a dryad assigning authority.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Ss]upplemental [Ffigure]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'[Ss]upplemental [Ffigure]')">
            <xsl:attribute name="id">das-supplemental-conformity</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Data Availability Statement contains the phrase 'supplemental figure'. This will almost certainly need updating to account for eLife's figure labelling.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Rr]equest')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[Rr]equest')">
            <xsl:attribute name="id">das-request-conformity-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Data Availability Statement contains the phrase 'request'. Does it state data is avaialble upon request, and if so, has this been approved by editorial?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'10\.\d{4,9}/[-._;()/:A-Za-z0-9]+$') and not(matches(.,'http[s]?://doi.org/'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'10\.\d{4,9}/[-._;()/:A-Za-z0-9]+$') and not(matches(.,'http[s]?://doi.org/'))">
            <xsl:attribute name="id">das-doi-conformity-1</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Data Availability Statement contains a doi, but it does not contain 'https://doi.org/'. All dois should be updated to include a full 'https://doi.org/...' type link.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M288"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M288"/>
   <xsl:template match="@*|node()" priority="-2" mode="M288">
      <xsl:apply-templates select="*" mode="M288"/>
   </xsl:template>

   <!--PATTERN ethics-info-pattern-->


	  <!--RULE ethics-info-->
   <xsl:template match="fn-group[@content-type='ethics-information']/fn"
                 priority="1000"
                 mode="M289">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="fn-group[@content-type='ethics-information']/fn"
                       id="ethics-info"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="matches(.,'\.$|\?$')"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'\.$|\?$')">
               <xsl:attribute name="id">ethics-info-conformity</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>The ethics statement must end with a full stop.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Ss]upplemental [Ffigure]')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'[Ss]upplemental [Ffigure]')">
            <xsl:attribute name="id">ethics-info-supplemental-conformity</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Ethics statement contains the phrase 'supplemental figure'. This will almost certainly need updating to account for eLife's figure labelling.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M289"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M289"/>
   <xsl:template match="@*|node()" priority="-2" mode="M289">
      <xsl:apply-templates select="*" mode="M289"/>
   </xsl:template>

   <!--PATTERN sec-title-conformity-pattern-->


	  <!--RULE sec-title-conformity-->
   <xsl:template match="sec/title" priority="1000" mode="M290">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="sec/title"
                       id="sec-title-conformity"/>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'^[A-Za-z]{1,3}\)|^\([A-Za-z]{1,3}')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'^[A-Za-z]{1,3}\)|^\([A-Za-z]{1,3}')">
            <xsl:attribute name="id">sec-title-list-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Section title might start with a list indicator - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'^[Aa]ppendix')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'^[Aa]ppendix')">
            <xsl:attribute name="id">sec-title-appendix-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Section title contains the word appendix - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'. Should it be captured as an appendix?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'^[Aa]bbreviation[s]?')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'^[Aa]bbreviation[s]?')">
            <xsl:attribute name="id">sec-title-abbr-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Section title contains the word abbreviation - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>'. Is it an abbreviation section? eLife house style is to define abbreviations in the text when they are first mentioned.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M290"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M290"/>
   <xsl:template match="@*|node()" priority="-2" mode="M290">
      <xsl:apply-templates select="*" mode="M290"/>
   </xsl:template>

   <!--PATTERN abstract-house-tests-pattern-->


	  <!--RULE abstract-house-tests-->
   <xsl:template match="abstract[not(@*)]" priority="1000" mode="M291">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="abstract[not(@*)]"
                       id="abstract-house-tests"/>
      <xsl:variable name="subj"
                    select="parent::article-meta/article-categories/subj-group[@subj-group-type='display-channel']/subject"/>

		    <!--REPORT warning-->
      <xsl:if test="descendant::xref[@ref-type='bibr']">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="descendant::xref[@ref-type='bibr']">
            <xsl:attribute name="id">xref-bibr-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Abstract contains a citation - '<xsl:text/>
               <xsl:value-of select="descendant::xref[@ref-type='bibr'][1]"/>
               <xsl:text/>' - which isn't usually allowed. Check that this is correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="($subj = 'Research Communication') and (not(matches(self::*/descendant::p[2],'^Editorial note')))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($subj = 'Research Communication') and (not(matches(self::*/descendant::p[2],'^Editorial note')))">
            <xsl:attribute name="id">res-comm-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>'<xsl:text/>
               <xsl:value-of select="$subj"/>
               <xsl:text/>' has only one paragraph in its abstract or the second paragraph does not begin with 'Editorial note', which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="(count(p) &gt; 1) and ($subj = 'Research Article')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(count(p) &gt; 1) and ($subj = 'Research Article')">
            <xsl:attribute name="id">res-art-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>'<xsl:text/>
               <xsl:value-of select="$subj"/>
               <xsl:text/>' has more than one paragraph in its abstract, is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M291"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M291"/>
   <xsl:template match="@*|node()" priority="-2" mode="M291">
      <xsl:apply-templates select="*" mode="M291"/>
   </xsl:template>

   <!--PATTERN KRT-xref-tests-pattern-->


	  <!--RULE KRT-xref-tests-->
   <xsl:template match="table-wrap[@id='keyresource']//xref[@ref-type='bibr']"
                 priority="1000"
                 mode="M292">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="table-wrap[@id='keyresource']//xref[@ref-type='bibr']"
                       id="KRT-xref-tests"/>

		    <!--REPORT warning-->
      <xsl:if test="(count(ancestor::*:td/preceding-sibling::td) = 0) or (count(ancestor::*:td/preceding-sibling::td) = 1) or (count(ancestor::*:td/preceding-sibling::td) = 3)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(count(ancestor::*:td/preceding-sibling::td) = 0) or (count(ancestor::*:td/preceding-sibling::td) = 1) or (count(ancestor::*:td/preceding-sibling::td) = 3)">
            <xsl:attribute name="id">xref-colum-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>'<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' citation is in a column in the Key Resources Table which usually does not include references. Is it correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M292"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M292"/>
   <xsl:template match="@*|node()" priority="-2" mode="M292">
      <xsl:apply-templates select="*" mode="M292"/>
   </xsl:template>

   <!--PATTERN KRT-check-pattern-->


	  <!--RULE KRT-check-->
   <xsl:template match="article" priority="1000" mode="M293">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article"
                       id="KRT-check"/>
      <xsl:variable name="subj"
                    select="descendant::subj-group[@subj-group-type='display-channel']/subject"/>
      <xsl:variable name="methods" select="('model', 'methods', 'materials|methods')"/>

		    <!--REPORT warning-->
      <xsl:if test="($subj = 'Research Article') and not(descendant::table-wrap[@id = 'keyresource']) and (descendant::sec[@sec-type=$methods]/*[2]/local-name()='table-wrap')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="($subj = 'Research Article') and not(descendant::table-wrap[@id = 'keyresource']) and (descendant::sec[@sec-type=$methods]/*[2]/local-name()='table-wrap')">
            <xsl:attribute name="id">KRT-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>'<xsl:text/>
               <xsl:value-of select="$subj"/>
               <xsl:text/>' does not have a key resources table, but the <xsl:text/>
               <xsl:value-of select="descendant::sec[@sec-type=$methods]/title"/>
               <xsl:text/> starts with a table. Should this table be a key resources table?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M293"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M293"/>
   <xsl:template match="@*|node()" priority="-2" mode="M293">
      <xsl:apply-templates select="*" mode="M293"/>
   </xsl:template>

   <!--PATTERN KRT-td-checks-pattern-->


	  <!--RULE KRT-td-checks-->
   <xsl:template match="table-wrap[@id='keyresource']//td"
                 priority="1000"
                 mode="M294">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="table-wrap[@id='keyresource']//td"
                       id="KRT-td-checks"/>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'10\.\d{4,9}/') and (count(ext-link[contains(@xlink:href,'doi.org')]) = 0)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'10\.\d{4,9}/') and (count(ext-link[contains(@xlink:href,'doi.org')]) = 0)">
            <xsl:attribute name="id">doi-link-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>td element containing - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' - looks like it contains a doi, but it contains no link with 'doi.org', which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'[Pp][Mm][Ii][Dd][:]?\s?[0-9][0-9][0-9][0-9]+') and (count(ext-link[contains(@xlink:href,'www.ncbi.nlm.nih.gov/pubmed/')]) = 0)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'[Pp][Mm][Ii][Dd][:]?\s?[0-9][0-9][0-9][0-9]+') and (count(ext-link[contains(@xlink:href,'www.ncbi.nlm.nih.gov/pubmed/')]) = 0)">
            <xsl:attribute name="id">PMID-link-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>td element containing - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' - looks like it contains a PMID, but it contains no link pointing to PubMed, which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="matches(.,'PMCID[:]?\s?PMC[0-9][0-9][0-9]+') and (count(ext-link[contains(@xlink:href,'www.ncbi.nlm.nih.gov/pmc')]) = 0)">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'PMCID[:]?\s?PMC[0-9][0-9][0-9]+') and (count(ext-link[contains(@xlink:href,'www.ncbi.nlm.nih.gov/pmc')]) = 0)">
            <xsl:attribute name="id">PMCID-link-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>td element containing - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' - looks like it contains a PMCID, but it contains no link pointing to PMC, which is incorrect.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M294"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M294"/>
   <xsl:template match="@*|node()" priority="-2" mode="M294">
      <xsl:apply-templates select="*" mode="M294"/>
   </xsl:template>

   <!--PATTERN colour-table-pattern-->


	  <!--RULE colour-table-->
   <xsl:template match="th|td" priority="1000" mode="M295">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="th|td"
                       id="colour-table"/>

		    <!--REPORT warning-->
      <xsl:if test="starts-with(@style,'author-callout')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="starts-with(@style,'author-callout')">
            <xsl:attribute name="id">colour-check-table</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element has colour background. Is this correct? It contains <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M295"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M295"/>
   <xsl:template match="@*|node()" priority="-2" mode="M295">
      <xsl:apply-templates select="*" mode="M295"/>
   </xsl:template>

   <!--PATTERN colour-named-content-pattern-->


	  <!--RULE colour-named-content-->
   <xsl:template match="named-content" priority="1000" mode="M296">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="named-content"
                       id="colour-named-content"/>
      <xsl:variable name="prec-text"
                    select="substring(preceding-sibling::text()[1],string-length(preceding-sibling::text()[1])-25)"/>

		    <!--REPORT warning-->
      <xsl:if test="starts-with(@content-type,'author-callout')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="starts-with(@content-type,'author-callout')">
            <xsl:attribute name="id">colour-named-content-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> has colour formatting. Is this correct? Preceding text - <xsl:text/>
               <xsl:value-of select="$prec-text"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M296"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M296"/>
   <xsl:template match="@*|node()" priority="-2" mode="M296">
      <xsl:apply-templates select="*" mode="M296"/>
   </xsl:template>

   <!--PATTERN colour-styled-content-pattern-->


	  <!--RULE colour-styled-content-->
   <xsl:template match="styled-content" priority="1000" mode="M297">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="styled-content"
                       id="colour-styled-content"/>
      <xsl:variable name="parent" select="parent::*/local-name()"/>
      <xsl:variable name="prec-text"
                    select="substring(preceding-sibling::text()[1],string-length(preceding-sibling::text()[1])-25)"/>

		    <!--REPORT warning-->
      <xsl:if test=".">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test=".">
            <xsl:attribute name="id">colour-styled-content-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>'<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' - <xsl:text/>
               <xsl:value-of select="$parent"/>
               <xsl:text/> element contains a styled content element. Is this correct?  Preceding text - <xsl:text/>
               <xsl:value-of select="concat($prec-text,.)"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M297"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M297"/>
   <xsl:template match="@*|node()" priority="-2" mode="M297">
      <xsl:apply-templates select="*" mode="M297"/>
   </xsl:template>

   <!--PATTERN p-punctuation-pattern-->


	  <!--RULE p-punctuation-->
   <xsl:template match="article/body//p[not(parent::list-item)]"
                 priority="1000"
                 mode="M298">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article/body//p[not(parent::list-item)]"
                       id="p-punctuation"/>
      <xsl:variable name="para" select="replace(.,' ',' ')"/>

		    <!--REPORT warning-->
      <xsl:if test="if ((ancestor::article[@article-type='article-commentary']) and (count(preceding::p[ancestor::body]) = 0)) then () else if (descendant::*[last()]/ancestor::disp-formula) then () else not(matches($para,'\p{P}\s*?$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ((ancestor::article[@article-type='article-commentary']) and (count(preceding::p[ancestor::body]) = 0)) then () else if (descendant::*[last()]/ancestor::disp-formula) then () else not(matches($para,'\p{P}\s*?$'))">
            <xsl:attribute name="id">p-punctuation-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>paragraph doesn't end with punctuation - Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="if ((ancestor::article[@article-type='article-commentary']) and (count(preceding::p[ancestor::body]) = 0)) then () else if (descendant::*[last()]/ancestor::disp-formula) then () else not(matches($para,'\.\s*?$|:\s*?$|\?\s*?$|!\s*?$'))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="if ((ancestor::article[@article-type='article-commentary']) and (count(preceding::p[ancestor::body]) = 0)) then () else if (descendant::*[last()]/ancestor::disp-formula) then () else not(matches($para,'\.\s*?$|:\s*?$|\?\s*?$|!\s*?$'))">
            <xsl:attribute name="id">p-bracket-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>paragraph doesn't end with a full stop, colon, question or excalamation mark - Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M298"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M298"/>
   <xsl:template match="@*|node()" priority="-2" mode="M298">
      <xsl:apply-templates select="*" mode="M298"/>
   </xsl:template>

   <!--PATTERN italic-house-style-pattern-->


	  <!--RULE italic-house-style-->
   <xsl:template match="italic[not(ancestor::ref)]" priority="1000" mode="M299">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="italic[not(ancestor::ref)]"
                       id="italic-house-style"/>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'et al[\.]?')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'et al[\.]?')">
            <xsl:attribute name="id">et-al-italic-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' - this should not be in italics (eLife house style).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Ii]n [Vv]itro')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'[Ii]n [Vv]itro')">
            <xsl:attribute name="id">in-vitro-italic-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'in vitro' - this should not be in italics (eLife house style).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Ii]n [Vv]ivo')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'[Ii]n [Vv]ivo')">
            <xsl:attribute name="id">in-vivo-italic-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'in vivo' - this should not be in italics (eLife house style).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Ee]x [Vv]ivo')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'[Ee]x [Vv]ivo')">
            <xsl:attribute name="id">ex-vivo-italic-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'ex vivo' - this should not be in italics (eLife house style).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Aa] [Pp]riori')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'[Aa] [Pp]riori')">
            <xsl:attribute name="id">a-priori-italic-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'a priori' - this should not be in italics (eLife house style).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Aa] [Pp]osteriori')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'[Aa] [Pp]osteriori')">
            <xsl:attribute name="id">a-posteriori-italic-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'a posteriori' - this should not be in italics (eLife house style).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Dd]e [Nn]ovo')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'[Dd]e [Nn]ovo')">
            <xsl:attribute name="id">de-novo-italic-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'de novo' - this should not be in italics (eLife house style).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Ii]n [Uu]tero')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'[Ii]n [Uu]tero')">
            <xsl:attribute name="id">in-utero-italic-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'in utero' - this should not be in italics (eLife house style).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Ii]n [Nn]atura')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'[Ii]n [Nn]atura')">
            <xsl:attribute name="id">in-natura-italic-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'in natura' - this should not be in italics (eLife house style).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Ii]n [Ss]itu')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'[Ii]n [Ss]itu')">
            <xsl:attribute name="id">in-situ-italic-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'in situ' - this should not be in italics (eLife house style).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Rr]ete [Mm]irabile')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'[Rr]ete [Mm]irabile')">
            <xsl:attribute name="id">rete-mirabile-italic-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'rete mirabile' - this should not be in italics (eLife house style).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Nn]omen [Nn]ovum')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(.,'[Nn]omen [Nn]ovum')">
            <xsl:attribute name="id">nomen-novum-italic-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'nomen novum' - this should not be in italics (eLife house style).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Ss]ativum')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[Ss]ativum')">
            <xsl:attribute name="id">sativum-italic-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'sativum' - this should not be in italics (eLife house style).</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(.,'[Ss]ensu')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="matches(.,'[Ss]ensu')">
            <xsl:attribute name="id">sensu-italic-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="name(.)"/>
               <xsl:text/> element contains 'sensu' - this should not be in italics (eLife house style).</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M299"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M299"/>
   <xsl:template match="@*|node()" priority="-2" mode="M299">
      <xsl:apply-templates select="*" mode="M299"/>
   </xsl:template>

   <!--PATTERN list-house-style-pattern-->


	  <!--RULE list-house-style-->
   <xsl:template match="list[@list-type]" priority="1000" mode="M300">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="list[@list-type]"
                       id="list-house-style"/>
      <xsl:variable name="usual-types" select="('bullet','simple','order')"/>

		    <!--ASSERT warning-->
      <xsl:choose>
         <xsl:when test="@list-type = $usual-types"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="@list-type = $usual-types">
               <xsl:attribute name="id">list-type-house-style-test</xsl:attribute>
               <xsl:attribute name="role">warning</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>
                  <xsl:text/>
                  <xsl:value-of select="name(.)"/>
                  <xsl:text/> element is a list-type='<xsl:text/>
                  <xsl:value-of select="@list-type"/>
                  <xsl:text/>'. According to house style, bullets, numbers or no indicators should be used. Usual values - ('bullet','simple','order').</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M300"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M300"/>
   <xsl:template match="@*|node()" priority="-2" mode="M300">
      <xsl:apply-templates select="*" mode="M300"/>
   </xsl:template>

   <!--PATTERN pubmed-link-pattern-->


	  <!--RULE pubmed-link-->
   <xsl:template match="p//ext-link[not(ancestor::table-wrap)]"
                 priority="1000"
                 mode="M301">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="p//ext-link[not(ancestor::table-wrap)]"
                       id="pubmed-link"/>

		    <!--REPORT warning-->
      <xsl:if test="matches(@xlink:href,'^http[s]?://www.ncbi.nlm.nih.gov/pubmed/[\d]*')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(@xlink:href,'^http[s]?://www.ncbi.nlm.nih.gov/pubmed/[\d]*')">
            <xsl:attribute name="id">pubmed-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="parent::*/local-name()"/>
               <xsl:text/> element contains what looks like a link to a PubMed article - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - should this be added a reference instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="matches(@xlink:href,'^http[s]?://www.ncbi.nlm.nih.gov/pmc/articles/PMC[\d]*')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="matches(@xlink:href,'^http[s]?://www.ncbi.nlm.nih.gov/pmc/articles/PMC[\d]*')">
            <xsl:attribute name="id">pmc-presence</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>
               <xsl:text/>
               <xsl:value-of select="parent::*/local-name()"/>
               <xsl:text/> element contains what looks like a link to a PMC article - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - should this be added a reference instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M301"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M301"/>
   <xsl:template match="@*|node()" priority="-2" mode="M301">
      <xsl:apply-templates select="*" mode="M301"/>
   </xsl:template>

   <!--PATTERN ref-link-mandate-pattern-->


	  <!--RULE ref-link-mandate-->
   <xsl:template match="ref-list/ref" priority="1000" mode="M302">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="ref-list/ref"
                       id="ref-link-mandate"/>
      <xsl:variable name="id" select="@id"/>

		    <!--ASSERT error-->
      <xsl:choose>
         <xsl:when test="ancestor::article//xref[@rid = $id]"/>
         <xsl:otherwise>
            <svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                test="ancestor::article//xref[@rid = $id]">
               <xsl:attribute name="id">final-ref-link-presence</xsl:attribute>
               <xsl:attribute name="role">error</xsl:attribute>
               <xsl:attribute name="location">
                  <xsl:apply-templates select="." mode="schematron-select-full-path"/>
               </xsl:attribute>
               <svrl:text>'<xsl:text/>
                  <xsl:value-of select="$id"/>
                  <xsl:text/>' has no linked citations. Either the reference should be removed or a citation linking to it needs to be added.</svrl:text>
            </svrl:failed-assert>
         </xsl:otherwise>
      </xsl:choose>
      <xsl:apply-templates select="*" mode="M302"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M302"/>
   <xsl:template match="@*|node()" priority="-2" mode="M302">
      <xsl:apply-templates select="*" mode="M302"/>
   </xsl:template>

   <!--PATTERN fig-permissions-check-pattern-->


	  <!--RULE fig-permissions-check-->
   <xsl:template match="fig|media[@mimetype='video']" priority="1000" mode="M303">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="fig|media[@mimetype='video']"
                       id="fig-permissions-check"/>
      <xsl:variable name="label" select="replace(label,'\.','')"/>

		    <!--REPORT warning-->
      <xsl:if test="not(descendant::permissions) and matches(caption,'[Rr]eproduced from')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="not(descendant::permissions) and matches(caption,'[Rr]eproduced from')">
            <xsl:attribute name="id">reproduce-test-1</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>The caption for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> contains the text 'reproduced from', but has no permissions. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(descendant::permissions) and matches(caption,'[Rr]eproduced [Ww]ith [Pp]ermission')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="not(descendant::permissions) and matches(caption,'[Rr]eproduced [Ww]ith [Pp]ermission')">
            <xsl:attribute name="id">reproduce-test-2</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>The caption for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> contains the text 'reproduced with permission', but has no permissions. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(descendant::permissions) and matches(caption,'[Aa]dapted from')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="not(descendant::permissions) and matches(caption,'[Aa]dapted from')">
            <xsl:attribute name="id">reproduce-test-3</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>The caption for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> contains the text 'adapted from ...', but has no permissions. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(descendant::permissions) and matches(caption,'[Rr]eprinted from')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="not(descendant::permissions) and matches(caption,'[Rr]eprinted from')">
            <xsl:attribute name="id">reproduce-test-4</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>The caption for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> contains the text 'reprinted from', but has no permissions. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="not(descendant::permissions) and matches(caption,'[Rr]eprinted [Ww]ith [Pp]ermission')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="not(descendant::permissions) and matches(caption,'[Rr]eprinted [Ww]ith [Pp]ermission')">
            <xsl:attribute name="id">reproduce-test-5</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>The caption for <xsl:text/>
               <xsl:value-of select="$label"/>
               <xsl:text/> contains the text 'reprinted with permission', but has no permissions. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M303"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M303"/>
   <xsl:template match="@*|node()" priority="-2" mode="M303">
      <xsl:apply-templates select="*" mode="M303"/>
   </xsl:template>

   <!--PATTERN xref-formatting-pattern-->


	  <!--RULE xref-formatting-->
   <xsl:template match="xref[not(@ref-type='bibr')]" priority="1000" mode="M304">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="xref[not(@ref-type='bibr')]"
                       id="xref-formatting"/>
      <xsl:variable name="parent" select="parent::*/local-name()"/>
      <xsl:variable name="child" select="child::*/local-name()"/>
      <xsl:variable name="formatting-elems"
                    select="('bold','fixed-case','italic','monospace','overline','overline-start','overline-end','roman','sans-serif','sc','strike','underline','underline-start','underline-end','ruby','sub','sup')"/>

		    <!--REPORT error-->
      <xsl:if test="$parent = $formatting-elems">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="$parent = $formatting-elems">
            <xsl:attribute name="id">xref-parent-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>xref - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - has a formatting parent element - <xsl:text/>
               <xsl:value-of select="$parent"/>
               <xsl:text/> - which is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="$child = $formatting-elems">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="$child = $formatting-elems">
            <xsl:attribute name="id">xref-child-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>xref - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - has a formatting child element - <xsl:text/>
               <xsl:value-of select="$child"/>
               <xsl:text/> - which is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M304"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M304"/>
   <xsl:template match="@*|node()" priority="-2" mode="M304">
      <xsl:apply-templates select="*" mode="M304"/>
   </xsl:template>

   <!--PATTERN ref-xref-formatting-pattern-->


	  <!--RULE ref-xref-formatting-->
   <xsl:template match="xref[@ref-type='bibr']" priority="1000" mode="M305">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="xref[@ref-type='bibr']"
                       id="ref-xref-formatting"/>
      <xsl:variable name="parent" select="parent::*/local-name()"/>
      <xsl:variable name="child" select="child::*/local-name()"/>
      <xsl:variable name="formatting-elems"
                    select="('bold','fixed-case','monospace','overline','overline-start','overline-end','roman','sans-serif','sc','strike','underline','underline-start','underline-end','ruby','sub','sup')"/>

		    <!--REPORT error-->
      <xsl:if test="$parent = ($formatting-elems,'italic')">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="$parent = ($formatting-elems,'italic')">
            <xsl:attribute name="id">ref-xref-parent-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>xref - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - has a formatting parent element - <xsl:text/>
               <xsl:value-of select="$parent"/>
               <xsl:text/> - which is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT error-->
      <xsl:if test="$child = $formatting-elems">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="$child = $formatting-elems">
            <xsl:attribute name="id">ref-xref-child-test</xsl:attribute>
            <xsl:attribute name="role">error</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>xref - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - has a formatting child element - <xsl:text/>
               <xsl:value-of select="$child"/>
               <xsl:text/> - which is not correct.</svrl:text>
         </svrl:successful-report>
      </xsl:if>

		    <!--REPORT warning-->
      <xsl:if test="italic">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="italic">
            <xsl:attribute name="id">ref-xref-italic-child-test</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>xref - <xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/> - contains italic formatting. Is this correct?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M305"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M305"/>
   <xsl:template match="@*|node()" priority="-2" mode="M305">
      <xsl:apply-templates select="*" mode="M305"/>
   </xsl:template>

   <!--PATTERN code-fork-pattern-->


	  <!--RULE code-fork-->
   <xsl:template match="article" priority="1000" mode="M306">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="article"
                       id="code-fork"/>
      <xsl:variable name="test" select="e:code-check(.)"/>

		    <!--REPORT warning-->
      <xsl:if test="$test//*:match">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl" test="$test//*:match">
            <xsl:attribute name="id">code-fork-info</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Article possibly contains code that needs forking. Search - <xsl:text/>
               <xsl:value-of select="string-join(for $x in $test//*:match return $x,', ')"/>
               <xsl:text/>
            </svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M306"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M306"/>
   <xsl:template match="@*|node()" priority="-2" mode="M306">
      <xsl:apply-templates select="*" mode="M306"/>
   </xsl:template>

   <!--PATTERN auth-kwd-style-pattern-->


	  <!--RULE auth-kwd-style-->
   <xsl:template match="kwd-group[@kwd-group-type='author-keywords']/kwd"
                 priority="1000"
                 mode="M307">
      <svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                       context="kwd-group[@kwd-group-type='author-keywords']/kwd"
                       id="auth-kwd-style"/>
      <xsl:variable name="lower" select="lower-case(.)"/>
      <xsl:variable name="t" select="replace($article-text,concat('\. ',.),'')"/>

		    <!--REPORT warning-->
      <xsl:if test="(. != $lower) and not(contains($t,.))">
         <svrl:successful-report xmlns:svrl="http://purl.oclc.org/dsdl/svrl"
                                 test="(. != $lower) and not(contains($t,.))">
            <xsl:attribute name="id">auth-kwd-check</xsl:attribute>
            <xsl:attribute name="role">warning</xsl:attribute>
            <xsl:attribute name="location">
               <xsl:apply-templates select="." mode="schematron-select-full-path"/>
            </xsl:attribute>
            <svrl:text>Keyword - '<xsl:text/>
               <xsl:value-of select="."/>
               <xsl:text/>' - does not appear in the article text with this capitalisation. Should it be <xsl:text/>
               <xsl:value-of select="$lower"/>
               <xsl:text/> instead?</svrl:text>
         </svrl:successful-report>
      </xsl:if>
      <xsl:apply-templates select="*" mode="M307"/>
   </xsl:template>
   <xsl:template match="text()" priority="-1" mode="M307"/>
   <xsl:template match="@*|node()" priority="-2" mode="M307">
      <xsl:apply-templates select="*" mode="M307"/>
   </xsl:template>
</xsl:stylesheet>
